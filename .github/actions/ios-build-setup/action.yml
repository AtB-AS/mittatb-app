name: iOS build setup
description: 'Sets up the necessarry dependencies, environment and assets for building the iOS app'
inputs:
  use-build-cache:
    description: "Wether to use the build cache for artifacts and dependencies (will speed up subsequent builds if no native changes have happened)"
    default: 'false'
    required: true
  app-environment:
    description: "Which app-environment to build for, staging or store"
    required: true
  app-org:
    description: "Which app-organization to build for, atb, nfk, fram or other"
    required: true
  git-crypt-key:
    description: "The gitcrypt key to unlock the repository files with"
    required: true

runs:
  using: "composite"
  steps:
      - name: Set global env vars
        shell: bash
        run: |
          echo "BUILD_ID=$(date +%s)" >> $GITHUB_ENV
          echo "APP_ENVIRONMENT=${{ inputs.app-environment }}" >> $GITHUB_ENV
      - name: Decrypt env files
        shell: bash
        run: sh ./scripts/git-crypt-unlock.sh
        env:
          GIT_CRYPT_KEY: ${{ inputs.git-crypt-key }}
      - name: install node v16
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Get potential cached node_modules
        uses: actions/cache@v2
        id: modules-cache
        if: ${{ inputs.use-build-cache }} == 'true'
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/patches/**.patch') }}
      - name: Install node_modules
        shell: bash
        if: ${{ inputs.use-build-cache }} != 'true' || steps.modules-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.3.0
        with:
          xcode-version: "13.1"
      - name: Setup ruby and bundle install
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.6
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Set environment
        shell: bash
        run: sh ./scripts/override-environment.sh ${{ inputs.app-environment }} ${{ inputs.app-org }}
      - name: Export workflow env variables based on environment
        shell: bash
        run: sh ./scripts/export-workflow-parameters.sh
      - name: Override native config files
        shell: bash
        run: sh ./scripts/ios/override-config-files.sh
