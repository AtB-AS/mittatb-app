// Top-level build file where you can add configuration options common to all sub-projects/modules.

// https://medium.com/@StefMa/its-time-to-ditch-the-buildscript-block-a1ab12e0d9ce
// https://gist.github.com/dmitrij-drandarov/8d24cb39ff32d929197b16b542dabe0c

buildscript {
    if (!project.gradle.startParameter.taskNames.contains("renovate")) {
        ext.repos = {
            mavenLocal()
            maven {
                url "$entur_artifactory_partner_resolve_snapshot_url"
                credentials {
                    username "$entur_artifactory_user"
                    password "$entur_artifactory_password"
                }
                mavenContent {
                    snapshotsOnly()
                }
            }
            maven {
                url "$entur_artifactory_partner_resolve_release_url"
                credentials {
                    username "$entur_artifactory_user"
                    password "$entur_artifactory_password"
                }
                mavenContent {
                    releasesOnly()
                }
            }
        }
    } else {
        ext.repos = {
            google()
            jcenter()
        }
    }
    repositories repos
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.3'
        classpath 'com.google.gms:google-services:4.3.10'
        // Add the Crashlytics Gradle plugin.
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
        // https://github.com/JakeWharton/butterknife#library-projects
        classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.3'
    }
}

plugins {
    id 'com.diffplug.spotless' version '6.2.0' apply false // configure, but do not apply
    id 'com.hiya.jacoco-android' version '0.2' apply false

    id 'com.apollographql.apollo' version '2.5.11' apply false
    id 'org.owasp.dependencycheck' version '7.1.0.1' apply false
    id 'com.github.ben-manes.versions' version '0.41.0' apply false

    id 'org.sonarqube' version '3.3'

    id "com.starter.easylauncher" version "5.0.0" apply false

    id "com.gorylenko.gradle-git-properties" version "2.3.2" apply false
}

def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def androidLibraryProjects() {
    buildProjects().findAll { it.name.endsWith("android-lib")}
}

def javaLibraryProjects() {
    buildProjects().findAll { it.name.endsWith("java-lib")}
}

allprojects {
    apply plugin: 'org.owasp.dependencycheck'

    if (project.gradle.startParameter.taskNames.contains("renovate")) {
        configurations {
            // add more on demand
            androidTestImplementation
            api
            implementation
            testImplementation
            annotationProcessor
        }
    }

    buildscript {
        repositories repos
    }
    repositories repos

    configurations.all {
        // Check for updates every build
        // A module with a *-SNAPSHOT version coming from a Maven repository will be considered changing by default.
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

        resolutionStrategy.force "org.objenesis:objenesis:${objenesisVersion}"
    }

    dependencyCheck {
        failOnError = false // let's ignore errors to make builds more stable
        analyzedTypes = ['jar'] // the default artifact types that will be analyzed.
        // OWASP Dependency Check plugin for Jenkins needs an XML report, but humans may also need an HTML one
        format = 'ALL'
        // Specifies if the build should be failed if a CVSS score equal to or above a specified level is identified.
        failBuildOnCVSS = 7
        // specify a list of known issues which contain false-positives
        suppressionFiles = ["$rootDir/dependencycheck-root-suppression.xml"]
    }
}

ext {
    slf4jVersion = '1.7.36'
    commonsIoVersion = '2.11.0'
    bouncyCastleVersion = '1.70'
    firebaseBomVersion = '30.0.2'
    desugarVersion = '1.1.5'
    androidxEspressoVersion = '3.4.0'
    robolectricVersion = '4.7.3'
    abtProtoVersion = '2.386'
    grpcVersion = '1.46.0'
    androidPlayServicesSafetynetVersion = '18.0.1'
    androidxCoreVersion = '1.7.0'
    androidxEspressoVersion = '3.4.0'
    baristaVersion = '4.2.0'
    googleCloudStorageVersion = '2.8.0'
    tempoVersion = '1.2.0-alpha01'
    androidxWorkVersion = '2.7.1'
    androidxRoomVersion = '2.4.2'

    kotlinVersion = '1.6.21'
    objenesisVersion = '3.2'
    awaitilityVersion = '4.2.0'
    jetBrainsAnnotationsVersion = '13.0'

    unitVersion = '4.13.2'
    jwtResourceServerVersion = '2.0.2'
    androidxTestRunnerVersion = '1.4.0'
    androidxOrchestratorVersion = '1.4.1'
    androidxTestRulesVersion = '1.4.0'
    androidxTestUiAutomatorVersion = '2.2.0'
    androidxTestExtJunitVersion = '1.1.3'
    androidxEspressoVersion = '3.4.0'
    googleTruthVersion = '1.1.3'
    androidxTestVersion = '1.2.0'
    androidxTestExtVersion = '1.1.1'
    robolectricVersion = '4.8'
    baristaVersion = '4.2.0'
    mockitoVersion = '4.5.1'
    byteBuddyVersion = '1.12.10'
    jsoupVersion = '1.14.3'
    jacksonVersion = '2.13.3'
    gsonVersion = '2.9.0'
    apacheHttpClientVersion = '4.5.13'
    googleHttpClientVersion = '1.41.8'
}

ext.commonDependencies = {

    components.all(AbtAlignmentRule)
    components.all(KotlinAlignmentRule)

    components.all(AndroidWorkAlignmentRule)

    testImplementation "junit:junit:${unitVersion}"
    testImplementation "androidx.test:runner:${androidxTestRunnerVersion}"
    testImplementation "androidx.test:core:${androidxTestRunnerVersion}"
    testImplementation "androidx.test.ext:junit:${androidxTestExtJunitVersion}"

    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    androidTestImplementation "org.mockito:mockito-android:${mockitoVersion}"
    testImplementation "net.bytebuddy:byte-buddy-android:${byteBuddyVersion}"

    compileOnly "org.jetbrains:annotations:${jetBrainsAnnotationsVersion}"
    testCompileOnly "org.jetbrains:annotations:${jetBrainsAnnotationsVersion}"
    testImplementation "com.google.truth:truth:${googleTruthVersion}"

    androidTestImplementation "junit:junit:${unitVersion}"
    androidTestImplementation "com.google.truth:truth:${googleTruthVersion}"

    modules {
        module("org.checkerframework:checker-qual") {
            replacedBy("org.checkerframework:checker")
        }
    }

    constraints {
        testImplementation("junit:junit:${unitVersion}") {
            because 'previous versions have a bug impacting this application'
        }
        androidTestImplementation("junit:junit:${unitVersion}") {
            because 'previous versions have a bug impacting this application'
        }
        implementation("junit:junit:${unitVersion}") {
            because 'previous versions have a bug impacting this application'
        }
        api("junit:junit:${unitVersion}") {
            because 'previous versions have a bug impacting this application'
        }

        // kotlin
        testImplementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        androidTestImplementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        api("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        androidTestImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        api("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        testImplementation("org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        androidTestImplementation("org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        api("org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}") {
            because 'want the same implementation for all'
        }
        implementation("org.jsoup:jsoup:${jsoupVersion}") {
            because 'previous versions have a bug impacting this application'
        }
    }


}

if (!project.gradle.startParameter.taskNames.contains("renovate")) configure(buildProjects()) {

    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'jacoco'

    spotless {
        java {
            target 'src/*/java/**/*.java'
            importOrderFile "$rootDir/build/eclipsecodestyle/abt.importorder"
            removeUnusedImports()
            eclipse('4.11.0').configFile "$rootDir/build/eclipsecodestyle/abt_codestyle.xml"
            endWithNewline()
        }
    }

    gradle.projectsEvaluated {
        // do not scan testing tools and so on, see https://medium.com/@appmattus/android-security-scanning-your-app-for-known-vulnerabilities-421384603fc5
        // note: must be set after project is evaluated, as Android creates configurations based on the build types
        dependencyCheck {
            scanConfigurations = configurations.findAll {
                (!it.name.startsWithAny('androidTest', 'test', 'debug', 'lint', 'kapt') && !it.name.contains("AndroidTest") && !it.name.contains("Test") && !it.name.contains("AnnotationProcessor"))
            }.collect {
                it.name
            }
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }

        // https://stackoverflow.com/questions/36945594/how-do-i-get-sonarqube-to-depend-on-jacocotestreport
        tasks.jacocoTestReport.dependsOn test
    }

} else {
    apply plugin: 'java-library'
    dependencies commonDependencies
}

configure(javaLibraryProjects()) {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    repositories repos

    ext {
        junitJupiterVersion = '5.8.2'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    afterEvaluate {
        publishing {
            publications {
                // Creates a Maven publication called "release".
                release(MavenPublication) {
                    // Applies the component for the release build variant.
                    from components.java

                    groupId 'no.entur.abt.client.sdk'
                    artifactId "$project.ext.artifactId"
                    version = "$version"
                }
            }
            repositories {
                maven {
                    credentials {
                        username "$entur_artifactory_user"
                        password "$entur_artifactory_password"
                    }
                    url(version.endsWith('SNAPSHOT') ? "$entur_artifactory_partner_publish_snapshot_url" : "$entur_artifactory_partner_publish_release_url")
                }
            }
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }

        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }


}

// build config
if (!project.gradle.startParameter.taskNames.contains("renovate")) configure(androidLibraryProjects()) {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 31
        testOptions.unitTests.includeAndroidResources = true

        defaultConfig {
            // set minSdkVersion per subproject
            targetSdkVersion 31
            // versions are copied here from the properties to improve build time. See the version.gradle script.
            versionCode 4
            versionName "1.0.3"
            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                crunchPngs false
            }

            debug {
                debuggable true
            }
        }

        compileOptions {
            // Sets Java compatibility to Java 8
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            // disable lint in projects
            // add lint in app, including dependencies
            tasks.lint.enabled = false
        }

        testOptions {
            unitTests {
                all {
                    maxHeapSize = "4g"
                }
                returnDefaultValues = true
            }
        }

        // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
        libraryVariants.all {
            generateBuildConfigProvider?.get()?.enabled = false
        }
        buildFeatures {
            buildConfig = false
        }

        packagingOptions {
            exclude 'META-INF/INDEX.LIST'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.md'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/LICENSE-notice.md'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
        }
    }

    dependencies commonDependencies
}

// quality control + release
if (!project.gradle.startParameter.taskNames.contains("renovate")) configure(androidLibraryProjects()) {
    apply plugin: 'com.hiya.jacoco-android'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'

    if (!project.gradle.startParameter.taskNames.contains("renovate")) {
        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            android.libraryVariants.all { variant ->
                if (variant.name == 'release') {
                    owner.classpath += variant.javaCompileProvider.get().classpath
                }
            }
            exclude '**/R.html', '**/R.*.html', '**/index.html'
        }

        /*
        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            archiveClassifier.set('javadoc')
            from androidJavadocs.destinationDir
        }
*/
        task androidSourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from android.sourceSets.main.java.srcDirs
        }

        afterEvaluate {
            publishing {
                publications {
                    // Creates a Maven publication called "release".
                    release(MavenPublication) {
                        // Applies the component for the release build variant.
                        from components.release

                        // Adds javadocs and sources as separate jars.
                        //artifact androidJavadocsJar
                        artifact androidSourcesJar

                        // You can customize attributes of the publication here or in module's build.gradle file (if you save this as script and include it build.gradle file, then you can just replicate this whole block there only with changed fields).
                        //artifactId = 'custom-artifact'
                        groupId 'no.entur.abt.client.sdk'
                        artifactId "$project.ext.artifactId"
                        version = android.defaultConfig.versionName
                    }
                }
                repositories {
                    maven {
                        credentials {
                            username "$entur_artifactory_user"
                            password "$entur_artifactory_password"
                        }
                        url(version.endsWith('SNAPSHOT') ? "$entur_artifactory_partner_publish_snapshot_url" : "$entur_artifactory_partner_publish_release_url")
                    }
                }
            }
        }
    }

    sonarqube {
        androidVariant "release"
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", gradle.ext.xmlReportPaths
        }
    }

}

//https://github.com/diffplug/spotless/issues/217
configurations {
    spotlessConfig
}

dependencies {
    spotlessConfig 'no.entur:abt-codestyle:0.18'
}

task unpackSpotlessConfig(type: Copy) {
    dependsOn configurations.spotlessConfig
    from {
        configurations.spotlessConfig.collect { zipTree(it) }
    }
    into "$buildDir"
    outputs.dir(file("$rootDir/build/eclipsecodestyle"))
}

rootProject.tasks.withType(com.diffplug.gradle.spotless.RegisterDependenciesTask) {
    // RegisterDependenciesTask is a task of the root project only
    it.dependsOn(unpackSpotlessConfig)
}
/*
task clean(type: Delete) {
    delete rootProject.buildDir
}
*/
// utility functions for build variants
def arrayAsString(String... args) {
    StringBuilder builder = new StringBuilder();
    builder.append("{");
    if (args.length > 0) {
        for (String arg : args) {
            builder.append('"')
            builder.append(arg);
            builder.append('"')
            builder.append(", ")
        }
        builder.setLength(builder.length() - 2)
    }
    builder.append("}");
    return builder.toString();
}

// utility functions for build variants
def getPropertyFromCommandLineOrGradlePropertiesOrEnvironment(String key) {
    String property = System.getProperty(key);
    if (property == null) {
        property = project.getProperties().get(key);
    }
    if (property == null) {
        property = System.getenv(key);
    }
    return property;
}

// this approach seems will select the most recent version of a dependency
// either directly declared as a dependency or indirectly pulled in
// as a transient dependency. The selected version is then
// applied in all modules.
//
// note: this approach really assumes the same version of all dependencies
// so this is somewhat of a misuse. 

abstract class AbtAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("no.entur.abt")) {
                belongsTo("no.entur.abt:abt-virtual-platform:${id.version}")
            }
        }
    }
}

abstract class KotlinAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("org.jetbrains.kotlin")) {
                belongsTo("org.jetbrains.kotlin:kotlin-virtual-platform:${id.version}")
            }
        }
    }
}

// https://developer.android.com/jetpack/androidx/releases/work#declaring_dependencies
abstract class AndroidWorkAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("androidx.work")) {
                // declare that Jackson modules all belong to the Jackson virtual platform
                belongsTo("androidx.work:android-work-virtual-platform:${id.version}")
            }
        }
    }
}

