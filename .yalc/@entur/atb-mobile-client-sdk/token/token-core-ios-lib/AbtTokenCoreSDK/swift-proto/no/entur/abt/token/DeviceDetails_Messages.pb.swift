// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: no/entur/abt/token/DeviceDetails_Messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// /home/circleci/project/protobuf-reduced-traveller/target/proto_deps/no/entur/abt/token/DeviceDetails_Messages.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Status codes for different properties of a device
enum No_Entur_Abt_Core_V1_DeviceStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Default; (no) value
  case unspecified // = 0

  /// Bluetooth is active on device
  case bluetoothEnabled // = 1

  /// User has rejected to active Bluetooth on device
  case bluetoothDisabled // = 2

  /// User has rejected permission for Bluetooth on device
  case bluetoothNoPermission // = 3

  /// Device does not support Bluetooth
  case bluetoothUnsupportedOnDevice // = 4

  /// Network is turned on for device
  case networkConnected // = 5

  /// Network is turned off for device
  case networkDisconnected // = 6

  /// User has rejected permission for Network for application
  case networkNoPermission // = 7

  /// NFC is turned on for device
  case nfcEnabled // = 8

  /// NFC is turned off for device
  case nfcDisabled // = 9

  /// User has rejected permission for Network for application
  case nfcNoPermission // = 10

  /// Device does not support NFC
  case nfcUnsupportedOnDevice // = 11

  /// Current attestation status is OK
  case attestationOk // = 12

  /// Previous request from device failed due to attestation
  case attestationFailed // = 13

  /// No attestation status recorded on device
  case attestationNoData // = 14
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .bluetoothEnabled
    case 2: self = .bluetoothDisabled
    case 3: self = .bluetoothNoPermission
    case 4: self = .bluetoothUnsupportedOnDevice
    case 5: self = .networkConnected
    case 6: self = .networkDisconnected
    case 7: self = .networkNoPermission
    case 8: self = .nfcEnabled
    case 9: self = .nfcDisabled
    case 10: self = .nfcNoPermission
    case 11: self = .nfcUnsupportedOnDevice
    case 12: self = .attestationOk
    case 13: self = .attestationFailed
    case 14: self = .attestationNoData
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .bluetoothEnabled: return 1
    case .bluetoothDisabled: return 2
    case .bluetoothNoPermission: return 3
    case .bluetoothUnsupportedOnDevice: return 4
    case .networkConnected: return 5
    case .networkDisconnected: return 6
    case .networkNoPermission: return 7
    case .nfcEnabled: return 8
    case .nfcDisabled: return 9
    case .nfcNoPermission: return 10
    case .nfcUnsupportedOnDevice: return 11
    case .attestationOk: return 12
    case .attestationFailed: return 13
    case .attestationNoData: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension No_Entur_Abt_Core_V1_DeviceStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [No_Entur_Abt_Core_V1_DeviceStatus] = [
    .unspecified,
    .bluetoothEnabled,
    .bluetoothDisabled,
    .bluetoothNoPermission,
    .bluetoothUnsupportedOnDevice,
    .networkConnected,
    .networkDisconnected,
    .networkNoPermission,
    .nfcEnabled,
    .nfcDisabled,
    .nfcNoPermission,
    .nfcUnsupportedOnDevice,
    .attestationOk,
    .attestationFailed,
    .attestationNoData,
  ]
}

#endif  // swift(>=4.2)

/// Details about a device used for Mobile token. To be included in encoded tokens attested in device attestation.
struct No_Entur_Abt_Core_V1_DeviceDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Flags indicating device status at the time the DeviceDetails was produced
  var deviceStatuses: [No_Entur_Abt_Core_V1_DeviceStatus] = []

  /// Metadata for the device and application that produced the DeviceDetails
  var deviceInfo: [Uk_Org_Netex_Www_Netex_DeviceInfoElement] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension No_Entur_Abt_Core_V1_DeviceStatus: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_DeviceDetails: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "no.entur.abt.core.v1"

extension No_Entur_Abt_Core_V1_DeviceStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_STATUS_UNSPECIFIED"),
    1: .same(proto: "DEVICE_STATUS_BLUETOOTH_ENABLED"),
    2: .same(proto: "DEVICE_STATUS_BLUETOOTH_DISABLED"),
    3: .same(proto: "DEVICE_STATUS_BLUETOOTH_NO_PERMISSION"),
    4: .same(proto: "DEVICE_STATUS_BLUETOOTH_UNSUPPORTED_ON_DEVICE"),
    5: .same(proto: "DEVICE_STATUS_NETWORK_CONNECTED"),
    6: .same(proto: "DEVICE_STATUS_NETWORK_DISCONNECTED"),
    7: .same(proto: "DEVICE_STATUS_NETWORK_NO_PERMISSION"),
    8: .same(proto: "DEVICE_STATUS_NFC_ENABLED"),
    9: .same(proto: "DEVICE_STATUS_NFC_DISABLED"),
    10: .same(proto: "DEVICE_STATUS_NFC_NO_PERMISSION"),
    11: .same(proto: "DEVICE_STATUS_NFC_UNSUPPORTED_ON_DEVICE"),
    12: .same(proto: "DEVICE_STATUS_ATTESTATION_OK"),
    13: .same(proto: "DEVICE_STATUS_ATTESTATION_FAILED"),
    14: .same(proto: "DEVICE_STATUS_ATTESTATION_NO_DATA"),
  ]
}

extension No_Entur_Abt_Core_V1_DeviceDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_statuses"),
    2: .standard(proto: "device_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.deviceStatuses) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.deviceInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceStatuses.isEmpty {
      try visitor.visitPackedEnumField(value: self.deviceStatuses, fieldNumber: 1)
    }
    if !self.deviceInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deviceInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_DeviceDetails, rhs: No_Entur_Abt_Core_V1_DeviceDetails) -> Bool {
    if lhs.deviceStatuses != rhs.deviceStatuses {return false}
    if lhs.deviceInfo != rhs.deviceInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
