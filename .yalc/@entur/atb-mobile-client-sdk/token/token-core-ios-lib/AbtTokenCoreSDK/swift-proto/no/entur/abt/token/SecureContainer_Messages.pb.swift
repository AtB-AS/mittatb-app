// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: no/entur/abt/token/SecureContainer_Messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// /home/circleci/project/protobuf-reduced-traveller/target/proto_deps/no/entur/abt/token/SecureContainer_Messages.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Supported signature types.
enum No_Entur_Abt_Core_V1_SignatureType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0

  /// Regular SHA256 with ECDSA signature used for EC key pairs. Used for all signatures except for iOS mobile tokens with IOS_APP_ATTEST attestation.
  case sha256WithEcdsa // = 1

  /// Signature obtained using IOS AppAttest key assertion (https://developer.apple.com/documentation/devicecheck/dcappattestservice/3573912-generateassertion). Only allowed for iOS Mobile tokens attested with IOS_APP_ATTEST attestation.
  case iosAppAttestAssertion // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .sha256WithEcdsa
    case 2: self = .iosAppAttestAssertion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .sha256WithEcdsa: return 1
    case .iosAppAttestAssertion: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension No_Entur_Abt_Core_V1_SignatureType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [No_Entur_Abt_Core_V1_SignatureType] = [
    .unspecified,
    .sha256WithEcdsa,
    .iosAppAttestAssertion,
  ]
}

#endif  // swift(>=4.2)

/// NO VALIDATION ANNOTATIONS ON SECURE CONTAINER + SIGNATURE! - Must allow passing of invalid SecureContainers to server.
/// Message wrapping one or more payloads signed with a common signature.
struct No_Entur_Abt_Core_V1_SecureContainer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The actual payloads as a serialized SignedPayloads object.  Mandatory.
  var signedPayloads: Data = Data()

  /// PKI signature for signed payloads. Mandatory.
  var signature: No_Entur_Abt_Core_V1_Signature {
    get {return _signature ?? No_Entur_Abt_Core_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _signature: No_Entur_Abt_Core_V1_Signature? = nil
}

/// PKI signature. See other documentation for algorithm
struct No_Entur_Abt_Core_V1_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature for signed_payloads. Mandatory.
  var signature: Data = Data()

  /// // Certificate of the public key for key pair used for the signature. Mandatory except for MobileIDTokenPayload.
  var certificate: Data = Data()

  /// Issuer of key / id for repository with public key. Mandatory.
  var issuer: String = String()

  /// DEPRECATED: Specify type instead. The algorithm used to sign the payload.
  var algorithm: String = String()

  /// Time payload was signed. Mandatory.
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  /// Type of signature. Mandatory.
  var type: No_Entur_Abt_Core_V1_SignatureType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Wrapper around a list of SignedPayload to allow usage in oneof
struct No_Entur_Abt_Core_V1_SignedPayloads {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of SignedPayloads
  var signedPayloads: [No_Entur_Abt_Core_V1_SignedPayload] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A wrapper around the different types of payload that can be signed in a SecureContainer.
struct No_Entur_Abt_Core_V1_SignedPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payloadType: No_Entur_Abt_Core_V1_SignedPayload.OneOf_PayloadType? = nil

  /// Payload for Mobile tokens
  var mobileIDTokenPayload: No_Entur_Abt_Core_V1_MobileIDTokenPayload {
    get {
      if case .mobileIDTokenPayload(let v)? = payloadType {return v}
      return No_Entur_Abt_Core_V1_MobileIDTokenPayload()
    }
    set {payloadType = .mobileIDTokenPayload(newValue)}
  }

  /// Payload for static barcode tokens (ie on paper)
  var staticBarcodeIDTokenPayload: No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload {
    get {
      if case .staticBarcodeIDTokenPayload(let v)? = payloadType {return v}
      return No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload()
    }
    set {payloadType = .staticBarcodeIDTokenPayload(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_PayloadType: Equatable {
    /// Payload for Mobile tokens
    case mobileIDTokenPayload(No_Entur_Abt_Core_V1_MobileIDTokenPayload)
    /// Payload for static barcode tokens (ie on paper)
    case staticBarcodeIDTokenPayload(No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload)

  #if !swift(>=4.1)
    static func ==(lhs: No_Entur_Abt_Core_V1_SignedPayload.OneOf_PayloadType, rhs: No_Entur_Abt_Core_V1_SignedPayload.OneOf_PayloadType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.mobileIDTokenPayload, .mobileIDTokenPayload): return {
        guard case .mobileIDTokenPayload(let l) = lhs, case .mobileIDTokenPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.staticBarcodeIDTokenPayload, .staticBarcodeIDTokenPayload): return {
        guard case .staticBarcodeIDTokenPayload(let l) = lhs, case .staticBarcodeIDTokenPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Payload - data to be signed
struct No_Entur_Abt_Core_V1_MobileIDTokenPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Token id in clear text
  var tokenID: String = String()

  /// Device time if available
  var deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deviceTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deviceTimestamp = newValue}
  }
  /// Returns true if `deviceTimestamp` has been explicitly set.
  var hasDeviceTimestamp: Bool {return self._deviceTimestamp != nil}
  /// Clears the value of `deviceTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearDeviceTimestamp() {self._deviceTimestamp = nil}

  /// Used when type=MOBILE to include details about device that produced the token payload.
  var deviceDetails: No_Entur_Abt_Core_V1_DeviceDetails {
    get {return _deviceDetails ?? No_Entur_Abt_Core_V1_DeviceDetails()}
    set {_deviceDetails = newValue}
  }
  /// Returns true if `deviceDetails` has been explicitly set.
  var hasDeviceDetails: Bool {return self._deviceDetails != nil}
  /// Clears the value of `deviceDetails`. Subsequent reads from it will return its default value.
  mutating func clearDeviceDetails() {self._deviceDetails = nil}

  /// For what purpose this token has been obtained
  var actions: [Uk_Org_Netex_Www_Netex_TokenAction] = []

  /// All nonces received (if receiving challenges from multiple sources at the same time)
  var receivedNonces: [Data] = []

  /// Any additional payload - unspecified
  var additionalPayload: Dictionary<String,Data> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _deviceDetails: No_Entur_Abt_Core_V1_DeviceDetails? = nil
}

/// Payload - data to be signed
struct No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Token id in clear text
  var tokenID: String = String()

  /// Any additional payload - unspecified
  var additionalPayload: Dictionary<String,Data> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension No_Entur_Abt_Core_V1_SignatureType: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_SecureContainer: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_Signature: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_SignedPayloads: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_SignedPayload: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_SignedPayload.OneOf_PayloadType: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_MobileIDTokenPayload: @unchecked Sendable {}
extension No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "no.entur.abt.core.v1"

extension No_Entur_Abt_Core_V1_SignatureType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIGNATURE_TYPE_UNSPECIFIED"),
    1: .same(proto: "SIGNATURE_TYPE_SHA256_WITH_ECDSA"),
    2: .same(proto: "SIGNATURE_TYPE_IOS_APP_ATTEST_ASSERTION"),
  ]
}

extension No_Entur_Abt_Core_V1_SecureContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SecureContainer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_payloads"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signedPayloads) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.signedPayloads.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedPayloads, fieldNumber: 1)
    }
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_SecureContainer, rhs: No_Entur_Abt_Core_V1_SecureContainer) -> Bool {
    if lhs.signedPayloads != rhs.signedPayloads {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Core_V1_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Signature"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "certificate"),
    3: .same(proto: "issuer"),
    4: .same(proto: "algorithm"),
    5: .same(proto: "timestamp"),
    6: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.certificate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.algorithm) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.certificate, fieldNumber: 2)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 3)
    }
    if !self.algorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 4)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_Signature, rhs: No_Entur_Abt_Core_V1_Signature) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.algorithm != rhs.algorithm {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Core_V1_SignedPayloads: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedPayloads"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_payloads"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.signedPayloads) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signedPayloads.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signedPayloads, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_SignedPayloads, rhs: No_Entur_Abt_Core_V1_SignedPayloads) -> Bool {
    if lhs.signedPayloads != rhs.signedPayloads {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Core_V1_SignedPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mobile_id_token_payload"),
    2: .standard(proto: "static_barcode_id_token_payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: No_Entur_Abt_Core_V1_MobileIDTokenPayload?
        var hadOneofValue = false
        if let current = self.payloadType {
          hadOneofValue = true
          if case .mobileIDTokenPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payloadType = .mobileIDTokenPayload(v)
        }
      }()
      case 2: try {
        var v: No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload?
        var hadOneofValue = false
        if let current = self.payloadType {
          hadOneofValue = true
          if case .staticBarcodeIDTokenPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payloadType = .staticBarcodeIDTokenPayload(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payloadType {
    case .mobileIDTokenPayload?: try {
      guard case .mobileIDTokenPayload(let v)? = self.payloadType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .staticBarcodeIDTokenPayload?: try {
      guard case .staticBarcodeIDTokenPayload(let v)? = self.payloadType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_SignedPayload, rhs: No_Entur_Abt_Core_V1_SignedPayload) -> Bool {
    if lhs.payloadType != rhs.payloadType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Core_V1_MobileIDTokenPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MobileIDTokenPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_id"),
    2: .standard(proto: "device_timestamp"),
    3: .standard(proto: "device_details"),
    4: .same(proto: "actions"),
    5: .standard(proto: "received_nonces"),
    6: .standard(proto: "additional_payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deviceTimestamp) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._deviceDetails) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.actions) }()
      case 5: try { try decoder.decodeRepeatedBytesField(value: &self.receivedNonces) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.additionalPayload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 1)
    }
    try { if let v = self._deviceTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._deviceDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.actions.isEmpty {
      try visitor.visitPackedEnumField(value: self.actions, fieldNumber: 4)
    }
    if !self.receivedNonces.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.receivedNonces, fieldNumber: 5)
    }
    if !self.additionalPayload.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.additionalPayload, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_MobileIDTokenPayload, rhs: No_Entur_Abt_Core_V1_MobileIDTokenPayload) -> Bool {
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs._deviceTimestamp != rhs._deviceTimestamp {return false}
    if lhs._deviceDetails != rhs._deviceDetails {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.receivedNonces != rhs.receivedNonces {return false}
    if lhs.additionalPayload != rhs.additionalPayload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StaticBarcodeIDTokenPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_id"),
    6: .standard(proto: "additional_payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.additionalPayload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 1)
    }
    if !self.additionalPayload.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.additionalPayload, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload, rhs: No_Entur_Abt_Core_V1_StaticBarcodeIDTokenPayload) -> Bool {
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.additionalPayload != rhs.additionalPayload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
