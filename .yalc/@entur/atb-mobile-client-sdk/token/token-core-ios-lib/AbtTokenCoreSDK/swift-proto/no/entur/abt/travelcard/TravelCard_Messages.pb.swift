// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: no/entur/abt/travelcard/TravelCard_Messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// /home/circleci/project/protobuf-reduced-traveller/target/proto_deps/no/entur/abt/travelcard/TravelCard_Messages.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Status for a (potentially) multi message exchange between ABT server and travelcard
enum No_Entur_Abt_Travelcard_V1_TravelCardOperationStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0

  /// Exchange is still ongoing. Status indicates that ABT server expects a response the current message
  case active // = 1

  /// Exchange was completed with success. No further response is required
  case success // = 2

  /// Exchange was completed with failure. No further response is required
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .active
    case 2: self = .success
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .active: return 1
    case .success: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension No_Entur_Abt_Travelcard_V1_TravelCardOperationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [No_Entur_Abt_Travelcard_V1_TravelCardOperationStatus] = [
    .unspecified,
    .active,
    .success,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// An apdu (smart card application protocol data) command from ABT core. Clients should propagate to travelcard.
struct No_Entur_Abt_Travelcard_V1_ApduCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identification of command in command set. Must be used in ApduResult to correlate if response is required
  var commandID: Int64 = 0

  /// The actual apdu frame to send to travelcard
  var frame: Data = Data()

  /// This attribute is used for clients supporting additonal frames (AF). This indicates that the client should continue returned frames with statuscode AF locally. See the documentation for details.
  var handleAf: Bool = false

  /// Whether or not the result from the travelcard should be returned to the server as an ApduResult
  var expectedResult: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Result for an individual ApduCommand
struct No_Entur_Abt_Travelcard_V1_ApduResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identification of command. Must match the command_id in the ApduCommand this is the result for
  var commandID: Int64 = 0

  /// Status code for response. 200 = OK. TODO expected by NOD, but always set to 200 in current impl. Do we need to expose this?
  var resultStatus: Int64 = 0

  /// Actual apdu result frame from travelcard.
  var resultFrame: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Set of commands from ABT core to travel card.
struct No_Entur_Abt_Travelcard_V1_ApduCommandSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identification of the order group currently being executed. Must be set in ApduResultSet to correlate response
  var orderGroupID: String = String()

  /// Identification of the session currently being executed. Must be set in ApduResultSet to correlate response
  var sessionID: String = String()

  /// Identification of this command set. Must be set in ApduResultSet to correlate response
  var commandSetID: String = String()

  /// The actual apdu command to propagate to travelcard
  var commands: [No_Entur_Abt_Travelcard_V1_ApduCommand] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Results for an ApduCommandSet message.
struct No_Entur_Abt_Travelcard_V1_ApduResultSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identification of the order group currently being executed. Must be match the same value in the ApduCommandSet this is a response for.
  var orderGroupID: String = String()

  /// Identification of the session currently being executed. Must be match the same value in the ApduCommandSet this is a response for.
  var sessionID: String = String()

  /// Identification of the command set currently being executed. Must be match the same value in the ApduCommandSet this is a response for.
  var commandSetID: String = String()

  /// The actual apdu results retrieved from the travelcard
  var results: [No_Entur_Abt_Travelcard_V1_ApduResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension No_Entur_Abt_Travelcard_V1_TravelCardOperationStatus: @unchecked Sendable {}
extension No_Entur_Abt_Travelcard_V1_ApduCommand: @unchecked Sendable {}
extension No_Entur_Abt_Travelcard_V1_ApduResult: @unchecked Sendable {}
extension No_Entur_Abt_Travelcard_V1_ApduCommandSet: @unchecked Sendable {}
extension No_Entur_Abt_Travelcard_V1_ApduResultSet: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "no.entur.abt.travelcard.v1"

extension No_Entur_Abt_Travelcard_V1_TravelCardOperationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRAVEL_CARD_OPERATION_STATUS_UNSPECIFIED"),
    1: .same(proto: "TRAVEL_CARD_OPERATION_STATUS_ACTIVE"),
    2: .same(proto: "TRAVEL_CARD_OPERATION_STATUS_SUCCESS"),
    3: .same(proto: "TRAVEL_CARD_OPERATION_STATUS_FAILED"),
  ]
}

extension No_Entur_Abt_Travelcard_V1_ApduCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApduCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    2: .same(proto: "frame"),
    3: .standard(proto: "handle_af"),
    4: .standard(proto: "expected_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularSInt64Field(value: &self.commandID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.frame) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.handleAf) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.expectedResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commandID != 0 {
      try visitor.visitSingularSInt64Field(value: self.commandID, fieldNumber: 1)
    }
    if !self.frame.isEmpty {
      try visitor.visitSingularBytesField(value: self.frame, fieldNumber: 2)
    }
    if self.handleAf != false {
      try visitor.visitSingularBoolField(value: self.handleAf, fieldNumber: 3)
    }
    if self.expectedResult != false {
      try visitor.visitSingularBoolField(value: self.expectedResult, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Travelcard_V1_ApduCommand, rhs: No_Entur_Abt_Travelcard_V1_ApduCommand) -> Bool {
    if lhs.commandID != rhs.commandID {return false}
    if lhs.frame != rhs.frame {return false}
    if lhs.handleAf != rhs.handleAf {return false}
    if lhs.expectedResult != rhs.expectedResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Travelcard_V1_ApduResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApduResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    2: .standard(proto: "result_status"),
    3: .standard(proto: "result_frame"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularSInt64Field(value: &self.commandID) }()
      case 2: try { try decoder.decodeSingularSInt64Field(value: &self.resultStatus) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.resultFrame) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commandID != 0 {
      try visitor.visitSingularSInt64Field(value: self.commandID, fieldNumber: 1)
    }
    if self.resultStatus != 0 {
      try visitor.visitSingularSInt64Field(value: self.resultStatus, fieldNumber: 2)
    }
    if !self.resultFrame.isEmpty {
      try visitor.visitSingularBytesField(value: self.resultFrame, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Travelcard_V1_ApduResult, rhs: No_Entur_Abt_Travelcard_V1_ApduResult) -> Bool {
    if lhs.commandID != rhs.commandID {return false}
    if lhs.resultStatus != rhs.resultStatus {return false}
    if lhs.resultFrame != rhs.resultFrame {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Travelcard_V1_ApduCommandSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApduCommandSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_group_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "command_set_id"),
    4: .same(proto: "commands"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderGroupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commandSetID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.commands) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderGroupID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderGroupID, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if !self.commandSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.commandSetID, fieldNumber: 3)
    }
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Travelcard_V1_ApduCommandSet, rhs: No_Entur_Abt_Travelcard_V1_ApduCommandSet) -> Bool {
    if lhs.orderGroupID != rhs.orderGroupID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.commandSetID != rhs.commandSetID {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Travelcard_V1_ApduResultSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApduResultSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_group_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "command_set_id"),
    4: .same(proto: "results"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderGroupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commandSetID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderGroupID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderGroupID, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if !self.commandSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.commandSetID, fieldNumber: 3)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Travelcard_V1_ApduResultSet, rhs: No_Entur_Abt_Travelcard_V1_ApduResultSet) -> Bool {
    if lhs.orderGroupID != rhs.orderGroupID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.commandSetID != rhs.commandSetID {return false}
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
