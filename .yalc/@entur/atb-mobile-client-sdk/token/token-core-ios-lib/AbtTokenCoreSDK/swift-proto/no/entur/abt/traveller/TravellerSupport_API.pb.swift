// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: no/entur/abt/traveller/TravellerSupport_API.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// /home/circleci/project/protobuf-reduced-traveller/target/proto_deps/no/entur/abt/traveller/TravellerSupport_API.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Command to activate a new, already initialized Mobile token. Token must have been previously initialized by InitializeNewMobileTokenCommand.
struct No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique command id for this call
  /// Unique command id. Used for idempotency
  var commandID: No_Entur_Abt_Common_V1_CommandId {
    get {return _commandID ?? No_Entur_Abt_Common_V1_CommandId()}
    set {_commandID = newValue}
  }
  /// Returns true if `commandID` has been explicitly set.
  var hasCommandID: Bool {return self._commandID != nil}
  /// Clears the value of `commandID`. Subsequent reads from it will return its default value.
  mutating func clearCommandID() {self._commandID = nil}

  /// Activation data
  var data: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand.OneOf_Data? = nil

  /// For older clients
  var activationData: No_Entur_Abt_Traveller_V1_MobileTokenActivationData {
    get {
      if case .activationData(let v)? = data {return v}
      return No_Entur_Abt_Traveller_V1_MobileTokenActivationData()
    }
    set {data = .activationData(newValue)}
  }

  /// For updated clients
  var activationDetails: No_Entur_Abt_Traveller_V1_MobileTokenActivationDetails {
    get {
      if case .activationDetails(let v)? = data {return v}
      return No_Entur_Abt_Traveller_V1_MobileTokenActivationDetails()
    }
    set {data = .activationDetails(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Activation data
  enum OneOf_Data: Equatable {
    /// For older clients
    case activationData(No_Entur_Abt_Traveller_V1_MobileTokenActivationData)
    /// For updated clients
    case activationDetails(No_Entur_Abt_Traveller_V1_MobileTokenActivationDetails)

  #if !swift(>=4.1)
    static func ==(lhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand.OneOf_Data, rhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.activationData, .activationData): return {
        guard case .activationData(let l) = lhs, case .activationData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.activationDetails, .activationDetails): return {
        guard case .activationDetails(let l) = lhs, case .activationDetails(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _commandID: No_Entur_Abt_Common_V1_CommandId? = nil
}

/// Response for ActivateNewMobileTokenCommand
struct No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Details about the new token
  var tokenDetails: No_Entur_Abt_Traveller_V1_MobileTokenDetails {
    get {return _tokenDetails ?? No_Entur_Abt_Traveller_V1_MobileTokenDetails()}
    set {_tokenDetails = newValue}
  }
  /// Returns true if `tokenDetails` has been explicitly set.
  var hasTokenDetails: Bool {return self._tokenDetails != nil}
  /// Clears the value of `tokenDetails`. Subsequent reads from it will return its default value.
  mutating func clearTokenDetails() {self._tokenDetails = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenDetails: No_Entur_Abt_Traveller_V1_MobileTokenDetails? = nil
}

/// Command to accept the transfer of a Mobile token from another CustomerAccount.  Requires a transfer_id obtained from InitiateTransferAllFareContractsCommand (for the other traveller) or CustomerPurchasePackageTransferService.InitiateTransferAllFareContractsCommand.
struct No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique command id. Used for idempotency
  var commandID: No_Entur_Abt_Common_V1_CommandId {
    get {return _commandID ?? No_Entur_Abt_Common_V1_CommandId()}
    set {_commandID = newValue}
  }
  /// Returns true if `commandID` has been explicitly set.
  var hasCommandID: Bool {return self._commandID != nil}
  /// Clears the value of `commandID`. Subsequent reads from it will return its default value.
  mutating func clearCommandID() {self._commandID = nil}

  var transferID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commandID: No_Entur_Abt_Common_V1_CommandId? = nil
}

/// Response for AcceptMobileTokenTransferCommand
struct No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The initialization data required by the mobile device to activate the token
  var initializationData: No_Entur_Abt_Common_V1_MobileTokenInitializationData {
    get {return _initializationData ?? No_Entur_Abt_Common_V1_MobileTokenInitializationData()}
    set {_initializationData = newValue}
  }
  /// Returns true if `initializationData` has been explicitly set.
  var hasInitializationData: Bool {return self._initializationData != nil}
  /// Clears the value of `initializationData`. Subsequent reads from it will return its default value.
  mutating func clearInitializationData() {self._initializationData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _initializationData: No_Entur_Abt_Common_V1_MobileTokenInitializationData? = nil
}

/// Command to get a single reference data entity by ID and optionally version.
struct No_Entur_Abt_Traveller_V1_GetReferenceDataCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique command id. Used for idempotency
  var commandID: No_Entur_Abt_Common_V1_CommandId {
    get {return _commandID ?? No_Entur_Abt_Common_V1_CommandId()}
    set {_commandID = newValue}
  }
  /// Returns true if `commandID` has been explicitly set.
  var hasCommandID: Bool {return self._commandID != nil}
  /// Clears the value of `commandID`. Subsequent reads from it will return its default value.
  mutating func clearCommandID() {self._commandID = nil}

  var id: String = String()

  /// Optional version for the reference data entity to fetch. If not provided the current version will be returned
  var version: String = String()

  /// Optional, will return the result if it is updated after the timestamp
  var ifModifiedSince: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _ifModifiedSince ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_ifModifiedSince = newValue}
  }
  /// Returns true if `ifModifiedSince` has been explicitly set.
  var hasIfModifiedSince: Bool {return self._ifModifiedSince != nil}
  /// Clears the value of `ifModifiedSince`. Subsequent reads from it will return its default value.
  mutating func clearIfModifiedSince() {self._ifModifiedSince = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commandID: No_Entur_Abt_Common_V1_CommandId? = nil
  fileprivate var _ifModifiedSince: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response for GetReferenceDataCommand
struct No_Entur_Abt_Traveller_V1_GetReferenceDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Always the same as in the request
  var id: String = String()

  /// Always the same as in the request
  var version: String = String()

  /// Data type is stated as part of the id field, ie NSB:UserProfile:1 means that the content must be deserialized using the UserProfile protobuf class
  var protobufBytes: Data = Data()

  /// Whether this is currently active, ie resolvable without version
  var currentVersion: Bool = false

  /// Time to live for cache entry. Must be refreshed from source after this timestamp
  var expiryTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiryTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiryTimestamp = newValue}
  }
  /// Returns true if `expiryTimestamp` has been explicitly set.
  var hasExpiryTimestamp: Bool {return self._expiryTimestamp != nil}
  /// Clears the value of `expiryTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearExpiryTimestamp() {self._expiryTimestamp = nil}

  /// When the entry was last updated
  var lastModified: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastModified ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _expiryTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastModified: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Command to get all current versions for all reference data entities for a given type.
struct No_Entur_Abt_Traveller_V1_GetReferenceDataByTypeCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique command id. Used for idempotency
  var commandID: No_Entur_Abt_Common_V1_CommandId {
    get {return _commandID ?? No_Entur_Abt_Common_V1_CommandId()}
    set {_commandID = newValue}
  }
  /// Returns true if `commandID` has been explicitly set.
  var hasCommandID: Bool {return self._commandID != nil}
  /// Clears the value of `commandID`. Subsequent reads from it will return its default value.
  mutating func clearCommandID() {self._commandID = nil}

  /// Data type to get reference data for
  var dataType: String = String()

  /// Optional filtering by code space
  var codeSpace: String = String()

  /// Optional, will return the result if it is updated after the timestamp
  var ifModifiedSince: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _ifModifiedSince ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_ifModifiedSince = newValue}
  }
  /// Returns true if `ifModifiedSince` has been explicitly set.
  var hasIfModifiedSince: Bool {return self._ifModifiedSince != nil}
  /// Clears the value of `ifModifiedSince`. Subsequent reads from it will return its default value.
  mutating func clearIfModifiedSince() {self._ifModifiedSince = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commandID: No_Entur_Abt_Common_V1_CommandId? = nil
  fileprivate var _ifModifiedSince: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand.OneOf_Data: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenResponse: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferCommand: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferResponse: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_GetReferenceDataCommand: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_GetReferenceDataResponse: @unchecked Sendable {}
extension No_Entur_Abt_Traveller_V1_GetReferenceDataByTypeCommand: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "no.entur.abt.traveller.v1"

extension No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateNewMobileTokenCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    2: .standard(proto: "activation_data"),
    3: .standard(proto: "activation_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commandID) }()
      case 2: try {
        var v: No_Entur_Abt_Traveller_V1_MobileTokenActivationData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .activationData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .activationData(v)
        }
      }()
      case 3: try {
        var v: No_Entur_Abt_Traveller_V1_MobileTokenActivationDetails?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .activationDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .activationDetails(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commandID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.data {
    case .activationData?: try {
      guard case .activationData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .activationDetails?: try {
      guard case .activationDetails(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand, rhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenCommand) -> Bool {
    if lhs._commandID != rhs._commandID {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateNewMobileTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenResponse, rhs: No_Entur_Abt_Traveller_V1_ActivateNewMobileTokenResponse) -> Bool {
    if lhs._tokenDetails != rhs._tokenDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcceptMobileTokenTransferCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    3: .standard(proto: "transfer_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commandID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.transferID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commandID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.transferID.isEmpty {
      try visitor.visitSingularStringField(value: self.transferID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferCommand, rhs: No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferCommand) -> Bool {
    if lhs._commandID != rhs._commandID {return false}
    if lhs.transferID != rhs.transferID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AcceptMobileTokenTransferResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "initialization_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._initializationData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._initializationData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferResponse, rhs: No_Entur_Abt_Traveller_V1_AcceptMobileTokenTransferResponse) -> Bool {
    if lhs._initializationData != rhs._initializationData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_GetReferenceDataCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReferenceDataCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    2: .same(proto: "id"),
    3: .same(proto: "version"),
    4: .standard(proto: "if_modified_since"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commandID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifModifiedSince) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commandID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    try { if let v = self._ifModifiedSince {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_GetReferenceDataCommand, rhs: No_Entur_Abt_Traveller_V1_GetReferenceDataCommand) -> Bool {
    if lhs._commandID != rhs._commandID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.version != rhs.version {return false}
    if lhs._ifModifiedSince != rhs._ifModifiedSince {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_GetReferenceDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReferenceDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "version"),
    3: .standard(proto: "protobuf_bytes"),
    4: .standard(proto: "current_version"),
    5: .standard(proto: "expiry_timestamp"),
    6: .standard(proto: "last_modified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.protobufBytes) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.currentVersion) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._expiryTimestamp) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.protobufBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.protobufBytes, fieldNumber: 3)
    }
    if self.currentVersion != false {
      try visitor.visitSingularBoolField(value: self.currentVersion, fieldNumber: 4)
    }
    try { if let v = self._expiryTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_GetReferenceDataResponse, rhs: No_Entur_Abt_Traveller_V1_GetReferenceDataResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.version != rhs.version {return false}
    if lhs.protobufBytes != rhs.protobufBytes {return false}
    if lhs.currentVersion != rhs.currentVersion {return false}
    if lhs._expiryTimestamp != rhs._expiryTimestamp {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension No_Entur_Abt_Traveller_V1_GetReferenceDataByTypeCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReferenceDataByTypeCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_id"),
    2: .standard(proto: "data_type"),
    3: .standard(proto: "code_space"),
    4: .standard(proto: "if_modified_since"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commandID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dataType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.codeSpace) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ifModifiedSince) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commandID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.dataType.isEmpty {
      try visitor.visitSingularStringField(value: self.dataType, fieldNumber: 2)
    }
    if !self.codeSpace.isEmpty {
      try visitor.visitSingularStringField(value: self.codeSpace, fieldNumber: 3)
    }
    try { if let v = self._ifModifiedSince {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: No_Entur_Abt_Traveller_V1_GetReferenceDataByTypeCommand, rhs: No_Entur_Abt_Traveller_V1_GetReferenceDataByTypeCommand) -> Bool {
    if lhs._commandID != rhs._commandID {return false}
    if lhs.dataType != rhs.dataType {return false}
    if lhs.codeSpace != rhs.codeSpace {return false}
    if lhs._ifModifiedSince != rhs._ifModifiedSince {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
