buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version =  rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['EnturTraveller_kotlinVersion']

  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.0.0'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['EnturTraveller_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['EnturTraveller_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')
  defaultConfig {
    minSdkVersion 23
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  maven {
    url "${projectDir}/libs"
  }
  mavenLocal()

  mavenCentral()
  jcenter()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
            projectDir,
            '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
              parentDir,
              'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
              parentDir,
              'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')
def grpcVersion = "1.36.0"
def tempoVersion = "1.2.0-alpha01"
def googlePlayServicesLocationVersion = '18.0.0'
def androidPlayServicesSafetynetVersion = '17.0.1'

dependencies {
  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'

 /* api("com.google.android.gms:play-services-safetynet:${androidPlayServicesSafetynetVersion}") {
    exclude group: "com.android.support"
  }*/

  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  implementation "no.entur.abt:abt-time-lib-android:1.0.28"
  implementation("no.entur.abt:abt-traveller-token-lib-android:1.0.28") {
    exclude group: "no.entur.abt", module: "abt-protobuf-lite-traveller"
  }

  api("no.entur.abt:abt-protobuf-lite-traveller:2.253") {
    changing = true
    exclude group: "com.google.api.grpc", module: "proto-google-common-protos"
    exclude group: "com.google.protobuf", module: "protobuf-java"
    exclude group: "no.entur.abt", module: "abt-protobuf"
    exclude group: "no.entur.abt", module: "abt-protobuf-lite-common"
    exclude group: "io.envoyproxy.protoc-gen-validate", module: "pgv-java-stub"
  }

  api("no.entur.abt:abt-protobuf-lite-common:2.253") {
    exclude group: "io.envoyproxy.protoc-gen-validate", module: "pgv-java-stub"
    exclude group: "com.google.re2j", module: "commons-validator"
    exclude group: "commons-validator", module: "commons-validator"
    exclude group: "com.google.protobuf", module: "protobuf-java"
    exclude group: "com.google.protobuf", module: "protobuf-java-util"
  }

 /* implementation "com.google.android.gms:play-services-location:${googlePlayServicesLocationVersion}"
  implementation "io.grpc:grpc-stub:${grpcVersion}"
  implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"
  implementation "io.grpc:grpc-android:${grpcVersion}"
  implementation "io.grpc:grpc-okhttp:${grpcVersion}"*/
}
