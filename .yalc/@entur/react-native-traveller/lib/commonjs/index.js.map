{"version":3,"sources":["index.ts"],"names":["createClient","setStatus","initialConfig","config","fetcher","abtTokensService","hosts","lastSeenStatus","setStatusWrapper","status","startStateMachine","catch","err","console","warn","state","error","type","message","restart","generateQrCode","PayloadAction","ticketInspection"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAMe,SAASA,YAAT,CACbC,SADa,EAEbC,aAFa,EAGb;AACA,QAAMC,MAAM,GAAG,wCAA2BD,aAA3B,CAAf;AACA,QAAME,OAAO,GAAG,4BAAcD,MAAd,CAAhB;AACA,QAAME,gBAAgB,GAAG,8CAAuBD,OAAvB,EAAgCD,MAAM,CAACG,KAAvC,CAAzB;AAEA,MAAIC,cAAJ;;AACA,QAAMC,gBAAgB,GAAIC,MAAD,IAAyB;AAChDF,IAAAA,cAAc,GAAGE,MAAjB;AACAR,IAAAA,SAAS,CAACQ,MAAD,CAAT;AACD,GAHD;;AAKA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,uCACEL,gBADF,EAEEG,gBAFF,EAGED,cAHF,EAIEI,KAJF,CAISC,GAAD,IAAS;AAAA;;AACfC,MAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCF,GAAjC;AACAJ,MAAAA,gBAAgB,CAAC;AACfO,QAAAA,KAAK,EAAE,oBAAAR,cAAc,UAAd,0DAAgBQ,KAAhB,KAAyB,SADjB;AAEfC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAE,kBAA5B;AAAgDN,UAAAA;AAAhD;AAFQ,OAAD,CAAhB;AAID,KAVD;AAWD,GAZD;;AAcAF,EAAAA,iBAAiB;AAEjB,SAAO;AACLS,IAAAA,OAAO,EAAE,MAAM;AACbT,MAAAA,iBAAiB;AAClB,KAHI;AAILU,IAAAA,cAAc,EAAE,MAAM,4BAAe,CAACC,qBAAcC,gBAAf,CAAf;AAJjB,GAAP;AAMD","sourcesContent":["import { getConfigFromInitialConfig, InitialConfig } from './config';\nimport { startTokenStateMachine } from './token';\nimport { createFetcher } from './fetcher';\nimport { createAbtTokensService } from './token/abt-tokens-service';\nimport type { TokenStatus } from './token/types';\nimport { getSecureToken } from './native';\nimport { PayloadAction } from './native/types';\n\nexport type { Token } from './native/types';\nexport { RequestError } from './fetcher';\nexport type { Fetch, ApiResponse, ApiRequest } from './config';\n\nexport default function createClient(\n  setStatus: (status: TokenStatus) => void,\n  initialConfig?: InitialConfig\n) {\n  const config = getConfigFromInitialConfig(initialConfig);\n  const fetcher = createFetcher(config);\n  const abtTokensService = createAbtTokensService(fetcher, config.hosts);\n\n  let lastSeenStatus: TokenStatus | undefined;\n  const setStatusWrapper = (status: TokenStatus) => {\n    lastSeenStatus = status;\n    setStatus(status);\n  };\n\n  const startStateMachine = () => {\n    startTokenStateMachine(\n      abtTokensService,\n      setStatusWrapper,\n      lastSeenStatus\n    ).catch((err) => {\n      console.warn('Unexpected error', err);\n      setStatusWrapper({\n        state: lastSeenStatus?.state || 'Loading',\n        error: { type: 'Unknown', message: 'Unexpected error', err },\n      });\n    });\n  };\n\n  startStateMachine();\n\n  return {\n    restart: () => {\n      startStateMachine();\n    },\n    generateQrCode: () => getSecureToken([PayloadAction.ticketInspection]),\n  };\n}\n"]}