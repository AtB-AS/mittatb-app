{"version":3,"sources":["index.ts"],"names":["createClient","setStatus","initialConfig","safetyNetApiKey","config","fetcher","abtTokensService","hosts","currentStatus","currentAccountId","toVisualState","storedState","error","missingNetConnection","includes","state","setStatusWrapper","status","visualState","setAccount","accountId","retry","forceRestart","Error","generateQrCode","PayloadAction","ticketInspection"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAMe,SAASA,YAAT,CACbC,SADa,EAEbC,aAFa,EAGb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,aAA5B;AACA,QAAME,MAAM,GAAG,wCAA2BF,aAA3B,CAAf;AACA,QAAMG,OAAO,GAAG,4BAAcD,MAAd,CAAhB;AACA,QAAME,gBAAgB,GAAG,8CAAuBD,OAAvB,EAAgCD,MAAM,CAACG,KAAvC,CAAzB;AAEA,MAAIC,aAAJ;AACA,MAAIC,gBAAJ;;AAEA,QAAMC,aAAa,GAAIC,WAAD,IAA2C;AAAA;;AAC/D,8BAAIA,WAAW,CAACC,KAAhB,+CAAI,mBAAmBC,oBAAvB,EAA6C;AAC3C,aAAO,sBAAP;AACD,KAFD,MAEO,IAAIF,WAAW,CAACC,KAAhB,EAAuB;AAC5B,aAAO,OAAP;AACD,KAFM,MAEA,IAAI,CAAC,OAAD,EAAU,YAAV,EAAwBE,QAAxB,CAAiCH,WAAW,CAACI,KAA7C,CAAJ,EAAyD;AAC9D,aAAO,OAAP;AACD,KAFM,MAEA;AACL,aAAO,SAAP;AACD;AACF,GAVD;;AAYA,QAAMC,gBAAgB,GAAIL,WAAD,IAA+B;AACtD,UAAMM,MAAM,GAAGN,WAAW,IAAI;AAC5BI,MAAAA,KAAK,EAAEJ,WAAW,CAACI,KADS;AAE5BH,MAAAA,KAAK,EAAED,WAAW,CAACC,KAFS;AAG5BM,MAAAA,WAAW,EAAER,aAAa,CAACC,WAAD;AAHE,KAA9B;AAKAH,IAAAA,aAAa,GAAGS,MAAhB;AACAhB,IAAAA,SAAS,CAACgB,MAAD,CAAT;AACD,GARD;;AAUA,SAAO;AACLE,IAAAA,UAAU,CAACC,SAAD,EAAgC;AACxCX,MAAAA,gBAAgB,GAAGW,SAAnB;AACA,yCACEd,gBADF,EAEEU,gBAFF,EAGEb,eAHF,EAIE,KAJF,EAKEiB,SALF;AAOD,KAVI;;AAWLC,IAAAA,KAAK,EAAGC,YAAD,IAA2B;AAAA;;AAChC,UAAI,CAACb,gBAAL,EAAuB;AACrB,cAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,UAAI,CAACD,YAAD,IAAiB,mBAAAd,aAAa,UAAb,wDAAeU,WAAf,MAA+B,SAApD,EAA+D;AAC7D,cAAM,IAAIK,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,yCACEjB,gBADF,EAEEU,gBAFF,EAGEb,eAHF,EAIEmB,YAJF,EAKEb,gBALF,EATgC,CAe7B;AACJ,KA3BI;AA4BLe,IAAAA,cAAc,EAAE,MAAM;AAAA;;AACpB,UAAI,CAACf,gBAAL,EAAuB;AACrB,cAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,UAAI,oBAAAf,aAAa,UAAb,0DAAeU,WAAf,MAA+B,OAAnC,EAA4C;AAC1C,cAAM,IAAIK,KAAJ,CACJ,uDADI,CAAN;AAGD;;AAED,aAAO,4BAAed,gBAAf,EAAiC,CAACgB,qBAAcC,gBAAf,CAAjC,CAAP;AACD;AAxCI,GAAP;AA0CD","sourcesContent":["import { getConfigFromInitialConfig, InitialConfig } from './config';\nimport { startTokenStateMachine } from './token';\nimport { createFetcher } from './fetcher';\nimport { createAbtTokensService } from './token/abt-tokens-service';\nimport type { StoredState, TokenStatus, VisualState } from './token/types';\nimport { getSecureToken } from './native';\nimport { PayloadAction } from './native/types';\n\nexport type { Token } from './native/types';\nexport { RequestError } from './fetcher';\nexport type { Fetch, ApiResponse, ApiRequest } from './config';\n\nexport default function createClient(\n  setStatus: (status?: TokenStatus) => void,\n  initialConfig: InitialConfig\n) {\n  const { safetyNetApiKey } = initialConfig;\n  const config = getConfigFromInitialConfig(initialConfig);\n  const fetcher = createFetcher(config);\n  const abtTokensService = createAbtTokensService(fetcher, config.hosts);\n\n  let currentStatus: TokenStatus | undefined;\n  let currentAccountId: string | undefined;\n\n  const toVisualState = (storedState: StoredState): VisualState => {\n    if (storedState.error?.missingNetConnection) {\n      return 'MissingNetConnection';\n    } else if (storedState.error) {\n      return 'Error';\n    } else if (['Valid', 'Validating'].includes(storedState.state)) {\n      return 'Token';\n    } else {\n      return 'Loading';\n    }\n  };\n\n  const setStatusWrapper = (storedState?: StoredState) => {\n    const status = storedState && {\n      state: storedState.state,\n      error: storedState.error,\n      visualState: toVisualState(storedState),\n    };\n    currentStatus = status;\n    setStatus(status);\n  };\n\n  return {\n    setAccount(accountId: string | undefined) {\n      currentAccountId = accountId;\n      startTokenStateMachine(\n        abtTokensService,\n        setStatusWrapper,\n        safetyNetApiKey,\n        false,\n        accountId\n      );\n    },\n    retry: (forceRestart: boolean) => {\n      if (!currentAccountId) {\n        throw new Error('Account id must be set');\n      }\n\n      if (!forceRestart && currentStatus?.visualState === 'Loading') {\n        throw new Error('Can not retry while the sdk is already running');\n      }\n\n      startTokenStateMachine(\n        abtTokensService,\n        setStatusWrapper,\n        safetyNetApiKey,\n        forceRestart,\n        currentAccountId\n      ); // Todo: Not start if already running\n    },\n    generateQrCode: () => {\n      if (!currentAccountId) {\n        throw new Error('Account id must be set');\n      }\n\n      if (currentStatus?.visualState !== 'Token') {\n        throw new Error(\n          'The current state does not allow retrieval of qr code'\n        );\n      }\n\n      return getSecureToken(currentAccountId, [PayloadAction.ticketInspection]);\n    },\n  };\n}\n"]}