{"version":3,"sources":["index.ts"],"names":["createClient","setStatus","initialConfig","config","fetcher","abtTokensService","hosts","setStatusWrapper","storedState","state","error","restart","generateQrCode","PayloadAction","ticketInspection"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAMe,SAASA,YAAT,CACbC,SADa,EAEbC,aAFa,EAGb;AACA,QAAMC,MAAM,GAAG,wCAA2BD,aAA3B,CAAf;AACA,QAAME,OAAO,GAAG,4BAAcD,MAAd,CAAhB;AACA,QAAME,gBAAgB,GAAG,8CAAuBD,OAAvB,EAAgCD,MAAM,CAACG,KAAvC,CAAzB;;AAEA,QAAMC,gBAAgB,GAAIC,WAAD,IAA8B;AACrDP,IAAAA,SAAS,CAAC;AACRQ,MAAAA,KAAK,EAAED,WAAW,CAACC,KADX;AAERC,MAAAA,KAAK,EAAEF,WAAW,CAACE;AAFX,KAAD,CAAT;AAID,GALD;;AAOA,qCAAuBL,gBAAvB,EAAyCE,gBAAzC;AAEA,SAAO;AACLI,IAAAA,OAAO,EAAE,MAAM;AACb,yCAAuBN,gBAAvB,EAAyCE,gBAAzC,EADa,CAC+C;AAC7D,KAHI;AAILK,IAAAA,cAAc,EAAE,MAAM,4BAAe,CAACC,qBAAcC,gBAAf,CAAf;AAJjB,GAAP;AAMD","sourcesContent":["import { getConfigFromInitialConfig, InitialConfig } from './config';\nimport { startTokenStateMachine } from './token';\nimport { createFetcher } from './fetcher';\nimport { createAbtTokensService } from './token/abt-tokens-service';\nimport type { StoredState, TokenStatus } from './token/types';\nimport { getSecureToken } from './native';\nimport { PayloadAction } from './native/types';\n\nexport type { Token } from './native/types';\nexport { RequestError } from './fetcher';\nexport type { Fetch, ApiResponse, ApiRequest } from './config';\n\nexport default function createClient(\n  setStatus: (status: TokenStatus) => void,\n  initialConfig?: InitialConfig\n) {\n  const config = getConfigFromInitialConfig(initialConfig);\n  const fetcher = createFetcher(config);\n  const abtTokensService = createAbtTokensService(fetcher, config.hosts);\n\n  const setStatusWrapper = (storedState: StoredState) => {\n    setStatus({\n      state: storedState.state,\n      error: storedState.error,\n    });\n  };\n\n  startTokenStateMachine(abtTokensService, setStatusWrapper);\n\n  return {\n    restart: () => {\n      startTokenStateMachine(abtTokensService, setStatusWrapper); // Todo: Not start if already running\n    },\n    generateQrCode: () => getSecureToken([PayloadAction.ticketInspection]),\n  };\n}\n"]}