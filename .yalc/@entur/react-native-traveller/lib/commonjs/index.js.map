{"version":3,"sources":["index.ts"],"names":["createClient","setStatus","initialConfig","safetyNetApiKey","config","fetcher","abtTokensService","hosts","currentStatus","currentAccountId","toVisualState","storedState","error","missingNetConnection","includes","state","setStatusWrapper","accountId","status","visualState","setAccount","retry","forceRestart","generateQrCode","Promise","resolve","undefined","PayloadAction","ticketInspection"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAMe,SAASA,YAAT,CACbC,SADa,EAEbC,aAFa,EAGb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,aAA5B;AACA,QAAME,MAAM,GAAG,wCAA2BF,aAA3B,CAAf;AACA,QAAMG,OAAO,GAAG,4BAAcD,MAAd,CAAhB;AACA,QAAME,gBAAgB,GAAG,8CAAuBD,OAAvB,EAAgCD,MAAM,CAACG,KAAvC,CAAzB;AAEA,MAAIC,aAAJ;AACA,MAAIC,gBAAJ;;AAEA,QAAMC,aAAa,GAAIC,WAAD,IAA2C;AAAA;;AAC/D,8BAAIA,WAAW,CAACC,KAAhB,+CAAI,mBAAmBC,oBAAvB,EAA6C;AAC3C,aAAO,sBAAP;AACD,KAFD,MAEO,IAAIF,WAAW,CAACC,KAAhB,EAAuB;AAC5B,aAAO,OAAP;AACD,KAFM,MAEA,IAAI,CAAC,OAAD,EAAU,YAAV,EAAwBE,QAAxB,CAAiCH,WAAW,CAACI,KAA7C,CAAJ,EAAyD;AAC9D,aAAO,OAAP;AACD,KAFM,MAEA;AACL,aAAO,SAAP;AACD;AACF,GAVD;;AAYA,QAAMC,gBAAgB,GAAIL,WAAD,IAA+B;AACtD;AACA;AACA,QAAIA,WAAW,SAAX,IAAAA,WAAW,WAAX,IAAAA,WAAW,CAAEM,SAAb,IAA0BN,WAAW,CAACM,SAAZ,KAA0BR,gBAAxD,EAA0E;AACxE;AACD;;AAED,UAAMS,MAAM,GAAGP,WAAW,IAAI;AAC5BI,MAAAA,KAAK,EAAEJ,WAAW,CAACI,KADS;AAE5BH,MAAAA,KAAK,EAAED,WAAW,CAACC,KAFS;AAG5BO,MAAAA,WAAW,EAAET,aAAa,CAACC,WAAD;AAHE,KAA9B;AAKAH,IAAAA,aAAa,GAAGU,MAAhB;AACAjB,IAAAA,SAAS,CAACiB,MAAD,CAAT;AACD,GAdD;;AAgBA,SAAO;AACLE,IAAAA,UAAU,CAACH,SAAD,EAAgC;AACxC,UAAIR,gBAAgB,KAAKQ,SAAzB,EAAoC;AAClCR,QAAAA,gBAAgB,GAAGQ,SAAnB;AACA,2CACEX,gBADF,EAEEU,gBAFF,EAGEb,eAHF,EAIE,KAJF,EAKEc,SALF;AAOD;AACF,KAZI;;AAaLI,IAAAA,KAAK,EAAGC,YAAD,IAA2B;AAAA;;AAChC,UAAI,CAACb,gBAAL,EAAuB;AACrB;AACD;;AAED,UAAI,CAACa,YAAD,IAAiB,mBAAAd,aAAa,UAAb,wDAAeW,WAAf,MAA+B,SAApD,EAA+D;AAC7D;AACD;;AAED,yCACEb,gBADF,EAEEU,gBAFF,EAGEb,eAHF,EAIEmB,YAJF,EAKEb,gBALF;AAOD,KA7BI;AA8BLc,IAAAA,cAAc,EAAE,MAAmC;AAAA;;AACjD,UAAI,CAACd,gBAAD,IAAqB,oBAAAD,aAAa,UAAb,0DAAeW,WAAf,MAA+B,OAAxD,EAAiE;AAC/D,eAAOK,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAAP;AACD;;AAED,aAAO,4BAAejB,gBAAf,EAAiC,CAACkB,qBAAcC,gBAAf,CAAjC,CAAP;AACD;AApCI,GAAP;AAsCD","sourcesContent":["import { getConfigFromInitialConfig, InitialConfig } from './config';\nimport { startTokenStateMachine } from './token';\nimport { createFetcher } from './fetcher';\nimport { createAbtTokensService } from './token/abt-tokens-service';\nimport type { StoredState, TokenStatus, VisualState } from './token/types';\nimport { getSecureToken } from './native';\nimport { PayloadAction } from './native/types';\n\nexport type { Token } from './native/types';\nexport { RequestError } from './fetcher';\nexport type { Fetch, ApiResponse, ApiRequest } from './config';\n\nexport default function createClient(\n  setStatus: (status?: TokenStatus) => void,\n  initialConfig: InitialConfig\n) {\n  const { safetyNetApiKey } = initialConfig;\n  const config = getConfigFromInitialConfig(initialConfig);\n  const fetcher = createFetcher(config);\n  const abtTokensService = createAbtTokensService(fetcher, config.hosts);\n\n  let currentStatus: TokenStatus | undefined;\n  let currentAccountId: string | undefined;\n\n  const toVisualState = (storedState: StoredState): VisualState => {\n    if (storedState.error?.missingNetConnection) {\n      return 'MissingNetConnection';\n    } else if (storedState.error) {\n      return 'Error';\n    } else if (['Valid', 'Validating'].includes(storedState.state)) {\n      return 'Token';\n    } else {\n      return 'Loading';\n    }\n  };\n\n  const setStatusWrapper = (storedState?: StoredState) => {\n    // Do not give status callbacks for other accounts ids than the one\n    // currently set\n    if (storedState?.accountId && storedState.accountId !== currentAccountId) {\n      return;\n    }\n\n    const status = storedState && {\n      state: storedState.state,\n      error: storedState.error,\n      visualState: toVisualState(storedState),\n    };\n    currentStatus = status;\n    setStatus(status);\n  };\n\n  return {\n    setAccount(accountId: string | undefined) {\n      if (currentAccountId !== accountId) {\n        currentAccountId = accountId;\n        startTokenStateMachine(\n          abtTokensService,\n          setStatusWrapper,\n          safetyNetApiKey,\n          false,\n          accountId\n        );\n      }\n    },\n    retry: (forceRestart: boolean) => {\n      if (!currentAccountId) {\n        return;\n      }\n\n      if (!forceRestart && currentStatus?.visualState === 'Loading') {\n        return;\n      }\n\n      startTokenStateMachine(\n        abtTokensService,\n        setStatusWrapper,\n        safetyNetApiKey,\n        forceRestart,\n        currentAccountId\n      );\n    },\n    generateQrCode: (): Promise<string | undefined> => {\n      if (!currentAccountId || currentStatus?.visualState !== 'Token') {\n        return Promise.resolve(undefined);\n      }\n\n      return getSecureToken(currentAccountId, [PayloadAction.ticketInspection]);\n    },\n  };\n}\n"]}