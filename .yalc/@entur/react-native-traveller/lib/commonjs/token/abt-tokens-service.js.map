{"version":3,"sources":["abt-tokens-service.ts"],"names":["SIGNED_TOKEN_HEADER_KEY","createAbtTokensService","fetcher","hosts","hostUrl","pto","replace","listTokens","url","response","method","body","getTokenCertificate","signedToken","headers","initToken","renewToken","activateToken","tokenId"],"mappings":";;;;;;AAWA,MAAMA,uBAAuB,GAAG,gBAAhC;;AAgBO,MAAMC,sBAAsB,GAAG,CACpCC,OADoC,EAEpCC,KAFoC,KAGf;AACrB,QAAMC,OAAO,GAAGD,KAAK,CAACE,GAAN,CAAUC,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAhB;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAI,GAAEJ,OAAQ,SAAvB;AACA,UAAMK,QAAQ,GAAG,MAAMP,OAAO,CAAqB;AACjDM,MAAAA,GADiD;AAEjDE,MAAAA,MAAM,EAAE;AAFyC,KAArB,CAA9B;AAIA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAPD;;AASA,QAAMC,mBAAmB,GAAG,MAAOC,WAAP,IAA+B;AACzD,UAAML,GAAG,GAAI,GAAEJ,OAAQ,qBAAvB;AACA,UAAMK,QAAQ,GAAG,MAAMP,OAAO,CAA8B;AAC1DM,MAAAA,GAD0D;AAE1DM,MAAAA,OAAO,EAAE;AACP,SAACd,uBAAD,GAA2Ba;AADpB,OAFiD;AAK1DH,MAAAA,MAAM,EAAE;AALkD,KAA9B,CAA9B;AAOA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAVD;;AAYA,QAAMI,SAAS,GAAG,MAAOJ,IAAP,IAAwC;AACxD,UAAMH,GAAG,GAAI,GAAEJ,OAAQ,SAAvB;AACA,UAAMK,QAAQ,GAAG,MAAMP,OAAO,CAA0B;AACtDM,MAAAA,GADsD;AAEtDG,MAAAA,IAFsD;AAGtDD,MAAAA,MAAM,EAAE;AAH8C,KAA1B,CAA9B;AAKA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GARD;;AAUA,QAAMK,UAAU,GAAG,MAAOH,WAAP,IAA+B;AAChD,UAAML,GAAG,GAAI,GAAEJ,OAAQ,eAAvB;AACA,UAAMK,QAAQ,GAAG,MAAMP,OAAO,CAAqB;AACjDM,MAAAA,GADiD;AAEjDM,MAAAA,OAAO,EAAE;AACP,SAACd,uBAAD,GAA2Ba;AADpB,OAFwC;AAKjDH,MAAAA,MAAM,EAAE;AALyC,KAArB,CAA9B;AAOA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAVD;;AAYA,QAAMM,aAAa,GAAG,OACpBC,OADoB,EAEpBP,IAFoB,EAGpBE,WAHoB,KAIjB;AACH,UAAML,GAAG,GAAI,GAAEJ,OAAQ,WAAUc,OAAQ,WAAzC;AACA,UAAMT,QAAQ,GAAG,MAAMP,OAAO,CAAwB;AACpDM,MAAAA,GADoD;AAEpDM,MAAAA,OAAO,EAAED,WAAW,GAChB;AACE,SAACb,uBAAD,GAA2Ba;AAD7B,OADgB,GAIhB,EANgD;AAOpDF,MAAAA,IAPoD;AAQpDD,MAAAA,MAAM,EAAE;AAR4C,KAAxB,CAA9B;AAWA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAlBD;;AAoBA,SAAO;AACLJ,IAAAA,UADK;AAELK,IAAAA,mBAFK;AAGLG,IAAAA,SAHK;AAILC,IAAAA,UAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CA5EM","sourcesContent":["import type { Fetch, Hosts } from '../config';\nimport type {\n  ActivateTokenRequest,\n  ActivateTokenResponse,\n  GetTokenCertificateResponse,\n  InitializeTokenRequest,\n  InitializeTokenResponse,\n  ListTokensResponse,\n  RenewTokenResponse,\n} from './types';\n\nconst SIGNED_TOKEN_HEADER_KEY = 'X-Signed-Token';\n\nexport type AbtTokensService = {\n  listTokens: () => Promise<ListTokensResponse>;\n  getTokenCertificate: (\n    signedToken: string\n  ) => Promise<GetTokenCertificateResponse>;\n  initToken: (req: InitializeTokenRequest) => Promise<InitializeTokenResponse>;\n  renewToken: (signedToken: string) => Promise<RenewTokenResponse>;\n  activateToken: (\n    tokenId: string,\n    req: ActivateTokenRequest,\n    signedToken?: string\n  ) => Promise<ActivateTokenResponse>;\n};\n\nexport const createAbtTokensService = (\n  fetcher: Fetch,\n  hosts: Hosts\n): AbtTokensService => {\n  const hostUrl = hosts.pto.replace(/\\/$/, '');\n\n  const listTokens = async () => {\n    const url = `${hostUrl}/tokens`;\n    const response = await fetcher<ListTokensResponse>({\n      url,\n      method: 'GET',\n    });\n    return response.body;\n  };\n\n  const getTokenCertificate = async (signedToken: string) => {\n    const url = `${hostUrl}/tokens/certificate`;\n    const response = await fetcher<GetTokenCertificateResponse>({\n      url,\n      headers: {\n        [SIGNED_TOKEN_HEADER_KEY]: signedToken,\n      },\n      method: 'GET',\n    });\n    return response.body;\n  };\n\n  const initToken = async (body: InitializeTokenRequest) => {\n    const url = `${hostUrl}/tokens`;\n    const response = await fetcher<InitializeTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n    return response.body;\n  };\n\n  const renewToken = async (signedToken: string) => {\n    const url = `${hostUrl}/tokens/renew`;\n    const response = await fetcher<RenewTokenResponse>({\n      url,\n      headers: {\n        [SIGNED_TOKEN_HEADER_KEY]: signedToken,\n      },\n      method: 'POST',\n    });\n    return response.body;\n  };\n\n  const activateToken = async (\n    tokenId: string,\n    body: ActivateTokenRequest,\n    signedToken?: string\n  ) => {\n    const url = `${hostUrl}/tokens/${tokenId}/activate`;\n    const response = await fetcher<ActivateTokenResponse>({\n      url,\n      headers: signedToken\n        ? {\n            [SIGNED_TOKEN_HEADER_KEY]: signedToken,\n          }\n        : {},\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return {\n    listTokens,\n    getTokenCertificate,\n    initToken,\n    renewToken,\n    activateToken,\n  };\n};\n"]}