{"version":3,"sources":["index.ts"],"names":["STORAGE_KEY","startTokenStateMachine","abtTokensService","setStatus","forceRestart","currentState","getInitialState","shouldContinue","s","state","error","handler","getStateHandler","AsyncStorage","setItem","JSON","stringify","err","console","warn","type","message","savedStateString","getItem","parse","storedState"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,uBAApB;;AAEO,MAAMC,sBAAsB,GAAG,OACpCC,gBADoC,EAEpCC,SAFoC,EAGpCC,YAAqB,GAAG,KAHY,KAIjC;AACH,MAAIC,YAAY,GAAG,MAAMC,eAAe,CAACF,YAAD,CAAxC;;AACA,MAAI;AACF,UAAMG,cAAc,GAAIC,CAAD,IAAoBA,CAAC,CAACC,KAAF,KAAY,OAAZ,IAAuB,CAACD,CAAC,CAACE,KAArE;;AACA,OAAG;AACD,YAAMC,OAAO,GAAGC,eAAe,CAACV,gBAAD,EAAmBG,YAAnB,CAA/B;AACAA,MAAAA,YAAY,GAAG,MAAMM,OAAO,CAACN,YAAD,CAA5B;AACA,YAAMQ,sBAAaC,OAAb,CAAqBd,WAArB,EAAkCe,IAAI,CAACC,SAAL,CAAeX,YAAf,CAAlC,CAAN;AACAF,MAAAA,SAAS,CAACE,YAAD,CAAT;AACD,KALD,QAKSE,cAAc,CAACF,YAAD,CALvB;AAMD,GARD,CAQE,OAAOY,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCF,GAAjC;AACAd,IAAAA,SAAS,CAAC,EACR,GAAGE,YADK;AAERK,MAAAA,KAAK,EAAE;AAAEU,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,OAAO,EAAE,kBAA5B;AAAgDJ,QAAAA;AAAhD;AAFC,KAAD,CAAT;AAID;AACF,CArBM;;;;AAuBP,MAAMX,eAAe,GAAG,MAAOF,YAAP,IAAuD;AAC7E,MAAIA,YAAJ,EAAkB;AAChB,WAAO;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AACD,QAAMa,gBAAgB,GAAG,MAAMT,sBAAaU,OAAb,CAAqBvB,WAArB,CAA/B;AACA,SAAOsB,gBAAgB,GAAGP,IAAI,CAACS,KAAL,CAAWF,gBAAX,CAAH,GAAkC;AAAEb,IAAAA,KAAK,EAAE;AAAT,GAAzD;AACD,CAND;;AAQA,MAAMG,eAAe,GAAG,CACtBV,gBADsB,EAEtBuB,WAFsB,KAGL;AACjB,UAAQA,WAAW,CAAChB,KAApB;AACE,SAAK,OAAL;AACA,SAAK,SAAL;AACE,aAAO,8BAAP;;AACF,SAAK,YAAL;AACE,aAAO,gCAAkBP,gBAAlB,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBA,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAqBA,gBAArB,CAAP;;AACF,SAAK,yBAAL;AACE,aAAO,yCAA2BA,gBAA3B,CAAP;;AACF,SAAK,WAAL;AACA,SAAK,eAAL;AACE,aAAO,4BAAcA,gBAAd,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBA,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAuBA,gBAAvB,CAAP;;AACF,SAAK,UAAL;AACE,aAAO,8BAAgBA,gBAAhB,CAAP;AApBJ;AAsBD,CA1BD","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState, TokenStatus } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst STORAGE_KEY = '@mobiletokensdk-state';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s: StoredState) => void,\n  forceRestart: boolean = false\n) => {\n  let currentState = await getInitialState(forceRestart);\n  try {\n    const shouldContinue = (s: TokenStatus) => s.state !== 'Valid' && !s.error;\n    do {\n      const handler = getStateHandler(abtTokensService, currentState);\n      currentState = await handler(currentState);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(currentState));\n      setStatus(currentState);\n    } while (shouldContinue(currentState));\n  } catch (err) {\n    console.warn('Unexpected error', err);\n    setStatus({\n      ...currentState,\n      error: { type: 'Unknown', message: 'Unexpected error', err },\n    });\n  }\n};\n\nconst getInitialState = async (forceRestart: boolean): Promise<StoredState> => {\n  if (forceRestart) {\n    return { state: 'Loading' };\n  }\n  const savedStateString = await AsyncStorage.getItem(STORAGE_KEY);\n  return savedStateString ? JSON.parse(savedStateString) : { state: 'Loading' };\n};\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler();\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler(abtTokensService);\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService);\n    case 'AddToken':\n      return addTokenHandler(abtTokensService);\n  }\n};\n"]}