{"version":3,"sources":["index.ts"],"names":["startTokenStateMachine","abtTokensService","setStatus","getClientState","safetyNetApiKey","forceRestart","accountId","undefined","getClientStateRequired","storeKey","currentState","state","shouldContinue","handler","getStateHandler","AsyncStorage","setItem","JSON","stringify","err","console","warn","error","type","message","s","storedState"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;AAEO,MAAMA,sBAAsB,GAAG,OACpCC,gBADoC,EAEpCC,SAFoC,EAGpCC,cAHoC,EAIpCC,eAJoC,EAKpCC,YAAqB,GAAG,KALY,KAMjC;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,cAAc,EAApC;;AAEA,MAAI,CAACG,SAAL,EAAgB;AACdJ,IAAAA,SAAS,CAACK,SAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMC,sBAAsB,GAAGL,cAA/B;AACA,UAAMM,QAAQ,GAAG,wBAAYH,SAAZ,CAAjB;AACA,QAAII,YAAyB,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAhC;AACAT,IAAAA,SAAS,CAACQ,YAAD,CAAT;;AACA,QAAI;AACF,aAAOE,cAAc,CAACF,YAAD,CAArB,EAAqC;AACnC,cAAMG,OAAO,GAAGC,eAAe,CAC7Bb,gBAD6B,EAE7BS,YAF6B,EAG7BF,sBAH6B,EAI7BJ,eAJ6B,EAK7BC,YAL6B,CAA/B;AAOAK,QAAAA,YAAY,GAAG,MAAMG,OAAO,CAACH,YAAD,CAA5B;AACA,cAAMK,sBAAaC,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeR,YAAf,CAA/B,CAAN;AACAR,QAAAA,SAAS,CAACQ,YAAD,CAAT;AACD;AACF,KAbD,CAaE,OAAOS,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCF,GAAjC;AACAjB,MAAAA,SAAS,CAAC,EACR,GAAGQ,YADK;AAERY,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,OAAO,EAAE,kBAA5B;AAAgDL,UAAAA;AAAhD;AAFC,OAAD,CAAT;AAID;AACF;AACF,CArCM;;;;AAuCP,MAAMP,cAAc,GAAIa,CAAD,IAAoBA,CAAC,CAACd,KAAF,KAAY,OAAZ,IAAuB,CAACc,CAAC,CAACH,KAArE;;AAEA,MAAMR,eAAe,GAAG,CACtBb,gBADsB,EAEtByB,WAFsB,EAGtBvB,cAHsB,EAItBC,eAJsB,EAKtBC,YALsB,KAML;AACjB,UAAQqB,WAAW,CAACf,KAApB;AACE,SAAK,UAAL;AACE,aAAO,8BAAgBR,cAAhB,EAAgCC,eAAhC,EAAiDC,YAAjD,CAAP;;AACF,SAAK,OAAL;AACA,SAAK,SAAL;AACE,aAAO,6BAAeF,cAAf,CAAP;;AACF,SAAK,YAAL;AACE,aAAO,gCAAkBF,gBAAlB,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBE,cAAnB,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBF,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAqBA,gBAArB,EAAuCE,cAAvC,CAAP;;AACF,SAAK,yBAAL;AACE,aAAO,yCAA2BF,gBAA3B,EAA6CE,cAA7C,CAAP;;AACF,SAAK,WAAL;AACA,SAAK,eAAL;AACE,aAAO,4BAAcA,cAAd,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBF,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAuBA,gBAAvB,EAAyCE,cAAzC,CAAP;;AACF,SAAK,UAAL;AACE,aAAO,8BAAgBA,cAAhB,CAAP;AAxBJ;AA0BD,CAjCD","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport deleteLocalHandler from './state-machine/handlers/DeleteLocalHandler';\nimport type { ClientState, ClientStateRetriever } from '..';\nimport startingHandler from './state-machine/handlers/StartingHandler';\nimport { getStoreKey } from './state-machine/utils';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s?: StoredState) => void,\n  getClientState: ClientStateRetriever,\n  safetyNetApiKey: string,\n  forceRestart: boolean = false\n) => {\n  const { accountId } = getClientState();\n\n  if (!accountId) {\n    setStatus(undefined);\n  } else {\n    const getClientStateRequired = getClientState as () => Required<ClientState>;\n    const storeKey = getStoreKey(accountId!);\n    let currentState: StoredState = { state: 'Starting' };\n    setStatus(currentState);\n    try {\n      while (shouldContinue(currentState)) {\n        const handler = getStateHandler(\n          abtTokensService,\n          currentState,\n          getClientStateRequired,\n          safetyNetApiKey,\n          forceRestart\n        );\n        currentState = await handler(currentState);\n        await AsyncStorage.setItem(storeKey, JSON.stringify(currentState));\n        setStatus(currentState);\n      }\n    } catch (err) {\n      console.warn('Unexpected error', err);\n      setStatus({\n        ...currentState,\n        error: { type: 'Unknown', message: 'Unexpected error', err },\n      });\n    }\n  }\n};\n\nconst shouldContinue = (s: StoredState) => s.state !== 'Valid' && !s.error;\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState,\n  getClientState: () => Required<ClientState>,\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Starting':\n      return startingHandler(getClientState, safetyNetApiKey, forceRestart);\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler(getClientState);\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'DeleteLocal':\n      return deleteLocalHandler(getClientState);\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService, getClientState);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService, getClientState);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler(getClientState);\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService, getClientState);\n    case 'AddToken':\n      return addTokenHandler(getClientState);\n  }\n};\n"]}