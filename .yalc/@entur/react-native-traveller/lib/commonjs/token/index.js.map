{"version":3,"sources":["index.ts"],"names":["startTokenStateMachine","abtTokensService","setStatus","safetyNetApiKey","forceRestart","accountId","undefined","storeKey","currentState","state","shouldContinue","handler","getStateHandler","AsyncStorage","setItem","JSON","stringify","err","console","warn","error","missingNetConnection","message","s","storedState"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,sBAAsB,GAAG,OACpCC,gBADoC,EAEpCC,SAFoC,EAGpCC,eAHoC,EAIpCC,YAAqB,GAAG,KAJY,EAKpCC,SALoC,KAMjC;AACH,MAAI,CAACA,SAAL,EAAgB;AACdH,IAAAA,SAAS,CAACI,SAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMC,QAAQ,GAAG,wBAAYF,SAAZ,CAAjB;AACA,QAAIG,YAAyB,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAhC;AACAP,IAAAA,SAAS,CAACM,YAAD,CAAT;;AACA,QAAI;AACF,aAAOE,cAAc,CAACF,YAAD,CAArB,EAAqC;AACnC,cAAMG,OAAO,GAAGC,eAAe,CAC7BX,gBAD6B,EAE7BO,YAF6B,EAG7BH,SAH6B,EAI7BF,eAJ6B,EAK7BC,YAL6B,CAA/B;AAOAI,QAAAA,YAAY,GAAG,MAAMG,OAAO,CAACH,YAAD,CAA5B;AACA,cAAMK,sBAAaC,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeR,YAAf,CAA/B,CAAN;AACAN,QAAAA,SAAS,CAACM,YAAD,CAAT;AACD;AACF,KAbD,CAaE,OAAOS,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,IAAR,CAAa,kBAAb,EAAiCF,GAAjC;AACAf,MAAAA,SAAS,CAAC,EACR,GAAGM,YADK;AAERY,QAAAA,KAAK,EAAE;AACLC,UAAAA,oBAAoB,EAAE,KADjB;AAELC,UAAAA,OAAO,EAAE,kBAFJ;AAGLL,UAAAA;AAHK;AAFC,OAAD,CAAT;AAQD;AACF;AACF,CAtCM;;;;AAwCP,MAAMP,cAAc,GAAIa,CAAD,IAAoBA,CAAC,CAACd,KAAF,KAAY,OAAZ,IAAuB,CAACc,CAAC,CAACH,KAArE;;AAEA,MAAMR,eAAe,GAAG,CACtBX,gBADsB,EAEtBuB,WAFsB,EAGtBnB,SAHsB,EAItBF,eAJsB,EAKtBC,YALsB,KAML;AACjB,UAAQoB,WAAW,CAACf,KAApB;AACE,SAAK,UAAL;AACE,aAAO,8BAAgBJ,SAAhB,EAA2BF,eAA3B,EAA4CC,YAA5C,CAAP;;AACF,SAAK,OAAL;AACA,SAAK,SAAL;AACE,aAAO,6BAAeC,SAAf,CAAP;;AACF,SAAK,YAAL;AACE,aAAO,gCAAkBJ,gBAAlB,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBI,SAAnB,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBJ,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAqBA,gBAArB,EAAuCI,SAAvC,CAAP;;AACF,SAAK,yBAAL;AACE,aAAO,yCAA2BJ,gBAA3B,EAA6CI,SAA7C,CAAP;;AACF,SAAK,WAAL;AACA,SAAK,eAAL;AACE,aAAO,4BAAcA,SAAd,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,iCAAmBJ,gBAAnB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,qCAAuBA,gBAAvB,EAAyCI,SAAzC,CAAP;;AACF,SAAK,UAAL;AACE,aAAO,8BAAgBA,SAAhB,CAAP;AAxBJ;AA0BD,CAjCD","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport deleteLocalHandler from './state-machine/handlers/DeleteLocalHandler';\nimport startingHandler from './state-machine/handlers/StartingHandler';\nimport { getStoreKey } from './state-machine/utils';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s?: StoredState) => void,\n  safetyNetApiKey: string,\n  forceRestart: boolean = false,\n  accountId?: string\n) => {\n  if (!accountId) {\n    setStatus(undefined);\n  } else {\n    const storeKey = getStoreKey(accountId!);\n    let currentState: StoredState = { state: 'Starting' };\n    setStatus(currentState);\n    try {\n      while (shouldContinue(currentState)) {\n        const handler = getStateHandler(\n          abtTokensService,\n          currentState,\n          accountId,\n          safetyNetApiKey,\n          forceRestart\n        );\n        currentState = await handler(currentState);\n        await AsyncStorage.setItem(storeKey, JSON.stringify(currentState));\n        setStatus(currentState);\n      }\n    } catch (err) {\n      console.warn('Unexpected error', err);\n      setStatus({\n        ...currentState,\n        error: {\n          missingNetConnection: false,\n          message: 'Unexpected error',\n          err,\n        },\n      });\n    }\n  }\n};\n\nconst shouldContinue = (s: StoredState) => s.state !== 'Valid' && !s.error;\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState,\n  accountId: string,\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Starting':\n      return startingHandler(accountId, safetyNetApiKey, forceRestart);\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler(accountId);\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'DeleteLocal':\n      return deleteLocalHandler(accountId);\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService, accountId);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService, accountId);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler(accountId);\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService, accountId);\n    case 'AddToken':\n      return addTokenHandler(accountId);\n  }\n};\n"]}