{"version":3,"sources":["index.ts"],"names":["requireAttestation","Platform","select","default","ios","AttestationType","isTokenValid","tokenValidityStart","tokenValidityEnd","now","Date","createAttestActivateAdd","fetcher","hosts","activateTokenRequest","tokenId","body","url","pto","response","method","initialTokenId","nonce","serverPublicKey","attestation","signaturePublicKey","encryptionPublicKey","attestationEncryptionKey","certificate","OS","attestationType","iOS_Device_Check","encryptedIosDeviceCheckData","attestationEncryptionEncryptedKey","SafetyNet","safetyNetJws","signaturePublicKeyAttestation","encryptionPublicKeyAttestation","Error","err","RequestError","console","error","createRenewToken","attestActivateAdd","renewTokenRequest","token","attestationEncryptionPublicKey","createInitToken","initTokenRequest"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { addToken, attestLegacy } from '../native';\nimport type { Token } from '../native/types';\nimport type { Fetch, Hosts } from '../config';\nimport type {\n  InitializeTokenRequest,\n  InitializeTokenResponse,\n  RenewTokenRequest,\n  RenewTokenResponse,\n  ActivateTokenRequest,\n  ActivateTokenResponse,\n} from './types';\nimport { RequestError } from '../fetcher';\n\nconst requireAttestation = Platform.select({\n  default: true,\n  ios: false,\n});\n\nenum AttestationType {\n  SafetyNet = 'SafetyNet',\n  iOS_Device_Check = 'iOS_Device_Check',\n  iOS_Device_Attestation = 'iOS_Device_Attestation',\n}\n\nexport function isTokenValid({\n  tokenValidityStart,\n  tokenValidityEnd,\n}: Token): boolean {\n  const now = Date.now();\n  return tokenValidityStart < now && now < tokenValidityEnd;\n}\n\nfunction createAttestActivateAdd(fetcher: Fetch, hosts: Hosts) {\n  const activateTokenRequest = async (\n    tokenId: string,\n    body: ActivateTokenRequest\n  ): Promise<ActivateTokenResponse> => {\n    const url = `${hosts.pto}/tokens/${tokenId}/activate`;\n\n    const response = await fetcher<ActivateTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (\n    initialTokenId: string,\n    nonce: string,\n    serverPublicKey: string\n  ): Promise<Token> => {\n    try {\n      const {\n        attestation,\n        signaturePublicKey,\n        encryptionPublicKey,\n        attestationEncryptionKey,\n      } = await attestLegacy(initialTokenId, nonce, serverPublicKey);\n\n      const {\n        certificate,\n        tokenId,\n        tokenValidityEnd,\n        tokenValidityStart,\n      } = await activateTokenRequest(initialTokenId, {\n        signaturePublicKey,\n        encryptionPublicKey,\n        attestation:\n          Platform.OS === 'ios'\n            ? {\n                attestationType: AttestationType.iOS_Device_Check,\n                encryptedIosDeviceCheckData: attestation,\n                attestationEncryptionEncryptedKey: attestationEncryptionKey,\n              }\n            : {\n                attestationType: AttestationType.SafetyNet,\n                safetyNetJws: attestation,\n                signaturePublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n                encryptionPublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n              },\n      });\n\n      if (tokenId !== initialTokenId)\n        throw Error(\n          `Activated token ${tokenId} does not match initial token ${initialTokenId}`\n        );\n\n      await addToken(\n        tokenId,\n        certificate,\n        tokenValidityStart,\n        tokenValidityEnd\n      );\n\n      return { tokenId, tokenValidityStart, tokenValidityEnd };\n    } catch (err) {\n      if (err instanceof RequestError) {\n        const { response } = err;\n        console.error(response.body);\n      } else {\n        console.error(err);\n      }\n      throw err;\n    }\n  };\n}\n\nexport function createRenewToken(fetcher: Fetch, hosts: Hosts) {\n  const attestActivateAdd = createAttestActivateAdd(fetcher, hosts);\n\n  const renewTokenRequest = async (\n    tokenId: string,\n    body: RenewTokenRequest\n  ): Promise<RenewTokenResponse> => {\n    const url = `${hosts.pto}/tokens/${tokenId}`;\n\n    const response = await fetcher<RenewTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (token: Token): Promise<Token> => {\n    const {\n      tokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await renewTokenRequest(token.tokenId, { requireAttestation });\n\n    return attestActivateAdd(tokenId, nonce, attestationEncryptionPublicKey);\n  };\n}\n\nexport function createInitToken(fetcher: Fetch, hosts: Hosts) {\n  const attestActivateAdd = createAttestActivateAdd(fetcher, hosts);\n\n  const initTokenRequest = async (\n    body: InitializeTokenRequest\n  ): Promise<InitializeTokenResponse> => {\n    const url = `${hosts.pto}/tokens`;\n\n    const response = await fetcher<InitializeTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (): Promise<Token> => {\n    const {\n      tokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await initTokenRequest({ requireAttestation });\n\n    return attestActivateAdd(tokenId, nonce, attestationEncryptionPublicKey);\n  };\n}\n"]}