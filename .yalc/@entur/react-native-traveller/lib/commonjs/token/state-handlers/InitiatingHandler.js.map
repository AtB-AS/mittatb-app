{"version":3,"sources":["InitiatingHandler.ts"],"names":["requireAttestation","Platform","select","default","ios","initiatingHandler","abtTokensService","tokenId","initialTokenId","nonce","attestationEncryptionPublicKey","initToken","activateTokenRequestBody","certificate","tokenValidityEnd","tokenValidityStart","activateToken","state","err","error","type","message"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEA,MAAMA,kBAAkB,GAAGC,sBAASC,MAAT,CAAgB;AACzCC,EAAAA,OAAO,EAAE,IADgC;AAEzCC,EAAAA,GAAG,EAAE;AAFoC,CAAhB,CAA3B;;AAKe,eAAeC,iBAAf,CACbC,gBADa,EAES;AACtB,MAAI;AACF,UAAM;AACJC,MAAAA,OAAO,EAAEC,cADL;AAEJC,MAAAA,KAFI;AAGJC,MAAAA;AAHI,QAIF,MAAMJ,gBAAgB,CAACK,SAAjB,CAA2B;AAAEX,MAAAA;AAAF,KAA3B,CAJV;AAKA,UAAMY,wBAAwB,GAAG,MAAM,yCACrCJ,cADqC,EAErCC,KAFqC,EAGrCC,8BAHqC,CAAvC;AAMA,UAAM;AACJG,MAAAA,WADI;AAEJN,MAAAA,OAFI;AAGJO,MAAAA,gBAHI;AAIJC,MAAAA;AAJI,QAKF,MAAMT,gBAAgB,CAACU,aAAjB,CACRR,cADQ,EAERI,wBAFQ,CALV;AAUA,qCAAqBJ,cAArB,EAAqCD,OAArC;AACA,UAAM,sBAASA,OAAT,EAAkBM,WAAlB,EAA+BE,kBAA/B,EAAmDD,gBAAnD,CAAN;AACA,WAAO;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD,GAzBD,CAyBE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLD,MAAAA,KAAK,EAAE,YADF;AAELE,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,SADD;AAELC,QAAAA,OAAO,EAAE,4BAFJ;AAGLH,QAAAA;AAHK;AAFF,KAAP;AAQD;AACF","sourcesContent":["import { getActivateTokenRequestBody } from '../attest';\nimport { addToken } from '../../native';\nimport type { AbtTokensService } from '../abt-tokens-service';\nimport { verifyCorrectTokenId } from './utils';\nimport type { TokenStatus } from '../types';\nimport { Platform } from 'react-native';\n\nconst requireAttestation = Platform.select({\n  default: true,\n  ios: false,\n});\n\nexport default async function initiatingHandler(\n  abtTokensService: AbtTokensService\n): Promise<TokenStatus> {\n  try {\n    const {\n      tokenId: initialTokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await abtTokensService.initToken({ requireAttestation });\n    const activateTokenRequestBody = await getActivateTokenRequestBody(\n      initialTokenId,\n      nonce,\n      attestationEncryptionPublicKey\n    );\n\n    const {\n      certificate,\n      tokenId,\n      tokenValidityEnd,\n      tokenValidityStart,\n    } = await abtTokensService.activateToken(\n      initialTokenId,\n      activateTokenRequestBody\n    );\n\n    verifyCorrectTokenId(initialTokenId, tokenId);\n    await addToken(tokenId, certificate, tokenValidityStart, tokenValidityEnd);\n    return { state: 'Valid' };\n  } catch (err) {\n    return {\n      state: 'Initiating',\n      error: {\n        type: 'Unknown',\n        message: 'Error initiating new token',\n        err,\n      },\n    };\n  }\n}\n"]}