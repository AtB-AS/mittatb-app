{"version":3,"sources":["RenewingHandler.ts"],"names":["renewingHandler","abtTokensService","existingToken","PayloadAction","addRemoveToken","tokenId","initialTokenId","nonce","attestationEncryptionPublicKey","renewToken","activateTokenRequestBody","certificate","tokenValidityEnd","tokenValidityStart","activateToken","state","err","error","type","message"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGe,eAAeA,eAAf,CACbC,gBADa,EAES;AACtB,MAAI;AACF,UAAMC,aAAa,GAAG,MAAM,4BAAe,CAACC,qBAAcC,cAAf,CAAf,CAA5B;AACA,UAAM;AACJC,MAAAA,OAAO,EAAEC,cADL;AAEJC,MAAAA,KAFI;AAGJC,MAAAA;AAHI,QAIF,MAAMP,gBAAgB,CAACQ,UAAjB,CAA4B;AAAEP,MAAAA;AAAF,KAA5B,CAJV;AAKA,UAAMQ,wBAAwB,GAAG,MAAM,yCACrCJ,cADqC,EAErCC,KAFqC,EAGrCC,8BAHqC,CAAvC;AAKA,UAAM;AACJG,MAAAA,WADI;AAEJN,MAAAA,OAFI;AAGJO,MAAAA,gBAHI;AAIJC,MAAAA;AAJI,QAKF,MAAMZ,gBAAgB,CAACa,aAAjB,CAA+BR,cAA/B,EAA+C,EACvD,GAAGI,wBADoD;AAEvDR,MAAAA;AAFuD,KAA/C,CALV;AAUA,qCAAqBI,cAArB,EAAqCD,OAArC;AAEA,UAAM,sBAASA,OAAT,EAAkBM,WAAlB,EAA+BE,kBAA/B,EAAmDD,gBAAnD,CAAN;AACA,WAAO;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD,GA1BD,CA0BE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLD,MAAAA,KAAK,EAAE,UADF;AAELE,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,SADD;AAELC,QAAAA,OAAO,EAAE,sBAFJ;AAGLH,QAAAA;AAHK;AAFF,KAAP;AAQD;AACF","sourcesContent":["import { getActivateTokenRequestBody } from '../attest';\nimport { addToken, getSecureToken } from '../../native';\nimport type { AbtTokensService } from '../abt-tokens-service';\nimport { PayloadAction } from '../../native/types';\nimport { verifyCorrectTokenId } from './utils';\nimport type { TokenStatus } from '../types';\n\nexport default async function renewingHandler(\n  abtTokensService: AbtTokensService\n): Promise<TokenStatus> {\n  try {\n    const existingToken = await getSecureToken([PayloadAction.addRemoveToken]);\n    const {\n      tokenId: initialTokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await abtTokensService.renewToken({ existingToken });\n    const activateTokenRequestBody = await getActivateTokenRequestBody(\n      initialTokenId,\n      nonce,\n      attestationEncryptionPublicKey\n    );\n    const {\n      certificate,\n      tokenId,\n      tokenValidityEnd,\n      tokenValidityStart,\n    } = await abtTokensService.activateToken(initialTokenId, {\n      ...activateTokenRequestBody,\n      existingToken,\n    });\n\n    verifyCorrectTokenId(initialTokenId, tokenId);\n\n    await addToken(tokenId, certificate, tokenValidityStart, tokenValidityEnd);\n    return { state: 'Valid' };\n  } catch (err) {\n    return {\n      state: 'Renewing',\n      error: {\n        type: 'Unknown',\n        message: 'Error renewing token',\n        err,\n      },\n    };\n  }\n}\n"]}