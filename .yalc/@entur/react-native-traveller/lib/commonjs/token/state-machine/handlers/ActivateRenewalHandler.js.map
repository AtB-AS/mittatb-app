{"version":3,"sources":["ActivateRenewalHandler.ts"],"names":["activateRenewalHandler","abtTokensService","s","accountId","oldTokenId","tokenId","state","logger","info","undefined","signedToken","PayloadAction","addRemoveToken","activateTokenResponse","activateToken","attestationData","activatedData","err","response","status"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEe,SAASA,sBAAT,CACbC,gBADa,EAEC;AACd,SAAO,yCAAoB,CAAC,iBAAD,CAApB,EAAyC,MAAOC,CAAP,IAAa;AAC3D,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA,OAAzB;AAAkCC,MAAAA;AAAlC,QAA4CJ,CAAlD;;AAEAK,mBAAOC,IAAP,CAAY,2BAAZ,EAAyCC,SAAzC,EAAoD;AAClDN,MAAAA,SADkD;AAElDC,MAAAA,UAFkD;AAGlDC,MAAAA,OAHkD;AAIlDC,MAAAA;AAJkD,KAApD;;AAOA,UAAMI,WAAW,GAAG,MAAM,4BAAeP,SAAf,EAA0BC,UAA1B,EAAsC,IAAtC,EAA4C,CACpEO,qBAAcC,cADsD,CAA5C,CAA1B;;AAIA,QAAI;AACF,YAAMC,qBAAqB,GAAG,MAAMZ,gBAAgB,CAACa,aAAjB,CAClCT,OADkC,EAElCH,CAAC,CAACa,eAFgC,EAGlCL,WAHkC,CAApC;AAKA,uCAAqBL,OAArB,EAA8BQ,qBAAqB,CAACR,OAApD;AAEA,aAAO;AACLF,QAAAA,SAAS,EAAEA,SADN;AAELG,QAAAA,KAAK,EAAE,UAFF;AAGLD,QAAAA,OAAO,EAAEH,CAAC,CAACG,OAHN;AAILW,QAAAA,aAAa,EAAEH;AAJV,OAAP;AAMD,KAdD,CAcE,OAAOI,GAAP,EAAiB;AAAA;;AACjB,UAAI,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,6BAAAA,GAAG,CAAEC,QAAL,gEAAeC,MAAf,MAA0B,GAA9B,EAAmC;AACjC;AACA,eAAO;AACLhB,UAAAA,SAAS,EAAEA,SADN;AAELE,UAAAA,OAAO,EAAEA,OAFJ;AAGLC,UAAAA,KAAK,EAAE;AAHF,SAAP;AAKD;;AACD,YAAMW,GAAN;AACD;AACF,GAvCM,CAAP;AAwCD","sourcesContent":["import { getSecureToken } from '../../../native';\nimport type { AbtTokensService } from '../../abt-tokens-service';\nimport { PayloadAction } from '../../../native/types';\nimport { verifyCorrectTokenId } from '../utils';\nimport { StateHandler, stateHandlerFactory } from '../HandlerFactory';\nimport { logger } from '../../../logger';\n\nexport default function activateRenewalHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['ActivateRenewal'], async (s) => {\n    const { accountId, oldTokenId, tokenId, state } = s;\n\n    logger.info('mobiletoken_status_change', undefined, {\n      accountId,\n      oldTokenId,\n      tokenId,\n      state,\n    });\n\n    const signedToken = await getSecureToken(accountId, oldTokenId, true, [\n      PayloadAction.addRemoveToken,\n    ]);\n\n    try {\n      const activateTokenResponse = await abtTokensService.activateToken(\n        tokenId,\n        s.attestationData,\n        signedToken\n      );\n      verifyCorrectTokenId(tokenId, activateTokenResponse.tokenId);\n\n      return {\n        accountId: accountId,\n        state: 'AddToken',\n        tokenId: s.tokenId,\n        activatedData: activateTokenResponse,\n      };\n    } catch (err: any) {\n      if (err?.response?.status === 409) {\n        // The token has already been renewed. May happen if retrying after timeout.\n        return {\n          accountId: accountId,\n          tokenId: tokenId,\n          state: 'GettingTokenCertificate',\n        };\n      }\n      throw err;\n    }\n  });\n}\n"]}