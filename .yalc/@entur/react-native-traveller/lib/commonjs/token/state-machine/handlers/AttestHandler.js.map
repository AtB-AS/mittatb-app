{"version":3,"sources":["AttestHandler.ts"],"names":["attestHandler","accountId","s","tokenId","nonce","attestationEncryptionPublicKey","initiatedData","activateTokenRequestBody","state","attestationData"],"mappings":";;;;;;;AAAA;;AAEA;;AAEe,SAASA,aAAT,CAAuBC,SAAvB,EAAwD;AACrE,SAAO,yCAAoB,CAAC,WAAD,EAAc,eAAd,CAApB,EAAoD,MAAOC,CAAP,IAAa;AACtE,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAAqDH,CAAC,CAACI,aAA7D;AACA,UAAMC,wBAAwB,GAAG,MAAM,yCACrCN,SADqC,EAErCE,OAFqC,EAGrCC,KAHqC,EAIrCC,8BAJqC,CAAvC;AAOA,WAAO;AACLG,MAAAA,KAAK,EAAEN,CAAC,CAACM,KAAF,KAAY,WAAZ,GAA0B,aAA1B,GAA0C,iBAD5C;AAELL,MAAAA,OAAO,EAAEA,OAFJ;AAGLM,MAAAA,eAAe,EAAEF;AAHZ,KAAP;AAKD,GAdM,CAAP;AAeD","sourcesContent":["import { getActivateTokenRequestBody } from '../../attest';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\n\nexport default function attestHandler(accountId: string): StateHandler {\n  return stateHandlerFactory(['AttestNew', 'AttestRenewal'], async (s) => {\n    const { tokenId, nonce, attestationEncryptionPublicKey } = s.initiatedData;\n    const activateTokenRequestBody = await getActivateTokenRequestBody(\n      accountId,\n      tokenId,\n      nonce,\n      attestationEncryptionPublicKey\n    );\n\n    return {\n      state: s.state === 'AttestNew' ? 'ActivateNew' : 'ActivateRenewal',\n      tokenId: tokenId,\n      attestationData: activateTokenRequestBody,\n    };\n  });\n}\n"]}