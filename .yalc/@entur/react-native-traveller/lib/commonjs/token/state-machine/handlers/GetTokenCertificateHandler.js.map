{"version":3,"sources":["GetTokenCertificateHandler.ts"],"names":["getTokenCertificateHandler","abtTokensService","accountId","_","signedToken","PayloadAction","addRemoveToken","tokenCertificateResponse","getTokenCertificate","state","activatedData"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEe,SAASA,0BAAT,CACbC,gBADa,EAEbC,SAFa,EAGC;AACd,SAAO,yCAAoB,CAAC,yBAAD,CAApB,EAAiD,MAAOC,CAAP,IAAa;AACnE,UAAMC,WAAW,GAAG,MAAM,4BAAeF,SAAf,EAA0B,CAClDG,qBAAcC,cADoC,CAA1B,CAA1B;AAGA,UAAMC,wBAAwB,GAAG,MAAMN,gBAAgB,CAACO,mBAAjB,CACrCJ,WADqC,CAAvC;AAGA,WAAO;AAAEK,MAAAA,KAAK,EAAE,UAAT;AAAqBC,MAAAA,aAAa,EAAEH;AAApC,KAAP;AACD,GARM,CAAP;AASD","sourcesContent":["import { getSecureToken } from '../../../native';\nimport type { AbtTokensService } from '../../abt-tokens-service';\nimport { PayloadAction } from '../../../native/types';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\n\nexport default function getTokenCertificateHandler(\n  abtTokensService: AbtTokensService,\n  accountId: string\n): StateHandler {\n  return stateHandlerFactory(['GettingTokenCertificate'], async (_) => {\n    const signedToken = await getSecureToken(accountId, [\n      PayloadAction.addRemoveToken,\n    ]);\n    const tokenCertificateResponse = await abtTokensService.getTokenCertificate(\n      signedToken\n    );\n    return { state: 'AddToken', activatedData: tokenCertificateResponse };\n  });\n}\n"]}