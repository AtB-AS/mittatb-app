{"version":3,"sources":["GetTokenCertificateHandler.ts"],"names":["getTokenCertificateHandler","abtTokensService","_","signedToken","PayloadAction","addRemoveToken","tokenCertificateResponse","getTokenCertificate","state","activatedData"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEe,SAASA,0BAAT,CACbC,gBADa,EAEC;AACd,SAAO,yCAAoB,CAAC,yBAAD,CAApB,EAAiD,MAAOC,CAAP,IAAa;AACnE,UAAMC,WAAW,GAAG,MAAM,4BAAe,CAACC,qBAAcC,cAAf,CAAf,CAA1B;AACA,UAAMC,wBAAwB,GAAG,MAAML,gBAAgB,CAACM,mBAAjB,CACrCJ,WADqC,CAAvC;AAGA,WAAO;AAAEK,MAAAA,KAAK,EAAE,UAAT;AAAqBC,MAAAA,aAAa,EAAEH;AAApC,KAAP;AACD,GANM,CAAP;AAOD","sourcesContent":["import { getSecureToken } from '../../../native';\nimport type { AbtTokensService } from '../../abt-tokens-service';\nimport { PayloadAction } from '../../../native/types';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\n\nexport default function getTokenCertificateHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['GettingTokenCertificate'], async (_) => {\n    const signedToken = await getSecureToken([PayloadAction.addRemoveToken]);\n    const tokenCertificateResponse = await abtTokensService.getTokenCertificate(\n      signedToken\n    );\n    return { state: 'AddToken', activatedData: tokenCertificateResponse };\n  });\n}\n"]}