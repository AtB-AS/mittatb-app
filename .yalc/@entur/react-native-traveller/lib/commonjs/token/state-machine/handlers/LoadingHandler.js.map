{"version":3,"sources":["LoadingHandler.ts"],"names":["secondsIn48Hours","loadingHandler","s","token","accountId","state","tokenNeedsRenewal","tokenId","twentyPercentOfValidityPeriod","tokenValidityEnd","tokenValidityStart","timeLeftWhenRenewalNecessary","Math","min","renewalCutoffTime","nowSeconds","Date","now"],"mappings":";;;;;;;AAAA;;AAEA;;AAGA,MAAMA,gBAAgB,GAAG,KAAK,EAAL,GAAU,EAAnC;;AAEe,SAASC,cAAT,GAAwC;AACrD,SAAO,yCAAoB,CAAC,SAAD,EAAY,OAAZ,CAApB,EAA0C,MAAOC,CAAP,IAAa;AAC5D,UAAMC,KAAK,GAAG,MAAM,sBAASD,CAAC,CAACE,SAAX,CAApB;;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAO;AACLC,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID,KALD,MAKO;AACL,aAAOC,iBAAiB,CAACH,KAAD,CAAjB,GACH;AACEC,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADf;AAEEG,QAAAA,OAAO,EAAEJ,KAAK,CAACI,OAFjB;AAGEF,QAAAA,KAAK,EAAE;AAHT,OADG,GAMH;AACED,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADf;AAEEC,QAAAA,KAAK,EAAE,YAFT;AAGEE,QAAAA,OAAO,EAAEJ,KAAK,CAACI;AAHjB,OANJ;AAWD;AACF,GApBM,CAAP;AAqBD;AAED;AACA;AACA;AACA;AACA;;;AACA,MAAMD,iBAAiB,GAAIH,KAAD,IAAkB;AAC1C,QAAMK,6BAA6B,GACjC,CAACL,KAAK,CAACM,gBAAN,GAAyBN,KAAK,CAACO,kBAAhC,IAAsD,GADxD;AAEA,QAAMC,4BAA4B,GAAGC,IAAI,CAACC,GAAL,CACnCb,gBADmC,EAEnCQ,6BAFmC,CAArC;AAIA,QAAMM,iBAAiB,GACrBX,KAAK,CAACM,gBAAN,GAAyBE,4BAD3B;AAEA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAhC;AACA,SAAOF,UAAU,GAAGD,iBAApB;AACD,CAXD","sourcesContent":["import { getToken } from '../../../native';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport type { Token } from '@entur/react-native-traveller';\n\nconst secondsIn48Hours = 48 * 60 * 60;\n\nexport default function loadingHandler(): StateHandler {\n  return stateHandlerFactory(['Loading', 'Valid'], async (s) => {\n    const token = await getToken(s.accountId);\n    if (!token) {\n      return {\n        accountId: s.accountId,\n        state: 'InitiateNew',\n      };\n    } else {\n      return tokenNeedsRenewal(token)\n        ? {\n            accountId: s.accountId,\n            tokenId: token.tokenId,\n            state: 'InitiateRenewal',\n          }\n        : {\n            accountId: s.accountId,\n            state: 'Validating',\n            tokenId: token.tokenId,\n          };\n    }\n  });\n}\n\n/**\n * Whether the token needs renewal or not. The token needs renewal if the\n * remaining validity period is less than 48 hours and less than 20% of the\n * total validity time.\n */\nconst tokenNeedsRenewal = (token: Token) => {\n  const twentyPercentOfValidityPeriod =\n    (token.tokenValidityEnd - token.tokenValidityStart) * 0.2;\n  const timeLeftWhenRenewalNecessary = Math.min(\n    secondsIn48Hours,\n    twentyPercentOfValidityPeriod\n  );\n  const renewalCutoffTime =\n    token.tokenValidityEnd - timeLeftWhenRenewalNecessary;\n  const nowSeconds = Date.now() / 1000;\n  return nowSeconds > renewalCutoffTime;\n};\n"]}