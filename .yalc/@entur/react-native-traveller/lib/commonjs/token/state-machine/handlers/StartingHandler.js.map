{"version":3,"sources":["StartingHandler.ts"],"names":["startingHandler","safetyNetApiKey","forceRestart","s","accountId","state","result","logger","info","undefined","attestationSupport","storeKey","savedStateString","AsyncStorage","getItem","savedState","JSON","parse","error"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEe,SAASA,eAAT,CACbC,eADa,EAEbC,YAFa,EAGC;AACd,SAAO,yCAAoB,CAAC,UAAD,CAApB,EAAkC,MAAOC,CAAP,IAAa;AACpD,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAuBF,CAA7B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAa,MAAM,oCAAzB;;AACAC,mBAAOC,IAAP,CAAY,2BAAZ,EAAyCC,SAAzC,EAAoD;AAClDL,MAAAA,SADkD;AAElDM,MAAAA,kBAAkB,EAAEJ,MAF8B;AAGlDD,MAAAA;AAHkD,KAApD;;AAMA,QAAIC,MAAM,KAAK,WAAf,EAA4B;AAC1B,aAAO;AAAEF,QAAAA,SAAF;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAAP;AACD;;AAED,UAAMM,QAAQ,GAAG,wBAAYP,SAAZ,CAAjB;AACA,UAAM,mBAAYH,eAAZ,CAAN;;AAEA,QAAIC,YAAJ,EAAkB;AAChBK,qBAAOC,IAAP,CAAY,4BAAZ,EAA0CC,SAA1C,EAAqD;AAAEL,QAAAA;AAAF,OAArD;;AACA,aAAO;AACLA,QAAAA,SADK;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,UAAMO,gBAAgB,GAAG,MAAMC,sBAAaC,OAAb,CAAqBH,QAArB,CAA/B;;AAEA,QAAI,CAACC,gBAAL,EAAuB;AACrBL,qBAAOC,IAAP,CAAY,+BAAZ,EAA6CC,SAA7C,EAAwD;AAAEL,QAAAA;AAAF,OAAxD;;AACA,aAAO;AACLA,QAAAA,SADK;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,UAAMU,UAAuB,GAAGC,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAhC;;AAEAL,mBAAOC,IAAP,CAAY,0BAAZ,EAAwCC,SAAxC,EAAmD;AACjDJ,MAAAA,KAAK,EAAEU,UAAU,CAACV,KAD+B;AAEjDD,MAAAA,SAAS,EAAEW,UAAU,CAACX;AAF2B,KAAnD;;AAKA,QAAIW,UAAU,CAACV,KAAX,KAAqB,OAAzB,EAAkC;AAChC,aAAO;AACLD,QAAAA,SADK;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,WAAO,EACL,GAAGU,UADE;AAELG,MAAAA,KAAK,EAAET;AAFF,KAAP;AAID,GApDM,CAAP;AAqDD","sourcesContent":["import type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getStoreKey } from '../utils';\nimport { getAttestationSupport, start as startNative } from '../../../native';\nimport type { StoredState } from 'src/token/types';\nimport { logger } from '../../../logger';\n\nexport default function startingHandler(\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler {\n  return stateHandlerFactory(['Starting'], async (s) => {\n    const { accountId, state } = s;\n    const { result } = await getAttestationSupport();\n    logger.info('mobiletoken_status_change', undefined, {\n      accountId,\n      attestationSupport: result,\n      state,\n    });\n\n    if (result !== 'SUPPORTED') {\n      return { accountId, state: 'NotSupported' };\n    }\n\n    const storeKey = getStoreKey(accountId);\n    await startNative(safetyNetApiKey);\n\n    if (forceRestart) {\n      logger.info('mobiletoken_forced_restart', undefined, { accountId });\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    const savedStateString = await AsyncStorage.getItem(storeKey);\n\n    if (!savedStateString) {\n      logger.info('mobiletoken_no_existing_state', undefined, { accountId });\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    const savedState: StoredState = JSON.parse(savedStateString);\n\n    logger.info('mobiletoken_loaded_state', undefined, {\n      state: savedState.state,\n      accountId: savedState.accountId,\n    });\n\n    if (savedState.state === 'Valid') {\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    return {\n      ...savedState,\n      error: undefined,\n    };\n  });\n}\n"]}