{"version":3,"sources":["StartingHandler.ts"],"names":["startingHandler","safetyNetApiKey","forceRestart","s","accountId","result","logger","info","undefined","attestationSupport","state","storeKey","savedStateString","AsyncStorage","getItem","savedState","JSON","parse","error"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEe,SAASA,eAAT,CACbC,eADa,EAEbC,YAFa,EAGC;AACd,SAAO,yCAAoB,CAAC,UAAD,CAApB,EAAkC,MAAOC,CAAP,IAAa;AACpD,UAAM;AAAEC,MAAAA;AAAF,QAAgBD,CAAtB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAa,MAAM,oCAAzB;;AACAC,mBAAOC,IAAP,CAAY,UAAZ,EAAwBC,SAAxB,EAAmC;AACjCJ,MAAAA,SADiC;AAEjCK,MAAAA,kBAAkB,EAAEJ;AAFa,KAAnC;;AAKA,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B,aAAO;AAAED,QAAAA,SAAF;AAAaM,QAAAA,KAAK,EAAE;AAApB,OAAP;AACD;;AAED,UAAMC,QAAQ,GAAG,wBAAYP,SAAZ,CAAjB;AACA,UAAM,mBAAYH,eAAZ,CAAN;;AAEA,QAAIC,YAAJ,EAAkB;AAChBI,qBAAOC,IAAP,CAAY,eAAZ,EAA6BC,SAA7B,EAAwC;AAAEJ,QAAAA;AAAF,OAAxC;;AACA,aAAO;AACLA,QAAAA,SADK;AAELM,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,UAAME,gBAAgB,GAAG,MAAMC,sBAAaC,OAAb,CAAqBH,QAArB,CAA/B;;AAEA,QAAI,CAACC,gBAAL,EAAuB;AACrBN,qBAAOC,IAAP,CAAY,gBAAZ,EAA8BC,SAA9B;;AACA,aAAO;AACLJ,QAAAA,SADK;AAELM,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,UAAMK,UAAuB,GAAGC,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAhC;;AAEAN,mBAAOC,IAAP,CAAY,aAAZ,EAA2BC,SAA3B,EAAsC;AACpCE,MAAAA,KAAK,EAAEK,UAAU,CAACL,KADkB;AAEpCN,MAAAA,SAAS,EAAEW,UAAU,CAACX;AAFc,KAAtC;;AAKA,QAAIW,UAAU,CAACL,KAAX,KAAqB,OAAzB,EAAkC;AAChC,aAAO;AACLN,QAAAA,SADK;AAELM,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,WAAO,EACL,GAAGK,UADE;AAELG,MAAAA,KAAK,EAAEV;AAFF,KAAP;AAID,GAnDM,CAAP;AAoDD","sourcesContent":["import type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getStoreKey } from '../utils';\nimport { getAttestationSupport, start as startNative } from '../../../native';\nimport type { StoredState } from 'src/token/types';\nimport { logger } from '../../../logger';\n\nexport default function startingHandler(\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler {\n  return stateHandlerFactory(['Starting'], async (s) => {\n    const { accountId } = s;\n    const { result } = await getAttestationSupport();\n    logger.info('starting', undefined, {\n      accountId,\n      attestationSupport: result,\n    });\n\n    if (result !== 'SUPPORTED') {\n      return { accountId, state: 'NotSupported' };\n    }\n\n    const storeKey = getStoreKey(accountId);\n    await startNative(safetyNetApiKey);\n\n    if (forceRestart) {\n      logger.info('force_restart', undefined, { accountId });\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    const savedStateString = await AsyncStorage.getItem(storeKey);\n\n    if (!savedStateString) {\n      logger.info('no_saved_state', undefined);\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    const savedState: StoredState = JSON.parse(savedStateString);\n\n    logger.info('saved_state', undefined, {\n      state: savedState.state,\n      accountId: savedState.accountId,\n    });\n\n    if (savedState.state === 'Valid') {\n      return {\n        accountId,\n        state: 'Loading',\n      };\n    }\n\n    return {\n      ...savedState,\n      error: undefined,\n    };\n  });\n}\n"]}