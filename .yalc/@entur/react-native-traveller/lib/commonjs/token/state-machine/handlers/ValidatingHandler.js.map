{"version":3,"sources":["ValidatingHandler.ts"],"names":["validatingHandler","abtTokensService","s","signedToken","accountId","tokenId","PayloadAction","getFarecontracts","validationResponse","validateToken","state"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEe,SAASA,iBAAT,CACbC,gBADa,EAEC;AACd,SAAO,yCAAoB,CAAC,YAAD,CAApB,EAAoC,MAAOC,CAAP,IAAa;AACtD,UAAMC,WAAW,GAAG,MAAM,4BAAeD,CAAC,CAACE,SAAjB,EAA4BF,CAAC,CAACG,OAA9B,EAAuC,IAAvC,EAA6C,CACrEC,qBAAcC,gBADuD,CAA7C,CAA1B;AAGA,UAAMC,kBAAkB,GAAG,MAAMP,gBAAgB,CAACQ,aAAjB,CAC/BP,CAAC,CAACG,OAD6B,EAE/BF,WAF+B,CAAjC;;AAKA,YAAQK,kBAAkB,CAACE,KAA3B;AACE,WAAK,OAAL;AACE,eAAO;AACLN,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELM,UAAAA,KAAK,EAAE,OAFF;AAGLL,UAAAA,OAAO,EAAEH,CAAC,CAACG;AAHN,SAAP;;AAKF,WAAK,UAAL;AACA,WAAK,kBAAL;AACE,eAAO;AACLD,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELM,UAAAA,KAAK,EAAE;AAFF,SAAP;;AAIF,WAAK,cAAL;AACE,eAAO;AACLN,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELC,UAAAA,OAAO,EAAEH,CAAC,CAACG,OAFN;AAGLK,UAAAA,KAAK,EAAE;AAHF,SAAP;AAdJ;AAoBD,GA7BM,CAAP;AA8BD","sourcesContent":["import type { AbtTokensService } from '../../abt-tokens-service';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport { getSecureToken } from '../../../native';\nimport { PayloadAction } from '../../../native/types';\n\nexport default function validatingHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['Validating'], async (s) => {\n    const signedToken = await getSecureToken(s.accountId, s.tokenId, true, [\n      PayloadAction.getFarecontracts,\n    ]);\n    const validationResponse = await abtTokensService.validateToken(\n      s.tokenId,\n      signedToken\n    );\n\n    switch (validationResponse.state) {\n      case 'Valid':\n        return {\n          accountId: s.accountId,\n          state: 'Valid',\n          tokenId: s.tokenId,\n        };\n      case 'NotFound':\n      case 'NeedsReplacement':\n        return {\n          accountId: s.accountId,\n          state: 'DeleteLocal',\n        };\n      case 'NeedsRenewal':\n        return {\n          accountId: s.accountId,\n          tokenId: s.tokenId,\n          state: 'InitiateRenewal',\n        };\n    }\n  });\n}\n"]}