{"version":3,"sources":["ValidatingHandler.ts"],"names":["validatingHandler","abtTokensService","s","signedToken","accountId","token","tokenId","PayloadAction","getFarecontracts","validationResponse","validateToken","state","tokens","listTokens","isInspectable"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA;;AAEe,SAASA,iBAAT,CACbC,gBADa,EAEC;AACd,SAAO,yCAAoB,CAAC,YAAD,CAApB,EAAoC,MAAOC,CAAP,IAAa;AACtD,UAAMC,WAAW,GAAG,MAAM,4BACxBD,CAAC,CAACE,SADsB,EAExBF,CAAC,CAACG,KAAF,CAAQC,OAFgB,EAGxB,IAHwB,EAIxB,CAACC,qBAAcC,gBAAf,CAJwB,CAA1B;AAMA,UAAMC,kBAAkB,GAAG,MAAMR,gBAAgB,CAACS,aAAjB,CAC/BR,CAAC,CAACG,KAAF,CAAQC,OADuB,EAE/BH,WAF+B,CAAjC;;AAKA,YAAQM,kBAAkB,CAACE,KAA3B;AACE,WAAK,OAAL;AACE,cAAMC,MAA0B,GAAG,MAAMX,gBAAgB,CAACY,UAAjB,EAAzC;AACA,eAAO;AACLT,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELO,UAAAA,KAAK,EAAE,OAFF;AAGLG,UAAAA,aAAa,EAAE,+BAAmBF,MAAnB,EAA2BV,CAAC,CAACG,KAAF,CAAQC,OAAnC;AAHV,SAAP;;AAKF,WAAK,UAAL;AACE,eAAO;AACLF,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELO,UAAAA,KAAK,EAAE;AAFF,SAAP;;AAIF,WAAK,cAAL;AACE,eAAO;AACLP,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELE,UAAAA,OAAO,EAAEJ,CAAC,CAACG,KAAF,CAAQC,OAFZ;AAGLK,UAAAA,KAAK,EAAE;AAHF,SAAP;AAdJ;AAoBD,GAhCM,CAAP;AAiCD","sourcesContent":["import type { AbtTokensService } from '../../abt-tokens-service';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport { getSecureToken } from '../../../native';\nimport { PayloadAction } from '../../../native/types';\nimport type { ListTokensResponse } from '../../types';\nimport { isTokenInspectable } from '../utils';\n\nexport default function validatingHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['Validating'], async (s) => {\n    const signedToken = await getSecureToken(\n      s.accountId,\n      s.token.tokenId,\n      true,\n      [PayloadAction.getFarecontracts]\n    );\n    const validationResponse = await abtTokensService.validateToken(\n      s.token.tokenId,\n      signedToken\n    );\n\n    switch (validationResponse.state) {\n      case 'Valid':\n        const tokens: ListTokensResponse = await abtTokensService.listTokens();\n        return {\n          accountId: s.accountId,\n          state: 'Valid',\n          isInspectable: isTokenInspectable(tokens, s.token.tokenId),\n        };\n      case 'NotFound':\n        return {\n          accountId: s.accountId,\n          state: 'DeleteLocal',\n        };\n      case 'NeedsRenewal':\n        return {\n          accountId: s.accountId,\n          tokenId: s.token.tokenId,\n          state: 'InitiateRenewal',\n        };\n    }\n  });\n}\n"]}