{"version":3,"sources":["index.ts"],"names":["getConfigFromInitialConfig","startTokenStateMachine","createFetcher","createAbtTokensService","getSecureToken","PayloadAction","RequestError","createClient","setStatus","initialState","initialConfig","config","fetcher","abtTokensService","hosts","toVisualState","storedState","error","includes","state","setStatusWrapper","visualState","clientState","clientStateRetriever","switch","accountId","retry","forceRestart","generateQrCode","ticketInspection"],"mappings":"AAAA,SAASA,0BAAT,QAA0D,UAA1D;AACA,SAASC,sBAAT,QAAuC,SAAvC;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAGA,SAASC,YAAT,QAA6B,WAA7B;AASA,eAAe,SAASC,YAAT,CACbC,SADa,EAEbC,YAFa,EAGbC,aAHa,EAIb;AACA,QAAMC,MAAM,GAAGX,0BAA0B,CAACU,aAAD,CAAzC;AACA,QAAME,OAAO,GAAGV,aAAa,CAACS,MAAD,CAA7B;AACA,QAAME,gBAAgB,GAAGV,sBAAsB,CAACS,OAAD,EAAUD,MAAM,CAACG,KAAjB,CAA/C;;AAEA,QAAMC,aAAa,GAAIC,WAAD,IAA2C;AAC/D,QAAIA,WAAW,CAACC,KAAhB,EAAuB;AACrB,aAAO,OAAP;AACD,KAFD,MAEO,IAAI,CAAC,OAAD,EAAU,YAAV,EAAwBC,QAAxB,CAAiCF,WAAW,CAACG,KAA7C,CAAJ,EAAyD;AAC9D,aAAO,OAAP;AACD,KAFM,MAEA;AACL,aAAO,SAAP;AACD;AACF,GARD;;AAUA,QAAMC,gBAAgB,GAAIJ,WAAD,IAA8B;AACrDR,IAAAA,SAAS,CAAC;AACRW,MAAAA,KAAK,EAAEH,WAAW,CAACG,KADX;AAERF,MAAAA,KAAK,EAAED,WAAW,CAACC,KAFX;AAGRI,MAAAA,WAAW,EAAEN,aAAa,CAACC,WAAD;AAHlB,KAAD,CAAT;AAKD,GAND;;AAQA,MAAIM,WAAW,GAAG,EAAE,GAAGb;AAAL,GAAlB;;AAEA,WAASc,oBAAT,GAAgC;AAC9B,WAAOD,WAAP;AACD;;AAEDrB,EAAAA,sBAAsB,CACpBY,gBADoB,EAEpBO,gBAFoB,EAGpBG,oBAHoB,CAAtB;AAMA,SAAO;AACLC,IAAAA,MAAM,CAACC,SAAD,EAAoB;AACxBH,MAAAA,WAAW,GAAG,EAAE,GAAGA,WAAL;AAAkBG,QAAAA;AAAlB,OAAd;AACAxB,MAAAA,sBAAsB,CACpBY,gBADoB,EAEpBO,gBAFoB,EAGpBG,oBAHoB,EAIpB,KAJoB,CAAtB;AAMD,KATI;;AAULG,IAAAA,KAAK,EAAGC,YAAD,IAA2B;AAChC1B,MAAAA,sBAAsB,CACpBY,gBADoB,EAEpBO,gBAFoB,EAGpBG,oBAHoB,EAIpBI,YAJoB,CAAtB,CADgC,CAM7B;AACJ,KAjBI;AAkBLC,IAAAA,cAAc,EAAE,MAAM;AACpB,YAAM;AAAEH,QAAAA;AAAF,UAAgBH,WAAtB;AACA,aAAOlB,cAAc,CAACqB,SAAD,EAAY,CAACpB,aAAa,CAACwB,gBAAf,CAAZ,CAArB;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import { getConfigFromInitialConfig, InitialConfig } from './config';\nimport { startTokenStateMachine } from './token';\nimport { createFetcher } from './fetcher';\nimport { createAbtTokensService } from './token/abt-tokens-service';\nimport type { StoredState, TokenStatus, VisualState } from './token/types';\nimport { getSecureToken } from './native';\nimport { PayloadAction } from './native/types';\n\nexport type { Token } from './native/types';\nexport { RequestError } from './fetcher';\nexport type { Fetch, ApiResponse, ApiRequest } from './config';\n\nexport type ClientState = {\n  accountId: string;\n};\n\nexport type ClientStateRetriever = () => ClientState;\n\nexport default function createClient(\n  setStatus: (status: TokenStatus) => void,\n  initialState: ClientState,\n  initialConfig?: InitialConfig\n) {\n  const config = getConfigFromInitialConfig(initialConfig);\n  const fetcher = createFetcher(config);\n  const abtTokensService = createAbtTokensService(fetcher, config.hosts);\n\n  const toVisualState = (storedState: StoredState): VisualState => {\n    if (storedState.error) {\n      return 'Error';\n    } else if (['Valid', 'Validating'].includes(storedState.state)) {\n      return 'Token';\n    } else {\n      return 'Loading';\n    }\n  };\n\n  const setStatusWrapper = (storedState: StoredState) => {\n    setStatus({\n      state: storedState.state,\n      error: storedState.error,\n      visualState: toVisualState(storedState),\n    });\n  };\n\n  let clientState = { ...initialState };\n\n  function clientStateRetriever() {\n    return clientState;\n  }\n\n  startTokenStateMachine(\n    abtTokensService,\n    setStatusWrapper,\n    clientStateRetriever\n  );\n\n  return {\n    switch(accountId: string) {\n      clientState = { ...clientState, accountId };\n      startTokenStateMachine(\n        abtTokensService,\n        setStatusWrapper,\n        clientStateRetriever,\n        false\n      );\n    },\n    retry: (forceRestart: boolean) => {\n      startTokenStateMachine(\n        abtTokensService,\n        setStatusWrapper,\n        clientStateRetriever,\n        forceRestart\n      ); // Todo: Not start if already running\n    },\n    generateQrCode: () => {\n      const { accountId } = clientState;\n      return getSecureToken(accountId, [PayloadAction.ticketInspection]);\n    },\n  };\n}\n"]}