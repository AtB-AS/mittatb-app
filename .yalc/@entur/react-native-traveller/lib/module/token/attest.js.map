{"version":3,"sources":["attest.ts"],"names":["Platform","attest","attestLegacy","reattest","AttestationType","getActivateTokenRequestBody","accountId","initialTokenId","nonce","serverPublicKey","OS","iosVersion","Version","parseFloat","getActivateTokenRequestBodyIos14","getActivateTokenRequestBodyIos11","getActivateTokenRequestBodyAndroid","attestationObject","signaturePublicKey","encryptionPublicKey","signatureChain","encryptionChain","attestation","attestationType","SafetyNet","safetyNetJws","signaturePublicKeyAttestation","encryptionPublicKeyAttestation","attestationEncryptionKey","iOS_Device_Check","encryptedIosDeviceCheckData","attestationEncryptionEncryptedKey","keyId","deviceAttestationData","iOS_Device_Attestation","getReattestation","tokenId"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport type { ActivateTokenRequest, Attestation } from './types';\nimport { attest, attestLegacy, reattest } from '../native';\n\nenum AttestationType {\n  SafetyNet = 'SafetyNet',\n  iOS_Device_Check = 'iOS_Device_Check',\n  iOS_Device_Attestation = 'iOS_Device_Attestation',\n}\n\nexport const getActivateTokenRequestBody = (\n  accountId: string,\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n) => {\n  if (Platform.OS === 'ios') {\n    const iosVersion =\n      typeof Platform.Version === 'string'\n        ? parseFloat(Platform.Version)\n        : Platform.Version;\n    if (iosVersion >= 14) {\n      return getActivateTokenRequestBodyIos14(accountId, initialTokenId, nonce);\n    } else {\n      return getActivateTokenRequestBodyIos11(\n        accountId,\n        initialTokenId,\n        nonce,\n        serverPublicKey\n      );\n    }\n  } else {\n    return getActivateTokenRequestBodyAndroid(accountId, initialTokenId, nonce);\n  }\n};\n\nconst getActivateTokenRequestBodyAndroid = async (\n  accountId: string,\n  initialTokenId: string,\n  nonce: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestationObject,\n    signaturePublicKey,\n    encryptionPublicKey,\n    signatureChain,\n    encryptionChain,\n  } = await attest(accountId, initialTokenId, nonce);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.SafetyNet,\n      safetyNetJws: attestationObject,\n      signaturePublicKeyAttestation: signatureChain, // TODO: erstatt med faktiske verdier\n      encryptionPublicKeyAttestation: encryptionChain, // TODO: erstatt med faktiske verdier\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos11 = async (\n  accountId: string,\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestation,\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestationEncryptionKey,\n  } = await attestLegacy(accountId, initialTokenId, nonce, serverPublicKey);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Check,\n      encryptedIosDeviceCheckData: attestation,\n      attestationEncryptionEncryptedKey: attestationEncryptionKey,\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos14 = async (\n  accountId: string,\n  initialTokenId: string,\n  nonce: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestationObject,\n    keyId,\n    deviceAttestationData,\n    signaturePublicKey,\n    encryptionPublicKey,\n  } = await attest(accountId, initialTokenId, nonce);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Attestation,\n      attestationObject: attestationObject,\n      keyId: keyId,\n      deviceAttestationData: deviceAttestationData,\n    },\n  };\n};\n\nexport const getReattestation = async (\n  accountId: string,\n  tokenId: string,\n  nonce: string\n): Promise<Attestation> => {\n  const { attestationObject } = await reattest(accountId, tokenId, nonce);\n  return {\n    attestationType: 'SafetyNet',\n    safetyNetJws: attestationObject,\n    signaturePublicKeyAttestation: [],\n    encryptionPublicKeyAttestation: [],\n  };\n};\n"]}