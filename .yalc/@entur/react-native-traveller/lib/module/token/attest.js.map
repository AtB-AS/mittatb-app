{"version":3,"sources":["attest.ts"],"names":["Platform","attest","attestLegacy","AttestationType","getActivateTokenRequestBody","initialTokenId","nonce","serverPublicKey","OS","iosVersion","Version","parseFloat","getActivateTokenRequestBodyIos14","getActivateTokenRequestBodyIos11","getActivateTokenRequestBodyAndroid","attestation","signaturePublicKey","encryptionPublicKey","attestationType","SafetyNet","safetyNetJws","signaturePublicKeyAttestation","encryptionPublicKeyAttestation","attestationEncryptionKey","iOS_Device_Check","encryptedIosDeviceCheckData","attestationEncryptionEncryptedKey","attestationObject","keyId","deviceAttestationData","iOS_Device_Attestation"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AAEA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,WAArC;IAEKC,e;;WAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAML,OAAO,MAAMC,2BAA2B,GAAG,CACzCC,cADyC,EAEzCC,KAFyC,EAGzCC,eAHyC,KAItC;AACH,MAAIP,QAAQ,CAACQ,EAAT,KAAgB,KAApB,EAA2B;AACzB,UAAMC,UAAU,GACd,OAAOT,QAAQ,CAACU,OAAhB,KAA4B,QAA5B,GACIC,UAAU,CAACX,QAAQ,CAACU,OAAV,CADd,GAEIV,QAAQ,CAACU,OAHf;;AAIA,QAAID,UAAU,IAAI,EAAlB,EAAsB;AACpB,aAAOG,gCAAgC,CAACP,cAAD,EAAiBC,KAAjB,CAAvC;AACD,KAFD,MAEO;AACL,aAAOO,gCAAgC,CACrCR,cADqC,EAErCC,KAFqC,EAGrCC,eAHqC,CAAvC;AAKD;AACF,GAdD,MAcO;AACL,WAAOO,kCAAkC,CACvCT,cADuC,EAEvCC,KAFuC,EAGvCC,eAHuC,CAAzC;AAKD;AACF,CA1BM;;AA4BP,MAAMO,kCAAkC,GAAG,OACzCT,cADyC,EAEzCC,KAFyC,EAGzCC,eAHyC,KAIP;AAClC,QAAM;AACJQ,IAAAA,WADI;AAEJC,IAAAA,kBAFI;AAGJC,IAAAA;AAHI,MAIF,MAAMf,YAAY,CAACG,cAAD,EAAiBC,KAAjB,EAAwBC,eAAxB,CAJtB;AAMA,SAAO;AACLS,IAAAA,kBADK;AAELC,IAAAA,mBAFK;AAGLF,IAAAA,WAAW,EAAE;AACXG,MAAAA,eAAe,EAAEf,eAAe,CAACgB,SADtB;AAEXC,MAAAA,YAAY,EAAEL,WAFH;AAGXM,MAAAA,6BAA6B,EAAE,CAAC,MAAD,CAHpB;AAG8B;AACzCC,MAAAA,8BAA8B,EAAE,CAAC,MAAD,CAJrB,CAI+B;;AAJ/B;AAHR,GAAP;AAUD,CArBD;;AAuBA,MAAMT,gCAAgC,GAAG,OACvCR,cADuC,EAEvCC,KAFuC,EAGvCC,eAHuC,KAIL;AAClC,QAAM;AACJQ,IAAAA,WADI;AAEJC,IAAAA,kBAFI;AAGJC,IAAAA,mBAHI;AAIJM,IAAAA;AAJI,MAKF,MAAMrB,YAAY,CAACG,cAAD,EAAiBC,KAAjB,EAAwBC,eAAxB,CALtB;AAOA,SAAO;AACLS,IAAAA,kBADK;AAELC,IAAAA,mBAFK;AAGLF,IAAAA,WAAW,EAAE;AACXG,MAAAA,eAAe,EAAEf,eAAe,CAACqB,gBADtB;AAEXC,MAAAA,2BAA2B,EAAEV,WAFlB;AAGXW,MAAAA,iCAAiC,EAAEH;AAHxB;AAHR,GAAP;AASD,CArBD;;AAuBA,MAAMX,gCAAgC,GAAG,OACvCP,cADuC,EAEvCC,KAFuC,KAGL;AAClC,QAAM;AACJqB,IAAAA,iBADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,qBAHI;AAIJb,IAAAA,kBAJI;AAKJC,IAAAA;AALI,MAMF,MAAMhB,MAAM,CAACI,cAAD,EAAiBC,KAAjB,CANhB;AAQA,SAAO;AACLU,IAAAA,kBADK;AAELC,IAAAA,mBAFK;AAGLF,IAAAA,WAAW,EAAE;AACXG,MAAAA,eAAe,EAAEf,eAAe,CAAC2B,sBADtB;AAEXH,MAAAA,iBAAiB,EAAEA,iBAFR;AAGXC,MAAAA,KAAK,EAAEA,KAHI;AAIXC,MAAAA,qBAAqB,EAAEA;AAJZ;AAHR,GAAP;AAUD,CAtBD","sourcesContent":["import { Platform } from 'react-native';\nimport type { ActivateTokenRequest } from './types';\nimport { attest, attestLegacy } from '../native';\n\nenum AttestationType {\n  SafetyNet = 'SafetyNet',\n  iOS_Device_Check = 'iOS_Device_Check',\n  iOS_Device_Attestation = 'iOS_Device_Attestation',\n}\n\nexport const getActivateTokenRequestBody = (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n) => {\n  if (Platform.OS === 'ios') {\n    const iosVersion =\n      typeof Platform.Version === 'string'\n        ? parseFloat(Platform.Version)\n        : Platform.Version;\n    if (iosVersion >= 14) {\n      return getActivateTokenRequestBodyIos14(initialTokenId, nonce);\n    } else {\n      return getActivateTokenRequestBodyIos11(\n        initialTokenId,\n        nonce,\n        serverPublicKey\n      );\n    }\n  } else {\n    return getActivateTokenRequestBodyAndroid(\n      initialTokenId,\n      nonce,\n      serverPublicKey\n    );\n  }\n};\n\nconst getActivateTokenRequestBodyAndroid = async (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestation,\n    signaturePublicKey,\n    encryptionPublicKey,\n  } = await attestLegacy(initialTokenId, nonce, serverPublicKey);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.SafetyNet,\n      safetyNetJws: attestation,\n      signaturePublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n      encryptionPublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos11 = async (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestation,\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestationEncryptionKey,\n  } = await attestLegacy(initialTokenId, nonce, serverPublicKey);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Check,\n      encryptedIosDeviceCheckData: attestation,\n      attestationEncryptionEncryptedKey: attestationEncryptionKey,\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos14 = async (\n  initialTokenId: string,\n  nonce: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestationObject,\n    keyId,\n    deviceAttestationData,\n    signaturePublicKey,\n    encryptionPublicKey,\n  } = await attest(initialTokenId, nonce);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Attestation,\n      attestationObject: attestationObject,\n      keyId: keyId,\n      deviceAttestationData: deviceAttestationData,\n    },\n  };\n};\n"]}