{"version":3,"sources":["index.ts"],"names":["Platform","addToken","attest","attestLegacy","RequestError","requireAttestation","select","default","ios","AttestationType","isTokenValid","tokenValidityStart","tokenValidityEnd","now","Date","createAttestActivateAdd","fetcher","hosts","activateTokenRequest","tokenId","body","url","pto","response","method","initialTokenId","nonce","serverPublicKey","activateTokenRequestBody","getActivateTokenRequestBody","certificate","Error","err","console","error","OS","iosVersion","Version","parseFloat","getActivateTokenRequestBodyIos14","getActivateTokenRequestBodyIos11","getActivateTokenRequestBodyAndroid","attestation","signaturePublicKey","encryptionPublicKey","attestationType","SafetyNet","safetyNetJws","signaturePublicKeyAttestation","encryptionPublicKeyAttestation","attestationEncryptionKey","iOS_Device_Check","encryptedIosDeviceCheckData","attestationEncryptionEncryptedKey","attestationObject","keyId","deviceAttestationData","iOS_Device_Attestation","createRenewToken","attestActivateAdd","renewTokenRequest","token","attestationEncryptionPublicKey","createInitToken","initTokenRequest"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { addToken, attest, attestLegacy } from '../native';\nimport type { Token } from '../native/types';\nimport type { Fetch, Hosts } from '../config';\nimport type {\n  ActivateTokenRequest,\n  ActivateTokenResponse,\n  InitializeTokenRequest,\n  InitializeTokenResponse,\n  RenewTokenRequest,\n  RenewTokenResponse,\n} from './types';\nimport { RequestError } from '../fetcher';\n\nconst requireAttestation = Platform.select({\n  default: true,\n  ios: false,\n});\n\nenum AttestationType {\n  SafetyNet = 'SafetyNet',\n  iOS_Device_Check = 'iOS_Device_Check',\n  iOS_Device_Attestation = 'iOS_Device_Attestation',\n}\n\nexport function isTokenValid({\n  tokenValidityStart,\n  tokenValidityEnd,\n}: Token): boolean {\n  const now = Date.now();\n  return tokenValidityStart < now && now < tokenValidityEnd;\n}\n\nfunction createAttestActivateAdd(fetcher: Fetch, hosts: Hosts) {\n  const activateTokenRequest = async (\n    tokenId: string,\n    body: ActivateTokenRequest\n  ): Promise<ActivateTokenResponse> => {\n    const url = `${hosts.pto}/tokens/${tokenId}/activate`;\n\n    const response = await fetcher<ActivateTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (\n    initialTokenId: string,\n    nonce: string,\n    serverPublicKey: string\n  ): Promise<Token> => {\n    try {\n      const activateTokenRequestBody = await getActivateTokenRequestBody(\n        initialTokenId,\n        nonce,\n        serverPublicKey\n      );\n\n      const {\n        certificate,\n        tokenId,\n        tokenValidityEnd,\n        tokenValidityStart,\n      } = await activateTokenRequest(initialTokenId, activateTokenRequestBody);\n\n      if (tokenId !== initialTokenId)\n        throw Error(\n          `Activated token ${tokenId} does not match initial token ${initialTokenId}`\n        );\n\n      await addToken(\n        tokenId,\n        certificate,\n        tokenValidityStart,\n        tokenValidityEnd\n      );\n\n      return { tokenId, tokenValidityStart, tokenValidityEnd };\n    } catch (err) {\n      if (err instanceof RequestError) {\n        const { response } = err;\n        console.error(response.body);\n      } else {\n        console.error(err);\n      }\n      throw err;\n    }\n  };\n}\n\nconst getActivateTokenRequestBody = (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n) => {\n  if (Platform.OS === 'ios') {\n    const iosVersion =\n      typeof Platform.Version === 'string'\n        ? parseFloat(Platform.Version)\n        : Platform.Version;\n    if (iosVersion >= 14) {\n      return getActivateTokenRequestBodyIos14(initialTokenId, nonce);\n    } else {\n      return getActivateTokenRequestBodyIos11(\n        initialTokenId,\n        nonce,\n        serverPublicKey\n      );\n    }\n  } else {\n    return getActivateTokenRequestBodyAndroid(\n      initialTokenId,\n      nonce,\n      serverPublicKey\n    );\n  }\n};\n\nconst getActivateTokenRequestBodyAndroid = async (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestation,\n    signaturePublicKey,\n    encryptionPublicKey,\n  } = await attestLegacy(initialTokenId, nonce, serverPublicKey);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.SafetyNet,\n      safetyNetJws: attestation,\n      signaturePublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n      encryptionPublicKeyAttestation: ['noop'], // TODO: erstatt med faktiske verdier\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos11 = async (\n  initialTokenId: string,\n  nonce: string,\n  serverPublicKey: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestation,\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestationEncryptionKey,\n  } = await attestLegacy(initialTokenId, nonce, serverPublicKey);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Check,\n      encryptedIosDeviceCheckData: attestation,\n      attestationEncryptionEncryptedKey: attestationEncryptionKey,\n    },\n  };\n};\n\nconst getActivateTokenRequestBodyIos14 = async (\n  initialTokenId: string,\n  nonce: string\n): Promise<ActivateTokenRequest> => {\n  const {\n    attestationObject,\n    keyId,\n    deviceAttestationData,\n    signaturePublicKey,\n    encryptionPublicKey,\n  } = await attest(initialTokenId, nonce);\n\n  return {\n    signaturePublicKey,\n    encryptionPublicKey,\n    attestation: {\n      attestationType: AttestationType.iOS_Device_Attestation,\n      attestationObject: attestationObject,\n      keyId: keyId,\n      deviceAttestationData: deviceAttestationData,\n    },\n  };\n};\n\nexport function createRenewToken(fetcher: Fetch, hosts: Hosts) {\n  const attestActivateAdd = createAttestActivateAdd(fetcher, hosts);\n\n  const renewTokenRequest = async (\n    tokenId: string,\n    body: RenewTokenRequest\n  ): Promise<RenewTokenResponse> => {\n    const url = `${hosts.pto}/tokens/${tokenId}`;\n\n    const response = await fetcher<RenewTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (token: Token): Promise<Token> => {\n    const {\n      tokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await renewTokenRequest(token.tokenId, { requireAttestation });\n\n    return attestActivateAdd(tokenId, nonce, attestationEncryptionPublicKey);\n  };\n}\n\nexport function createInitToken(fetcher: Fetch, hosts: Hosts) {\n  const attestActivateAdd = createAttestActivateAdd(fetcher, hosts);\n\n  const initTokenRequest = async (\n    body: InitializeTokenRequest\n  ): Promise<InitializeTokenResponse> => {\n    const url = `${hosts.pto}/tokens`;\n\n    const response = await fetcher<InitializeTokenResponse>({\n      url,\n      body,\n      method: 'POST',\n    });\n\n    return response.body;\n  };\n\n  return async (): Promise<Token> => {\n    const {\n      tokenId,\n      nonce,\n      attestationEncryptionPublicKey,\n    } = await initTokenRequest({ requireAttestation });\n\n    return attestActivateAdd(tokenId, nonce, attestationEncryptionPublicKey);\n  };\n}\n"]}