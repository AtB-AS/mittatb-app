{"version":3,"sources":["index.ts"],"names":["loadingHandler","validatingHandler","initiateNewHandler","initiateRenewHandler","getTokenCertificateHandler","attestHandler","activateRenewalHandler","addTokenHandler","activateNewHandler","AsyncStorage","deleteLocalHandler","startingHandler","getStoreKey","startTokenStateMachine","abtTokensService","setStatus","getClientState","safetyNetApiKey","forceRestart","accountId","undefined","getClientStateRequired","storeKey","currentState","state","shouldContinue","handler","getStateHandler","setItem","JSON","stringify","err","console","warn","error","missingNetConnection","message","s","storedState"],"mappings":"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","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport deleteLocalHandler from './state-machine/handlers/DeleteLocalHandler';\nimport type { ClientState, ClientStateRetriever } from '..';\nimport startingHandler from './state-machine/handlers/StartingHandler';\nimport { getStoreKey } from './state-machine/utils';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s?: StoredState) => void,\n  getClientState: ClientStateRetriever,\n  safetyNetApiKey: string,\n  forceRestart: boolean = false\n) => {\n  const { accountId } = getClientState();\n\n  if (!accountId) {\n    setStatus(undefined);\n  } else {\n    const getClientStateRequired = getClientState as () => Required<ClientState>;\n    const storeKey = getStoreKey(accountId!);\n    let currentState: StoredState = { state: 'Starting' };\n    setStatus(currentState);\n    try {\n      while (shouldContinue(currentState)) {\n        const handler = getStateHandler(\n          abtTokensService,\n          currentState,\n          getClientStateRequired,\n          safetyNetApiKey,\n          forceRestart\n        );\n        currentState = await handler(currentState);\n        await AsyncStorage.setItem(storeKey, JSON.stringify(currentState));\n        setStatus(currentState);\n      }\n    } catch (err) {\n      console.warn('Unexpected error', err);\n      setStatus({\n        ...currentState,\n        error: {\n          missingNetConnection: false,\n          message: 'Unexpected error',\n          err,\n        },\n      });\n    }\n  }\n};\n\nconst shouldContinue = (s: StoredState) => s.state !== 'Valid' && !s.error;\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState,\n  getClientState: () => Required<ClientState>,\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Starting':\n      return startingHandler(getClientState, safetyNetApiKey, forceRestart);\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler(getClientState);\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'DeleteLocal':\n      return deleteLocalHandler(getClientState);\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService, getClientState);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService, getClientState);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler(getClientState);\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService, getClientState);\n    case 'AddToken':\n      return addTokenHandler(getClientState);\n  }\n};\n"]}