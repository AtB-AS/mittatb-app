{"version":3,"sources":["index.ts"],"names":["loadingHandler","validatingHandler","initiateNewHandler","initiateRenewHandler","getTokenCertificateHandler","attestHandler","activateRenewalHandler","addTokenHandler","activateNewHandler","AsyncStorage","deleteLocalHandler","STORAGE_KEY_PREFIX","getStoreKey","accountId","startTokenStateMachine","abtTokensService","setStatus","getClientState","forceRestart","storeKey","currentState","getInitialState","shouldContinue","s","state","error","handler","getStateHandler","setItem","JSON","stringify","err","console","warn","type","message","savedStateString","getItem","parse","storedState"],"mappings":"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","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport deleteLocalHandler from './state-machine/handlers/DeleteLocalHandler';\nimport type { ClientStateRetriever } from '..';\n\nconst STORAGE_KEY_PREFIX = '@mobiletokensdk-state';\nconst getStoreKey = (accountId: string) => `${STORAGE_KEY_PREFIX}#${accountId}`;\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s: StoredState) => void,\n  getClientState: ClientStateRetriever,\n  forceRestart: boolean = false\n) => {\n  const { accountId } = getClientState();\n  const storeKey = getStoreKey(accountId);\n  let currentState = await getInitialState(forceRestart, storeKey);\n  try {\n    const shouldContinue = (s: StoredState) => s.state !== 'Valid' && !s.error;\n    do {\n      const handler = getStateHandler(\n        abtTokensService,\n        currentState,\n        getClientState\n      );\n      currentState = await handler(currentState);\n      await AsyncStorage.setItem(storeKey, JSON.stringify(currentState));\n      setStatus(currentState);\n    } while (shouldContinue(currentState));\n  } catch (err) {\n    console.warn('Unexpected error', err);\n    setStatus({\n      ...currentState,\n      error: { type: 'Unknown', message: 'Unexpected error', err },\n    });\n  }\n};\n\nconst getInitialState = async (\n  forceRestart: boolean,\n  storeKey: string\n): Promise<StoredState> => {\n  if (forceRestart) {\n    return { state: 'Loading' };\n  }\n  const savedStateString = await AsyncStorage.getItem(storeKey);\n  return savedStateString ? JSON.parse(savedStateString) : { state: 'Loading' };\n};\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState,\n  getClientState: ClientStateRetriever\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler(getClientState);\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'DeleteLocal':\n      return deleteLocalHandler(getClientState);\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService, getClientState);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService, getClientState);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler(abtTokensService, getClientState);\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService, getClientState);\n    case 'AddToken':\n      return addTokenHandler(abtTokensService, getClientState);\n  }\n};\n"]}