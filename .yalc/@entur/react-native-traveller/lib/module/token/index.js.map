{"version":3,"sources":["index.ts"],"names":["loadingHandler","validatingHandler","initiateNewHandler","initiateRenewHandler","getTokenCertificateHandler","attestHandler","activateRenewalHandler","addTokenHandler","activateNewHandler","AsyncStorage","deleteLocalHandler","startingHandler","notSupportedHandler","getStoreKey","verifyInspectionActionHandler","logger","startTokenStateMachine","abtTokensService","setStatus","safetyNetApiKey","forceRestart","accountId","undefined","storeKey","currentState","state","shouldContinue","handler","getStateHandler","setItem","JSON","stringify","err","error","console","warn","missingNetConnection","message","s","storedState"],"mappings":"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","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { StoredState } from './types';\nimport loadingHandler from './state-machine/handlers/LoadingHandler';\nimport validatingHandler from './state-machine/handlers/ValidatingHandler';\nimport initiateNewHandler from './state-machine/handlers/InitiateNewHandler';\nimport initiateRenewHandler from './state-machine/handlers/InitiateRenewalHandler';\nimport getTokenCertificateHandler from './state-machine/handlers/GetTokenCertificateHandler';\nimport attestHandler from './state-machine/handlers/AttestHandler';\nimport activateRenewalHandler from './state-machine/handlers/ActivateRenewalHandler';\nimport addTokenHandler from './state-machine/handlers/AddTokenHandler';\nimport type { StateHandler } from './state-machine/HandlerFactory';\nimport activateNewHandler from './state-machine/handlers/ActivateNewHandler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport deleteLocalHandler from './state-machine/handlers/DeleteLocalHandler';\nimport startingHandler from './state-machine/handlers/StartingHandler';\nimport notSupportedHandler from './state-machine/handlers/NotSupportedHandler';\nimport { getStoreKey } from './state-machine/utils';\nimport verifyInspectionActionHandler from './state-machine/handlers/VerifyInspectionActionHandler';\nimport { logger } from '../logger';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s?: StoredState) => void,\n  safetyNetApiKey: string,\n  forceRestart: boolean = false,\n  accountId?: string\n) => {\n  if (!accountId) {\n    setStatus(undefined);\n  } else {\n    const storeKey = getStoreKey(accountId!);\n    let currentState: StoredState = { accountId, state: 'Starting' };\n    setStatus(currentState);\n    try {\n      while (shouldContinue(currentState)) {\n        const handler = getStateHandler(\n          abtTokensService,\n          currentState,\n          safetyNetApiKey,\n          forceRestart\n        );\n        currentState = await handler(currentState);\n        await AsyncStorage.setItem(storeKey, JSON.stringify(currentState));\n        setStatus(currentState);\n      }\n    } catch (err: any) {\n      logger.error(undefined, err, undefined);\n      console.warn('Unexpected error', err);\n      setStatus({\n        ...currentState,\n        error: {\n          missingNetConnection: false,\n          message: 'Unexpected error',\n          err,\n        },\n      });\n    }\n  }\n};\n\nconst shouldContinue = (s: StoredState) =>\n  s.state !== 'Valid' && s.state !== 'NotSupported' && !s.error;\n\nconst getStateHandler = (\n  abtTokensService: AbtTokensService,\n  storedState: StoredState,\n  safetyNetApiKey: string,\n  forceRestart: boolean\n): StateHandler => {\n  switch (storedState.state) {\n    case 'Starting':\n      return startingHandler(safetyNetApiKey, forceRestart);\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler();\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'DeleteLocal':\n      return deleteLocalHandler();\n    case 'InitiateNew':\n      return initiateNewHandler(abtTokensService);\n    case 'InitiateRenewal':\n      return initiateRenewHandler(abtTokensService);\n    case 'GettingTokenCertificate':\n      return getTokenCertificateHandler(abtTokensService);\n    case 'AttestNew':\n    case 'AttestRenewal':\n      return attestHandler();\n    case 'ActivateNew':\n      return activateNewHandler(abtTokensService);\n    case 'ActivateRenewal':\n      return activateRenewalHandler(abtTokensService);\n    case 'AddToken':\n      return addTokenHandler();\n    case 'VerifyInspectionAction':\n      return verifyInspectionActionHandler(abtTokensService);\n    case 'NotSupported':\n      return notSupportedHandler();\n  }\n};\n"]}