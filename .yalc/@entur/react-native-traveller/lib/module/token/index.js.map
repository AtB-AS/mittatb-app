{"version":3,"sources":["index.ts"],"names":["loadingHandler","validatingHandler","initiatingHandler","renewingHandler","startTokenStateMachine","abtTokensService","setStatus","lastStatus","shouldContinue","s","state","error","currentStatus","processStatus","status","undefined"],"mappings":"AAEA,OAAOA,cAAP,MAA2B,iCAA3B;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,OAAO,MAAMC,sBAAsB,GAAG,OACpCC,gBADoC,EAEpCC,SAFoC,EAGpCC,UAHoC,KAIjC;AACH,QAAMC,cAAc,GAAIC,CAAD,IAAoBA,CAAC,CAACC,KAAF,KAAY,OAAZ,IAAuB,CAACD,CAAC,CAACE,KAArE;;AACA,MAAIC,aAAa,GAAGL,UAApB;;AACA,KAAG;AACDK,IAAAA,aAAa,GAAG,MAAMC,aAAa,CAACR,gBAAD,EAAmBO,aAAnB,CAAnC;AACAN,IAAAA,SAAS,CAACM,aAAD,CAAT;AACD,GAHD,QAGSJ,cAAc,CAACI,aAAD,CAHvB;AAID,CAXM;;AAaP,MAAMC,aAAa,GAAG,OACpBR,gBADoB,EAEpBS,MAFoB,KAGK;AACzB,UAAQA,MAAR,aAAQA,MAAR,uBAAQA,MAAM,CAAEJ,KAAhB;AACE,SAAKK,SAAL;AACE,aAAO;AAAEL,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACF,SAAK,OAAL;AACA,SAAK,SAAL;AACE,aAAOV,cAAc,EAArB;;AACF,SAAK,YAAL;AACE,aAAOC,iBAAiB,CAACI,gBAAD,CAAxB;;AACF,SAAK,YAAL;AACE,aAAOH,iBAAiB,CAACG,gBAAD,CAAxB;;AACF,SAAK,UAAL;AACE,aAAOF,eAAe,CAACE,gBAAD,CAAtB;AAXJ;AAaD,CAjBD","sourcesContent":["import type { AbtTokensService } from './abt-tokens-service';\nimport type { TokenStatus } from './types';\nimport loadingHandler from './state-handlers/LoadingHandler';\nimport validatingHandler from './state-handlers/ValidatingHandler';\nimport initiatingHandler from './state-handlers/InitiatingHandler';\nimport renewingHandler from './state-handlers/RenewingHandler';\n\nexport const startTokenStateMachine = async (\n  abtTokensService: AbtTokensService,\n  setStatus: (s: TokenStatus) => void,\n  lastStatus?: TokenStatus\n) => {\n  const shouldContinue = (s: TokenStatus) => s.state !== 'Valid' && !s.error;\n  let currentStatus = lastStatus;\n  do {\n    currentStatus = await processStatus(abtTokensService, currentStatus);\n    setStatus(currentStatus);\n  } while (shouldContinue(currentStatus));\n};\n\nconst processStatus = async (\n  abtTokensService: AbtTokensService,\n  status?: TokenStatus\n): Promise<TokenStatus> => {\n  switch (status?.state) {\n    case undefined:\n      return { state: 'Loading' };\n    case 'Valid':\n    case 'Loading':\n      return loadingHandler();\n    case 'Validating':\n      return validatingHandler(abtTokensService);\n    case 'Initiating':\n      return initiatingHandler(abtTokensService);\n    case 'Renewing':\n      return renewingHandler(abtTokensService);\n  }\n};\n"]}