{"version":3,"sources":["ActivateRenewalHandler.ts"],"names":["getSecureToken","PayloadAction","verifyCorrectTokenId","stateHandlerFactory","logger","activateRenewalHandler","abtTokensService","s","accountId","oldTokenId","tokenId","info","undefined","signedToken","addRemoveToken","activateTokenResponse","activateToken","attestationData","state","activatedData","err","response","status"],"mappings":"AAAA,SAASA,cAAT,QAA+B,iBAA/B;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,oBAAT,QAAqC,UAArC;AACA,SAAuBC,mBAAvB,QAAkD,mBAAlD;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,eAAe,SAASC,sBAAT,CACbC,gBADa,EAEC;AACd,SAAOH,mBAAmB,CAAC,CAAC,iBAAD,CAAD,EAAsB,MAAOI,CAAP,IAAa;AAC3D,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA;AAAzB,QAAqCH,CAA3C;AAEAH,IAAAA,MAAM,CAACO,IAAP,CAAY,kBAAZ,EAAgCC,SAAhC,EAA2C;AACzCJ,MAAAA,SADyC;AAEzCC,MAAAA,UAFyC;AAGzCC,MAAAA;AAHyC,KAA3C;AAMA,UAAMG,WAAW,GAAG,MAAMb,cAAc,CAACQ,SAAD,EAAYC,UAAZ,EAAwB,IAAxB,EAA8B,CACpER,aAAa,CAACa,cADsD,CAA9B,CAAxC;;AAIA,QAAI;AACF,YAAMC,qBAAqB,GAAG,MAAMT,gBAAgB,CAACU,aAAjB,CAClCN,OADkC,EAElCH,CAAC,CAACU,eAFgC,EAGlCJ,WAHkC,CAApC;AAKAX,MAAAA,oBAAoB,CAACQ,OAAD,EAAUK,qBAAqB,CAACL,OAAhC,CAApB;AAEA,aAAO;AACLF,QAAAA,SAAS,EAAEA,SADN;AAELU,QAAAA,KAAK,EAAE,UAFF;AAGLR,QAAAA,OAAO,EAAEH,CAAC,CAACG,OAHN;AAILS,QAAAA,aAAa,EAAEJ;AAJV,OAAP;AAMD,KAdD,CAcE,OAAOK,GAAP,EAAiB;AAAA;;AACjB,UAAI,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,6BAAAA,GAAG,CAAEC,QAAL,gEAAeC,MAAf,MAA0B,GAA9B,EAAmC;AACjC;AACA,eAAO;AACLd,UAAAA,SAAS,EAAEA,SADN;AAELE,UAAAA,OAAO,EAAEA,OAFJ;AAGLQ,UAAAA,KAAK,EAAE;AAHF,SAAP;AAKD;;AACD,YAAME,GAAN;AACD;AACF,GAtCyB,CAA1B;AAuCD","sourcesContent":["import { getSecureToken } from '../../../native';\nimport type { AbtTokensService } from '../../abt-tokens-service';\nimport { PayloadAction } from '../../../native/types';\nimport { verifyCorrectTokenId } from '../utils';\nimport { StateHandler, stateHandlerFactory } from '../HandlerFactory';\nimport { logger } from '../../../logger';\n\nexport default function activateRenewalHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['ActivateRenewal'], async (s) => {\n    const { accountId, oldTokenId, tokenId } = s;\n\n    logger.info('activate_renewal', undefined, {\n      accountId,\n      oldTokenId,\n      tokenId,\n    });\n\n    const signedToken = await getSecureToken(accountId, oldTokenId, true, [\n      PayloadAction.addRemoveToken,\n    ]);\n\n    try {\n      const activateTokenResponse = await abtTokensService.activateToken(\n        tokenId,\n        s.attestationData,\n        signedToken\n      );\n      verifyCorrectTokenId(tokenId, activateTokenResponse.tokenId);\n\n      return {\n        accountId: accountId,\n        state: 'AddToken',\n        tokenId: s.tokenId,\n        activatedData: activateTokenResponse,\n      };\n    } catch (err: any) {\n      if (err?.response?.status === 409) {\n        // The token has already been renewed. May happen if retrying after timeout.\n        return {\n          accountId: accountId,\n          tokenId: tokenId,\n          state: 'GettingTokenCertificate',\n        };\n      }\n      throw err;\n    }\n  });\n}\n"]}