{"version":3,"sources":["LoadingHandler.ts"],"names":["getToken","stateHandlerFactory","secondsIn48Hours","loadingHandler","s","token","accountId","state","tokenNeedsRenewal","twentyPercentOfValidityPeriod","tokenValidityEnd","tokenValidityStart","timeLeftWhenRenewalNecessary","Math","min","renewalCutoffTime","nowSeconds","Date","now"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AAGA,MAAMC,gBAAgB,GAAG,KAAK,EAAL,GAAU,EAAnC;AAEA,eAAe,SAASC,cAAT,GAAwC;AACrD,SAAOF,mBAAmB,CAAC,CAAC,SAAD,EAAY,OAAZ,CAAD,EAAuB,MAAOG,CAAP,IAAa;AAC5D,UAAMC,KAAK,GAAG,MAAML,QAAQ,CAACI,CAAC,CAACE,SAAH,CAA5B;;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAO;AACLC,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID,KALD,MAKO;AACL,aAAOC,iBAAiB,CAACH,KAAD,CAAjB,GACH;AACEC,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADf;AAEEC,QAAAA,KAAK,EAAE;AAFT,OADG,GAKH;AACED,QAAAA,SAAS,EAAEF,CAAC,CAACE,SADf;AAEEC,QAAAA,KAAK,EAAE,YAFT;AAGEF,QAAAA;AAHF,OALJ;AAUD;AACF,GAnByB,CAA1B;AAoBD;AAED;AACA;AACA;AACA;AACA;;AACA,MAAMG,iBAAiB,GAAIH,KAAD,IAAkB;AAC1C,QAAMI,6BAA6B,GACjC,CAACJ,KAAK,CAACK,gBAAN,GAAyBL,KAAK,CAACM,kBAAhC,IAAsD,GADxD;AAEA,QAAMC,4BAA4B,GAAGC,IAAI,CAACC,GAAL,CACnCZ,gBADmC,EAEnCO,6BAFmC,CAArC;AAIA,QAAMM,iBAAiB,GACrBV,KAAK,CAACK,gBAAN,GAAyBE,4BAD3B;AAEA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAhC;AACA,SAAOF,UAAU,GAAGD,iBAApB;AACD,CAXD","sourcesContent":["import { getToken } from '../../../native';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport type { Token } from '@entur/react-native-traveller';\n\nconst secondsIn48Hours = 48 * 60 * 60;\n\nexport default function loadingHandler(): StateHandler {\n  return stateHandlerFactory(['Loading', 'Valid'], async (s) => {\n    const token = await getToken(s.accountId);\n    if (!token) {\n      return {\n        accountId: s.accountId,\n        state: 'InitiateNew',\n      };\n    } else {\n      return tokenNeedsRenewal(token)\n        ? {\n            accountId: s.accountId,\n            state: 'InitiateRenewal',\n          }\n        : {\n            accountId: s.accountId,\n            state: 'Validating',\n            token,\n          };\n    }\n  });\n}\n\n/**\n * Whether the token needs renewal or not. The token needs renewal if the\n * remaining validity period is less than 48 hours and less than 20% of the\n * total validity time.\n */\nconst tokenNeedsRenewal = (token: Token) => {\n  const twentyPercentOfValidityPeriod =\n    (token.tokenValidityEnd - token.tokenValidityStart) * 0.2;\n  const timeLeftWhenRenewalNecessary = Math.min(\n    secondsIn48Hours,\n    twentyPercentOfValidityPeriod\n  );\n  const renewalCutoffTime =\n    token.tokenValidityEnd - timeLeftWhenRenewalNecessary;\n  const nowSeconds = Date.now() / 1000;\n  return nowSeconds > renewalCutoffTime;\n};\n"]}