{"version":3,"sources":["LoadingHandler.ts"],"names":["getToken","stateHandlerFactory","secondsIn48Hours","loadingHandler","getClientState","_","accountId","token","state","tokenNeedsRenewal","twentyPercentOfValidityPeriod","tokenValidityEnd","tokenValidityStart","timeLeftWhenRenewalNecessary","Math","min","renewalCutoffTime","nowSeconds","Date","now"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AAIA,MAAMC,gBAAgB,GAAG,KAAK,EAAL,GAAU,EAAnC;AAEA,eAAe,SAASC,cAAT,CACbC,cADa,EAEC;AACd,SAAOH,mBAAmB,CAAC,CAAC,SAAD,EAAY,OAAZ,CAAD,EAAuB,MAAOI,CAAP,IAAa;AAC5D,UAAM;AAAEC,MAAAA;AAAF,QAAgBF,cAAc,EAApC;AACA,UAAMG,KAAK,GAAG,MAAMP,QAAQ,CAACM,SAAD,CAA5B;;AACA,QAAI,CAACC,KAAL,EAAY;AACV,aAAO;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAFD,MAEO;AACL,aAAOC,iBAAiB,CAACF,KAAD,CAAjB,GACH;AAAEC,QAAAA,KAAK,EAAE;AAAT,OADG,GAEH;AAAEA,QAAAA,KAAK,EAAE,YAAT;AAAuBD,QAAAA;AAAvB,OAFJ;AAGD;AACF,GAVyB,CAA1B;AAWD;AAED;AACA;AACA;AACA;AACA;;AACA,MAAME,iBAAiB,GAAIF,KAAD,IAAkB;AAC1C,QAAMG,6BAA6B,GACjC,CAACH,KAAK,CAACI,gBAAN,GAAyBJ,KAAK,CAACK,kBAAhC,IAAsD,GADxD;AAEA,QAAMC,4BAA4B,GAAGC,IAAI,CAACC,GAAL,CACnCb,gBADmC,EAEnCQ,6BAFmC,CAArC;AAIA,QAAMM,iBAAiB,GACrBT,KAAK,CAACI,gBAAN,GAAyBE,4BAD3B;AAEA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAhC;AACA,SAAOF,UAAU,GAAGD,iBAApB;AACD,CAXD","sourcesContent":["import { getToken } from '../../../native';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport type { Token } from '@entur/react-native-traveller';\nimport type { ClientStateRetriever } from '../../..';\n\nconst secondsIn48Hours = 48 * 60 * 60;\n\nexport default function loadingHandler(\n  getClientState: ClientStateRetriever\n): StateHandler {\n  return stateHandlerFactory(['Loading', 'Valid'], async (_) => {\n    const { accountId } = getClientState();\n    const token = await getToken(accountId);\n    if (!token) {\n      return { state: 'InitiateNew' };\n    } else {\n      return tokenNeedsRenewal(token)\n        ? { state: 'InitiateRenewal' }\n        : { state: 'Validating', token };\n    }\n  });\n}\n\n/**\n * Whether the token needs renewal or not. The token needs renewal if the\n * remaining validity period is less than 48 hours and less than 20% of the\n * total validity time.\n */\nconst tokenNeedsRenewal = (token: Token) => {\n  const twentyPercentOfValidityPeriod =\n    (token.tokenValidityEnd - token.tokenValidityStart) * 0.2;\n  const timeLeftWhenRenewalNecessary = Math.min(\n    secondsIn48Hours,\n    twentyPercentOfValidityPeriod\n  );\n  const renewalCutoffTime =\n    token.tokenValidityEnd - timeLeftWhenRenewalNecessary;\n  const nowSeconds = Date.now() / 1000;\n  return nowSeconds > renewalCutoffTime;\n};\n"]}