{"version":3,"sources":["LoadingHandler.ts"],"names":["getToken","stateHandlerFactory","logger","secondsIn48Hours","loadingHandler","s","accountId","state","info","undefined","token","tokenId","tokenNeedsRenewal","twentyPercentOfValidityPeriod","tokenValidityEnd","tokenValidityStart","timeLeftWhenRenewalNecessary","Math","min","renewalCutoffTime","nowSeconds","Date","now"],"mappings":"AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AAEA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,MAAMC,gBAAgB,GAAG,KAAK,EAAL,GAAU,EAAnC;AAEA,eAAe,SAASC,cAAT,GAAwC;AACrD,SAAOH,mBAAmB,CAAC,CAAC,SAAD,EAAY,OAAZ,CAAD,EAAuB,MAAOI,CAAP,IAAa;AAC5D,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAuBF,CAA7B;AACAH,IAAAA,MAAM,CAACM,IAAP,CAAY,SAAZ,EAAuBC,SAAvB,EAAkC;AAAEH,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAlC;AAEA,UAAMG,KAAK,GAAG,MAAMV,QAAQ,CAACM,SAAD,CAA5B;;AACA,QAAI,CAACI,KAAL,EAAY;AACVR,MAAAA,MAAM,CAACM,IAAP,CAAY,gBAAZ,EAA8BC,SAA9B;AAEA,aAAO;AACLH,QAAAA,SADK;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID,KAPD,MAOO;AACLL,MAAAA,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA2BC,SAA3B,EAAsC;AAAEE,QAAAA,OAAO,EAAED,KAAK,CAACC;AAAjB,OAAtC;AAEA,aAAOC,iBAAiB,CAACF,KAAD,CAAjB,GACH;AACEJ,QAAAA,SADF;AAEEK,QAAAA,OAAO,EAAED,KAAK,CAACC,OAFjB;AAGEJ,QAAAA,KAAK,EAAE;AAHT,OADG,GAMH;AACED,QAAAA,SADF;AAEEC,QAAAA,KAAK,EAAE,YAFT;AAGEI,QAAAA,OAAO,EAAED,KAAK,CAACC;AAHjB,OANJ;AAWD;AACF,GA3ByB,CAA1B;AA4BD;AAED;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAIF,KAAD,IAAkB;AAC1C,QAAMG,6BAA6B,GACjC,CAACH,KAAK,CAACI,gBAAN,GAAyBJ,KAAK,CAACK,kBAAhC,IAAsD,GADxD;AAEA,QAAMC,4BAA4B,GAAGC,IAAI,CAACC,GAAL,CACnCf,gBADmC,EAEnCU,6BAFmC,CAArC;AAIA,QAAMM,iBAAiB,GACrBT,KAAK,CAACI,gBAAN,GAAyBE,4BAD3B;AAEA,QAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAhC;AACA,SAAOF,UAAU,GAAGD,iBAApB;AACD,CAXD","sourcesContent":["import { getToken } from '../../../native';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport type { Token } from '@entur/react-native-traveller';\nimport { logger } from '../../../logger';\n\nconst secondsIn48Hours = 48 * 60 * 60;\n\nexport default function loadingHandler(): StateHandler {\n  return stateHandlerFactory(['Loading', 'Valid'], async (s) => {\n    const { accountId, state } = s;\n    logger.info('loading', undefined, { accountId, state });\n\n    const token = await getToken(accountId);\n    if (!token) {\n      logger.info('no_token_found', undefined);\n\n      return {\n        accountId,\n        state: 'InitiateNew',\n      };\n    } else {\n      logger.info('token_found', undefined, { tokenId: token.tokenId });\n\n      return tokenNeedsRenewal(token)\n        ? {\n            accountId,\n            tokenId: token.tokenId,\n            state: 'InitiateRenewal',\n          }\n        : {\n            accountId,\n            state: 'Validating',\n            tokenId: token.tokenId,\n          };\n    }\n  });\n}\n\n/**\n * Whether the token needs renewal or not. The token needs renewal if the\n * remaining validity period is less than 48 hours and less than 20% of the\n * total validity time.\n */\nconst tokenNeedsRenewal = (token: Token) => {\n  const twentyPercentOfValidityPeriod =\n    (token.tokenValidityEnd - token.tokenValidityStart) * 0.2;\n  const timeLeftWhenRenewalNecessary = Math.min(\n    secondsIn48Hours,\n    twentyPercentOfValidityPeriod\n  );\n  const renewalCutoffTime =\n    token.tokenValidityEnd - timeLeftWhenRenewalNecessary;\n  const nowSeconds = Date.now() / 1000;\n  return nowSeconds > renewalCutoffTime;\n};\n"]}