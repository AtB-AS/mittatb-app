{"version":3,"sources":["ValidatingHandler.ts"],"names":["stateHandlerFactory","getSecureToken","PayloadAction","validatingHandler","abtTokensService","s","signedToken","accountId","tokenId","getFarecontracts","validationResponse","validateToken","state"],"mappings":"AAEA,SAASA,mBAAT,QAAoC,mBAApC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,eAAe,SAASC,iBAAT,CACbC,gBADa,EAEC;AACd,SAAOJ,mBAAmB,CAAC,CAAC,YAAD,CAAD,EAAiB,MAAOK,CAAP,IAAa;AACtD,UAAMC,WAAW,GAAG,MAAML,cAAc,CAACI,CAAC,CAACE,SAAH,EAAcF,CAAC,CAACG,OAAhB,EAAyB,IAAzB,EAA+B,CACrEN,aAAa,CAACO,gBADuD,CAA/B,CAAxC;AAGA,UAAMC,kBAAkB,GAAG,MAAMN,gBAAgB,CAACO,aAAjB,CAC/BN,CAAC,CAACG,OAD6B,EAE/BF,WAF+B,CAAjC;;AAKA,YAAQI,kBAAkB,CAACE,KAA3B;AACE,WAAK,OAAL;AACE,eAAO;AACLL,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELK,UAAAA,KAAK,EAAE,OAFF;AAGLJ,UAAAA,OAAO,EAAEH,CAAC,CAACG;AAHN,SAAP;;AAKF,WAAK,UAAL;AACA,WAAK,kBAAL;AACE,eAAO;AACLD,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELK,UAAAA,KAAK,EAAE;AAFF,SAAP;;AAIF,WAAK,cAAL;AACE,eAAO;AACLL,UAAAA,SAAS,EAAEF,CAAC,CAACE,SADR;AAELC,UAAAA,OAAO,EAAEH,CAAC,CAACG,OAFN;AAGLI,UAAAA,KAAK,EAAE;AAHF,SAAP;AAdJ;AAoBD,GA7ByB,CAA1B;AA8BD","sourcesContent":["import type { AbtTokensService } from '../../abt-tokens-service';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport { getSecureToken } from '../../../native';\nimport { PayloadAction } from '../../../native/types';\n\nexport default function validatingHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['Validating'], async (s) => {\n    const signedToken = await getSecureToken(s.accountId, s.tokenId, true, [\n      PayloadAction.getFarecontracts,\n    ]);\n    const validationResponse = await abtTokensService.validateToken(\n      s.tokenId,\n      signedToken\n    );\n\n    switch (validationResponse.state) {\n      case 'Valid':\n        return {\n          accountId: s.accountId,\n          state: 'Valid',\n          tokenId: s.tokenId,\n        };\n      case 'NotFound':\n      case 'NeedsReplacement':\n        return {\n          accountId: s.accountId,\n          state: 'DeleteLocal',\n        };\n      case 'NeedsRenewal':\n        return {\n          accountId: s.accountId,\n          tokenId: s.tokenId,\n          state: 'InitiateRenewal',\n        };\n    }\n  });\n}\n"]}