{"version":3,"sources":["ValidatingHandler.ts"],"names":["stateHandlerFactory","getSecureToken","PayloadAction","logger","validatingHandler","abtTokensService","s","accountId","tokenId","info","undefined","signedToken","getFarecontracts","state","validationState","validateToken"],"mappings":"AAEA,SAASA,mBAAT,QAAoC,mBAApC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,eAAe,SAASC,iBAAT,CACbC,gBADa,EAEC;AACd,SAAOL,mBAAmB,CAAC,CAAC,YAAD,CAAD,EAAiB,MAAOM,CAAP,IAAa;AACtD,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBF,CAA/B;AACAH,IAAAA,MAAM,CAACM,IAAP,CAAY,YAAZ,EAA0BC,SAA1B,EAAqC;AAAEH,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAArC;AACA,UAAMG,WAAW,GAAG,MAAMV,cAAc,CAACM,SAAD,EAAYC,OAAZ,EAAqB,IAArB,EAA2B,CACjEN,aAAa,CAACU,gBADmD,CAA3B,CAAxC;AAGA,UAAM;AAAEC,MAAAA,KAAK,EAAEC;AAAT,QAA6B,MAAMT,gBAAgB,CAACU,aAAjB,CACvCP,OADuC,EAEvCG,WAFuC,CAAzC;AAKAR,IAAAA,MAAM,CAACM,IAAP,CAAY,kBAAZ,EAAgCC,SAAhC,EAA2C;AAAEI,MAAAA;AAAF,KAA3C;;AAEA,YAAQA,eAAR;AACE,WAAK,OAAL;AACE,eAAO;AACLP,UAAAA,SADK;AAELM,UAAAA,KAAK,EAAE,OAFF;AAGLL,UAAAA;AAHK,SAAP;;AAKF,WAAK,UAAL;AACA,WAAK,kBAAL;AACE,eAAO;AACLD,UAAAA,SADK;AAELM,UAAAA,KAAK,EAAE;AAFF,SAAP;;AAIF,WAAK,cAAL;AACE,eAAO;AACLN,UAAAA,SADK;AAELC,UAAAA,OAFK;AAGLK,UAAAA,KAAK,EAAE;AAHF,SAAP;AAdJ;AAoBD,GAjCyB,CAA1B;AAkCD","sourcesContent":["import type { AbtTokensService } from '../../abt-tokens-service';\nimport type { StateHandler } from '../HandlerFactory';\nimport { stateHandlerFactory } from '../HandlerFactory';\nimport { getSecureToken } from '../../../native';\nimport { PayloadAction } from '../../../native/types';\nimport { logger } from '../../../logger';\n\nexport default function validatingHandler(\n  abtTokensService: AbtTokensService\n): StateHandler {\n  return stateHandlerFactory(['Validating'], async (s) => {\n    const { accountId, tokenId } = s;\n    logger.info('validating', undefined, { accountId, tokenId });\n    const signedToken = await getSecureToken(accountId, tokenId, true, [\n      PayloadAction.getFarecontracts,\n    ]);\n    const { state: validationState } = await abtTokensService.validateToken(\n      tokenId,\n      signedToken\n    );\n\n    logger.info('validation_state', undefined, { validationState });\n\n    switch (validationState) {\n      case 'Valid':\n        return {\n          accountId,\n          state: 'Valid',\n          tokenId,\n        };\n      case 'NotFound':\n      case 'NeedsReplacement':\n        return {\n          accountId,\n          state: 'DeleteLocal',\n        };\n      case 'NeedsRenewal':\n        return {\n          accountId,\n          tokenId,\n          state: 'InitiateRenewal',\n        };\n    }\n  });\n}\n"]}