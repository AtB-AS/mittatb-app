{"version":3,"sources":["utils.ts"],"names":["NetInfo","verifyCorrectTokenId","initialTokenId","tokenId","Error","STORAGE_KEY_PREFIX","getStoreKey","accountId","missingNetConnection","fetch","then","state","isConnected","isTokenInspectable","tokens","find","t","id","allowedActions","includes"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iCAApB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,CAClCC,cADkC,EAElCC,OAFkC,KAG/B;AACH,MAAIA,OAAO,KAAKD,cAAhB,EAAgC;AAC9B,UAAME,KAAK,CACR,mBAAkBD,OAAQ,oCAAmCD,cAAe,EADpE,CAAX;AAGD;AACF,CATM;AAWP,MAAMG,kBAAkB,GAAG,uBAA3B;AACA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IACxB,GAAEF,kBAAmB,IAAGE,SAAU,EAD9B;AAGP,OAAO,MAAMC,oBAAoB,GAAG,MAClCR,OAAO,CAACS,KAAR,GAAgBC,IAAhB,CAAsBC,KAAD,IAAW;AAAA;;AAC9B,+BAAO,CAACA,KAAK,CAACC,WAAd,mEAA6B,IAA7B;AACD,CAFD,CADK;AAKP,OAAO,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAAwBX,OAAxB;AAAA;;AAAA,SAChC,iBAAAW,MAAM,CACHC,IADH,CACSC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASd,OADxB,+DAEIe,cAFJ,CAEmBC,QAFnB,CAE4B,gCAF5B,MAEiE,KAHjC;AAAA,CAA3B","sourcesContent":["import NetInfo from '@react-native-community/netinfo';\nimport type { StoredToken } from '@entur/react-native-traveller';\n\nexport const verifyCorrectTokenId = (\n  initialTokenId: string,\n  tokenId: string\n) => {\n  if (tokenId !== initialTokenId) {\n    throw Error(\n      `Activated token ${tokenId} does not match initial token id ${initialTokenId}`\n    );\n  }\n};\n\nconst STORAGE_KEY_PREFIX = '@mobiletokensdk-state';\nexport const getStoreKey = (accountId: string) =>\n  `${STORAGE_KEY_PREFIX}#${accountId}`;\n\nexport const missingNetConnection = () =>\n  NetInfo.fetch().then((state) => {\n    return !state.isConnected ?? true;\n  });\n\nexport const isTokenInspectable = (tokens: StoredToken[], tokenId: string) =>\n  tokens\n    .find((t) => t.id === tokenId)\n    ?.allowedActions.includes('TOKEN_ACTION_TICKET_INSPECTION') || false;\n"]}