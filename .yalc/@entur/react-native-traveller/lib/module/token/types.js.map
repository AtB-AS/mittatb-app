{"version":3,"sources":["types.ts"],"names":["errorTypes","tokenStates"],"mappings":"AAgFA,MAAMA,UAAU,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,EAA8B,SAA9B,CAAnB;AAeA,MAAMC,WAAW,GAAG,CAClB,UADkB,EAElB,SAFkB,EAGlB,OAHkB,EAIlB,yBAJkB,EAKlB,YALkB,EAMlB,aANkB,EAOlB,aAPkB,EAQlB,iBARkB,EASlB,WATkB,EAUlB,eAVkB,EAWlB,aAXkB,EAYlB,iBAZkB,EAalB,UAbkB,CAApB","sourcesContent":["import type { Token } from '@entur/react-native-traveller';\n\nexport type InitializeTokenRequest = {\n  requireAttestation: boolean;\n  deviceName: string;\n  keyValues?: Map<string, string>;\n};\n\nexport type InitializeTokenResponse = {\n  attestationEncryptionPublicKey: string;\n  tokenId: string;\n  /** base64 encoded nonce */\n  nonce: string;\n  nonceValidityEnd: number;\n};\n\nexport type ListTokensResponse = {\n  id: string;\n  // deviceName: string;\n  // deviceId: string;\n}[];\n\nexport type GetTokenCertificateResponse = ActivateTokenResponse;\n\nexport type RenewTokenResponse = {\n  attestationEncryptionPublicKey: string;\n  tokenId: string;\n  /** base64 encoded nonce */\n  nonce: string;\n  nonceValidityEnd: number;\n};\n\nexport type AttestationIOSDeviceCheck = {\n  attestationType: 'iOS_Device_Check';\n  /** base64 encoded data from iOS DeviceCheck API */\n  encryptedIosDeviceCheckData: string;\n  /** base64 encoded RSA encrypted AES key, for attestation type 'iOS_Device_Check'. Encrypted with the attestationEncryptionPublicKey from InitializeTokenResponse. */\n  attestationEncryptionEncryptedKey: string;\n};\n\nexport type ActivateTokenRequest = {\n  /** base64 encoded token public key */\n  signaturePublicKey?: string;\n  encryptionPublicKey?: string;\n  attestation:\n    | {\n        attestationType: 'iOS_Device_Check';\n        /** base64 encoded data from iOS DeviceCheck API */\n        encryptedIosDeviceCheckData: string;\n        /** base64 encoded RSA encrypted AES key, for attestation type 'iOS_Device_Check'. Encrypted with the attestationEncryptionPublicKey from InitializeTokenResponse. */\n        attestationEncryptionEncryptedKey: string;\n      }\n    | {\n        attestationType: 'SafetyNet';\n        /** SafetyNet JWS from client */\n        safetyNetJws: string;\n        /** base64 encoded attestations for public key, for attestation type 'SafetyNet'. */\n        signaturePublicKeyAttestation: string[];\n        /** base64 encoded attestations for encryption public key, for attestation type 'SafetyNet'. */\n        encryptionPublicKeyAttestation: string[];\n      }\n    | {\n        attestationType: 'iOS_Device_Attestation';\n        /** base64 encoded object from API, should be created with serialized DeviceAttestationData as a challeng */\n        attestationObject: string;\n        /** base64 encoded key id, from generated iOS app attest data. */\n        keyId: string;\n        /** base64 encoded serialized DeviceAttestationData protobuf */\n        deviceAttestationData: string;\n      };\n};\n\nexport type ActivateTokenResponse = {\n  // base64 encoded certificate\n  certificate: string;\n  tokenId: string;\n  tokenValidityStart: number;\n  tokenValidityEnd: number;\n};\n\nconst errorTypes = ['None', 'Severe', 'Unknown', 'Network'] as const;\nexport type ErrorType = typeof errorTypes[number];\n\nexport type TokenError = {\n  missingNetConnection: boolean;\n  message: string;\n  err?: any;\n};\n\nexport type TokenStatus = {\n  state: TokenState;\n  error?: TokenError;\n  visualState: VisualState;\n};\n\nconst tokenStates = [\n  'Starting',\n  'Loading',\n  'Valid',\n  'GettingTokenCertificate',\n  'Validating',\n  'DeleteLocal',\n  'InitiateNew',\n  'InitiateRenewal',\n  'AttestNew',\n  'AttestRenewal',\n  'ActivateNew',\n  'ActivateRenewal',\n  'AddToken',\n] as const;\nexport type TokenState = typeof tokenStates[number];\n\nexport type StoredState = {\n  accountId: string;\n  error?: TokenError;\n} & (\n  | {\n      state:\n        | 'Starting'\n        | 'Loading'\n        | 'InitiateNew'\n        | 'DeleteLocal'\n        | 'InitiateRenewal'\n        | 'Valid'\n        | 'GettingTokenCertificate';\n    }\n  | {\n      state: 'Validating';\n      token: Token;\n    }\n  | {\n      state: 'AttestNew' | 'AttestRenewal';\n      initiatedData: InitializeTokenResponse;\n    }\n  | {\n      state: 'ActivateNew' | 'ActivateRenewal';\n      attestationData: ActivateTokenRequest;\n      tokenId: string;\n    }\n  | {\n      state: 'AddToken';\n      activatedData: ActivateTokenResponse;\n    }\n);\n\nexport type VisualState =\n  | 'Token'\n  | 'Loading'\n  | 'Error'\n  | 'MissingNetConnection';\n"]}