{"version":3,"sources":["types.ts"],"names":["errorTypes","tokenStates"],"mappings":"AA2EA,MAAMA,UAAU,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,CAAnB;AAcA,MAAMC,WAAW,GAAG,CAClB,SADkB,EAElB,OAFkB,EAGlB,YAHkB,EAIlB,YAJkB,EAKlB,UALkB,CAApB","sourcesContent":["export type InitializeTokenRequest = {\n  requireAttestation: boolean;\n};\n\nexport type InitializeTokenResponse = {\n  attestationEncryptionPublicKey: string;\n  tokenId: string;\n  /** base64 encoded nonce */\n  nonce: string;\n  nonceValidityEnd: number;\n};\n\nexport type ListTokensResponse = { id: string }[];\n\nexport type RenewTokenRequest = {\n  existingToken?: string;\n};\n\nexport type RenewTokenResponse = {\n  attestationEncryptionPublicKey: string;\n  tokenId: string;\n  /** base64 encoded nonce */\n  nonce: string;\n  nonceValidityEnd: number;\n};\n\nexport type AttestationIOSDeviceCheck = {\n  attestationType: 'iOS_Device_Check';\n  /** base64 encoded data from iOS DeviceCheck API */\n  encryptedIosDeviceCheckData: string;\n  /** base64 encoded RSA encrypted AES key, for attestation type 'iOS_Device_Check'. Encrypted with the attestationEncryptionPublicKey from InitializeTokenResponse. */\n  attestationEncryptionEncryptedKey: string;\n};\n\nexport type ActivateTokenRequest = {\n  /** base64 encoded token public key */\n  signaturePublicKey?: string;\n  encryptionPublicKey?: string;\n  existingToken?: string;\n  attestation:\n    | {\n        attestationType: 'iOS_Device_Check';\n        /** base64 encoded data from iOS DeviceCheck API */\n        encryptedIosDeviceCheckData: string;\n        /** base64 encoded RSA encrypted AES key, for attestation type 'iOS_Device_Check'. Encrypted with the attestationEncryptionPublicKey from InitializeTokenResponse. */\n        attestationEncryptionEncryptedKey: string;\n      }\n    | {\n        attestationType: 'SafetyNet';\n        /** SafetyNet JWS from client */\n        safetyNetJws: string;\n        /** base64 encoded attestations for public key, for attestation type 'SafetyNet'. */\n        signaturePublicKeyAttestation: string[];\n        /** base64 encoded attestations for encryption public key, for attestation type 'SafetyNet'. */\n        encryptionPublicKeyAttestation: string[];\n      }\n    | {\n        attestationType: 'iOS_Device_Attestation';\n        /** base64 encoded object from API, should be created with serialized DeviceAttestationData as a challeng */\n        attestationObject: string;\n        /** base64 encoded key id, from generated iOS app attest data. */\n        keyId: string;\n        /** base64 encoded serialized DeviceAttestationData protobuf */\n        deviceAttestationData: string;\n      };\n};\n\nexport type ActivateTokenResponse = {\n  // base64 encoded certificate\n  certificate: string;\n  tokenId: string;\n  tokenValidityStart: number;\n  tokenValidityEnd: number;\n};\n\nconst errorTypes = ['None', 'Unknown', 'Network'] as const;\nexport type ErrorType = typeof errorTypes[number];\n\nexport type TokenError = {\n  type: ErrorType;\n  message: string;\n  err: any;\n};\n\nexport type TokenStatus = {\n  state: TokenState;\n  error?: TokenError;\n};\n\nconst tokenStates = [\n  'Loading',\n  'Valid',\n  'Validating',\n  'Initiating',\n  'Renewing',\n] as const;\nexport type TokenState = typeof tokenStates[number];\n"]}