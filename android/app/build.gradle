apply plugin: "com.android.application"

apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

// @TODO Maybe remove
// project.ext.react = [
//         entryFile           : "index.js",
//         enableHermes        : true,  // clean and rebuild if changing
//         devDisabledInStore  : true,
//         bundleInStore       : true,
//         devDisabledInStaging: true,
//         bundleInStaging     : true,
//         deleteDebugFilesForVariant: {
//           def variant -> variant.name.toLowerCase().contains("release") || variant.name.toLowerCase().contains("staging") || variant.name.toLowerCase().contains("store")
//         }
// ]

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

apply from: "../../node_modules/@bugsnag/react-native/bugsnag-react-native.gradle"

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);


def envFile = file('../../.env')
if (envFile.exists()) {
    envFile.eachLine { line ->
        def result = line.tokenize("=")
        def key = result[0]
        def value = result[1]
        if (System.getProperty(key) == null) {
            System.setProperty(key, value)
        }
    }
} else {
    throw new GradleException(".env not found in project root dir. ")
}

def appApplicationId = System.getProperty('ANDROID_APPLICATION_ID')
if (appApplicationId == null) {
    throw new GradleException("ANDROID_APPLICATION_ID not found. Define ANDROID_APPLICATION_ID with the application ID in the .env file.")
}

def appVersionName = System.getProperty('APP_VERSION')
if (appVersionName == null) {
    throw new GradleException("APP_VERSION not found. Define APP_VERSION with current app version name in the .env file.")
}

def appName = System.getProperty('APP_NAME')
if (appName == null) {
    throw new GradleException("APP_NAME not found. Define APP_NAME with current app name in the .env file.")
}

def appScheme = System.getProperty('APP_SCHEME')
if (appScheme == null) {
    throw new GradleException("APP_SCHEME not found. Define APP_SCHEME with current org identifier in the .env file.")
}

def appVersionCode = '1'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        coreLibraryDesugaringEnabled = true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace appApplicationId
    defaultConfig {
        resValue "string", "app_name", appName
        resValue "string", "app_scheme", appScheme
        applicationId appApplicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName appVersionName
        multiDexEnabled true


        if (System.getenv()["CI"]) {
            versionCode System.getenv()["BUILD_ID"] as Integer
        } else {
            versionCode appVersionCode.toInteger()
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        store {
            initWith buildTypes.release
            matchingFallbacks = ['release']
        }
        staging {
            initWith buildTypes.release
            matchingFallbacks = ['release']
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // packagingOptions {
            //     exclude "lib/arm64-v8a/libhermes-executor-debug.so"
            //     exclude "lib/arm64-v8a/libhermes-inspector.so"
            //     exclude "lib/arm64-v8a/libjscexecutor.so"
            //     exclude "lib/armeabi-v7a/libhermes-executor-debug.so"
            //     exclude "lib/armeabi-v7a/libhermes-inspector.so"
            //     exclude "lib/armeabi-v7a/libjscexecutor.so"
            //     exclude "lib/x86/libhermes-executor-debug.so"
            //     exclude "lib/x86/libhermes-inspector.so"
            //     exclude "lib/x86/libjscexecutor.so"
            //     exclude "lib/x86_64/libhermes-executor-debug.so"
            //     exclude "lib/x86_64/libhermes-inspector.so"
            //     exclude "lib/x86_64/libjscexecutor.so"
            // }
        }
    }

    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }
}

dependencies {

    implementation 'com.facebook.soloader:soloader:0.9.0+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    implementation fileTree(dir: "libs", include: ["*.jar"])

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.core:core-splashscreen:1.0.0"

    implementation 'io.intercom.android:intercom-sdk-base:9.+'
    implementation 'io.intercom.android:intercom-sdk:9.+'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:0.182.0") {
        exclude group: 'com.facebook.flipper'
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
