diff --git a/android/gradle.properties b/android/gradle.properties
index 6ce09d09c..db6d61ffa 100644
--- a/android/gradle.properties
+++ b/android/gradle.properties
@@ -15,7 +15,7 @@ reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
 # your application. You should enable this flag either if you want
 # to write custom TurboModules/Fabric components OR use libraries that
 # are providing them.
-newArchEnabled=false
+newArchEnabled=true
 
 # Use this property to enable or disable the Hermes JS engine.
 # If set to false, you will be using JSC instead.
diff --git a/babel.config.js b/babel.config.js
index eef0a2450..e68bb066c 100644
--- a/babel.config.js
+++ b/babel.config.js
@@ -14,6 +14,6 @@ module.exports = {
         },
       },
     ],
-    'react-native-reanimated/plugin',
+    'react-native-worklets/plugin',
   ],
 };
diff --git a/ios/AtbAppIntent/Info.plist b/ios/AtbAppIntent/Info.plist
index 00e09b5dc..43b2eb727 100644
--- a/ios/AtbAppIntent/Info.plist
+++ b/ios/AtbAppIntent/Info.plist
@@ -21,6 +21,6 @@
 		<string>$(PRODUCT_MODULE_NAME).IntentHandler</string>
 	</dict>
 	<key>RCTNewArchEnabled</key>
-	<false/>
+	<true/>
 </dict>
 </plist>
diff --git a/ios/Podfile b/ios/Podfile
index f81d712ea..6d1a34a4c 100644
--- a/ios/Podfile
+++ b/ios/Podfile
@@ -1,10 +1,5 @@
 plugin 'cocoapods-patch'
 
-# Disable new architecture, this now comes true by default,
-# but there are some of our dependencies still not compatible.
-# For more details please check https://reactnative.dev/architecture/landing-page#ios
-ENV['RCT_NEW_ARCH_ENABLED'] = '0'
-
 def node_require(script)
   # Resolve script with node to allow for hoisting
   require Pod::Executable.execute_command('node', ['-p',
diff --git a/ios/atb/Info.plist b/ios/atb/Info.plist
index e595839a3..060303222 100644
--- a/ios/atb/Info.plist
+++ b/ios/atb/Info.plist
@@ -97,7 +97,7 @@
 		<string>UseLocationIntent</string>
 	</array>
 	<key>RCTNewArchEnabled</key>
-	<false/>
+	<true/>
 	<key>UIAppFonts</key>
 	<array>
 		<string>Roboto-Bold.ttf</string>
diff --git a/ios/departureWidget/Info.plist b/ios/departureWidget/Info.plist
index 1a4257fed..9a6b31975 100644
--- a/ios/departureWidget/Info.plist
+++ b/ios/departureWidget/Info.plist
@@ -12,6 +12,6 @@
 	<key>NSWidgetWantsLocation</key>
 	<true/>
 	<key>RCTNewArchEnabled</key>
-	<false/>
+	<true/>
 </dict>
 </plist>
diff --git a/package.json b/package.json
index 4d3925b3d..440424166 100644
--- a/package.json
+++ b/package.json
@@ -108,17 +108,18 @@
     "react-native-get-random-values": "^1.11.0",
     "react-native-in-app-review": "4.4.2",
     "react-native-inappbrowser-reborn": "^3.7.0",
-    "react-native-kettle-module": "1.2.0",
+    "react-native-kettle-module": "2.0.0",
     "react-native-linear-gradient": "^2.8.3",
     "react-native-localize": "^3.2.1",
     "react-native-pager-view": "^6.3.3",
     "react-native-permissions": "^5.4.2",
     "react-native-portalize": "^1.0.7",
-    "react-native-reanimated": "3.19.1",
+    "react-native-reanimated": "^4.1.0",
     "react-native-safe-area-context": "^5.6.0",
     "react-native-screens": "^4.16.0",
     "react-native-svg": "^15.12.1",
     "react-native-tab-view": "^4.1.3",
+    "react-native-worklets": "^0.5.0",
     "search-params": "^4.0.1",
     "string.fromcodepoint": "^1.0.3",
     "use-reducer-with-side-effects": "^2.2.0",
@@ -137,7 +138,7 @@
     "@react-native-community/cli": "^20.0.0",
     "@react-native-community/cli-platform-android": "^20.0.0",
     "@react-native-community/cli-platform-ios": "^20.0.0",
-    "@react-native-community/slider": "^4.5.2",
+    "@react-native-community/slider": "5.0.1",
     "@react-native/babel-preset": "^0.81.0",
     "@react-native/eslint-config": "0.81.1",
     "@react-native/metro-config": "^0.81.0",
diff --git a/src/components/parallax-scroll/ParallaxScroll.tsx b/src/components/parallax-scroll/ParallaxScroll.tsx
index f6598a8f2..973a86405 100644
--- a/src/components/parallax-scroll/ParallaxScroll.tsx
+++ b/src/components/parallax-scroll/ParallaxScroll.tsx
@@ -149,5 +149,6 @@ const useStyles = StyleSheet.createThemeHook(() => ({
     left: 0,
     right: 0,
   },
-  childrenIOS: {overflow: 'visible'},
+  // used to be overflow: 'visible', but that squishes content under new architecture
+  childrenIOS: {},
 }));
diff --git a/src/components/toggle/Toggle.tsx b/src/components/toggle/Toggle.tsx
index e17caa3c9..e68dfe3b2 100644
--- a/src/components/toggle/Toggle.tsx
+++ b/src/components/toggle/Toggle.tsx
@@ -54,10 +54,6 @@ export function Toggle({
         // The disabled state is not shown visually on Android by default, so we
         // need to style it manually.
         Platform.OS === 'android' && props.disabled && styles.androidDisabled,
-
-        // Fix for React Native 0.81 Switch component layout issue
-        // See: https://github.com/facebook/react-native/issues/53537
-        styles.fixedDimensions,
       ]}
       {...props}
       testID={props.testID}
@@ -80,11 +76,5 @@ const useStyles = StyleSheet.createThemeHook(() => {
     ios: {
       transform: [{scale: 0.7 * scale}],
     },
-    fixedDimensions: {
-      // Fix for React Native 0.81 Switch component layout problem
-      // Adding explicit dimensions as recommended in the issue
-      width: 51, // Standard iOS switch width
-      height: 31, // Standard iOS switch height
-    },
   };
 });
diff --git a/src/modules/beacons/BeaconsContext.tsx b/src/modules/beacons/BeaconsContext.tsx
index 98b0c5dab..45d91a3f3 100644
--- a/src/modules/beacons/BeaconsContext.tsx
+++ b/src/modules/beacons/BeaconsContext.tsx
@@ -40,7 +40,7 @@ type BeaconsInfo = {
    * definitions. Not to be confused with permissions.
    * https://developer.kogenta.com/docs/kettle/react-native/usage#consents
    */
-  consents: Record<string, boolean> | null;
+  consents: number[];
 };
 
 type BeaconsContextState = {
@@ -104,7 +104,10 @@ const BeaconsContextProvider = ({children}: Props) => {
   const isInitializedRef = useRef(false);
   const isBeaconsSupported = isBeaconsEnabled && !!KETTLE_API_KEY;
 
-  const updateBeaconsInfo = () => getBeaconsInfo().then(setBeaconsInfo);
+  const updateBeaconsInfo = () => {
+    const beaconsInfo = getBeaconsInfo();
+    setBeaconsInfo(beaconsInfo);
+  };
 
   const initializeKettle = useCallback(async (bypassPermissions: boolean) => {
     // By checking permissions we can avoid initializing the SDK if the user
@@ -131,12 +134,12 @@ const BeaconsContextProvider = ({children}: Props) => {
 
   const getPrivacyDashboardUrl = useCallback(async () => {
     await initializeKettle(true);
-    return await Kettle.getPrivacyDashboardUrl();
+    return Kettle.getPrivacyDashboardUrl();
   }, [initializeKettle]);
 
   const getPrivacyTermsUrl = useCallback(async () => {
     await initializeKettle(true);
-    return await Kettle.getPrivacyTermsUrl();
+    return Kettle.getPrivacyTermsUrl();
   }, [initializeKettle]);
 
   const onboardForBeacons = useCallback(
@@ -183,15 +186,17 @@ const BeaconsContextProvider = ({children}: Props) => {
     Kettle.revoke(BEACONS_CONSENTS);
     await storage.set(storeKey.beaconsConsent, 'false');
     setIsConsentGranted(false);
-    await updateBeaconsInfo();
+    updateBeaconsInfo();
   }, [isBeaconsSupported, stopBeacons, initializeKettle]);
 
   const deleteCollectedData = useCallback(async () => {
     if (!isBeaconsSupported) return;
     await initializeKettle(true);
-    Kettle.deleteCollectedData().catch((error) => {
-      Bugsnag.notify(error);
-    });
+    try {
+      Kettle.deleteCollectedData();
+    } catch (error: unknown) {
+      Bugsnag.notify(error as Error);
+    }
   }, [isBeaconsSupported, initializeKettle]);
 
   useEffect(() => {
@@ -202,7 +207,7 @@ const BeaconsContextProvider = ({children}: Props) => {
         // when the app is already onboarded for beacons.
         if (isInitializedRef.current) {
           stopBeacons();
-          await updateBeaconsInfo();
+          updateBeaconsInfo();
         }
         return;
       }
@@ -222,7 +227,7 @@ const BeaconsContextProvider = ({children}: Props) => {
         // If the user have given consents, but permissions were enabled later,
         // the consents are not necessarily set in the SDK. So we check the SDKs
         // list of granted consents and grant if they are not set.
-        const consents: any[] = await Kettle.getGrantedConsents();
+        const consents = Kettle.getGrantedConsents();
         if (consents.length === 0) {
           Kettle.grant(BEACONS_CONSENTS);
         }
@@ -265,10 +270,10 @@ const BeaconsContextProvider = ({children}: Props) => {
   );
 };
 
-const getBeaconsInfo = async (): Promise<BeaconsInfo> => {
-  const isStarted = await Kettle.isStarted();
-  const identifier = await Kettle.getIdentifier();
-  const consents = await Kettle.getGrantedConsents();
+const getBeaconsInfo = (): BeaconsInfo => {
+  const isStarted = Kettle.isStarted();
+  const identifier = Kettle.getIdentifier();
+  const consents = Kettle.getGrantedConsents();
   return {
     isStarted,
     identifier,
diff --git a/src/modules/beacons/permissions.ts b/src/modules/beacons/permissions.ts
index e7d566f7a..5b6d93d54 100644
--- a/src/modules/beacons/permissions.ts
+++ b/src/modules/beacons/permissions.ts
@@ -1,6 +1,5 @@
 import {Platform} from 'react-native';
-import {KettleModules} from 'react-native-kettle-module';
-import {KettleConsents} from 'react-native-kettle-module';
+import {KettleModules, KettleConsents} from 'react-native-kettle-module';
 import {
   PERMISSIONS,
   Permission,
