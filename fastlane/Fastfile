fastlane_version '2.142.0'

before_all do
  # ensure_git_status_clean
  # git_pull
end

platform :ios do
  desc 'Update ad hoc devices'
  lane :update_devices do
    register_devices(devices_file: "./ios/devices.txt")
    match(type: "adhoc", force_for_new_devices: true)
  end

  desc 'Match certificates'
  lane :get_cert do
    ensure_env_vars(
      env_vars: ['MATCH_PASSWORD', 'FASTLANE_MATCH_URL', 'MATCH_TYPE', 'BUNDLE_IDENTIFIER', 'APPLE_TEAM_ID']
    )
    if is_ci
      create_keychain(
        name: "CI",
        password: ENV["MATCH_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: ENV["MATCH_TYPE"],
        app_identifier: ENV['BUNDLE_IDENTIFIER'],
        storage_mode: 'git',
        git_url: ENV['FASTLANE_MATCH_URL'],
        readonly: true,
        keychain_name: "CI",
        keychain_password: ENV["MATCH_PASSWORD"],
        team_id: ENV['APPLE_TEAM_ID']
      )
    else
      match(
        type: ENV["MATCH_TYPE"],
        app_identifier: ENV['BUNDLE_IDENTIFIER'],
        storage_mode: 'git',
        git_url: ENV['FASTLANE_MATCH_URL'],
        team_id: ENV['APPLE_TEAM_ID'],
        readonly: true
      )
    end
  end
  # iOS Lanes
  desc 'Build the iOS application.'
  lane :build do
    ensure_env_vars(
      env_vars: ['BUILD_ID', 'EXPORT_METHOD']
    )
    increment_build_number(
      build_number: ENV["BUILD_ID"],
      xcodeproj: './ios/atb.xcodeproj/'
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./ios/atb.xcodeproj"
    )
    cocoapods(podfile: './ios/Podfile')
    build_app(
      scheme: 'atb',
      configuration: 'Release',
      export_method: ENV['EXPORT_METHOD'],
      workspace: './ios/atb.xcworkspace'
    )
  end

  desc 'Upload the build to AppCenter'
  lane :appcenter_staging do
    ensure_env_vars(
      env_vars: ['APPCENTER_API_KEY']
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_KEY"],
      owner_name: "AtB-AS",
      app_name: "MittAtb-1",
      owner_type: "organization",
      destinations: "*",
      file: "AtB.ipa",
      notify_testers: true
    )
  end

  desc 'Upload the build to AppCenter for distribution to TestFlight'
  lane :appcenter_testflight do
    ensure_env_vars(
      env_vars: ['APPCENTER_API_KEY', 'RELEASE_NOTES', 'RELEASE_URL']
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_KEY"],
      owner_name: "AtB-AS",
      app_name: "MittAtb-1",
      owner_type: "organization",
      file: "AtB.ipa",
      destination_type: "store",
      destinations: "AtB Internal",
      release_notes: ENV['RELEASE_NOTES'][0..3999],
      release_notes_link: ENV['RELEASE_URL']
    )
  end
end

platform :android do
  desc 'Upload the build to AppCenter'

  lane :build do
    ensure_env_vars(
      env_vars: ['BUILD_ID', 'KEYSTORE_PASS', 'KEY_ALIAS', 'KEY_PASS', 'APP_ENVIRONMENT']
    )
    build_type = ENV['APP_ENVIRONMENT']
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      task: 'assemble',
      build_type: build_type,
      project_dir: 'android/',
      print_command: false, #don't print my passwords please
      properties: {
        "versionCode" => ENV["BUILD_ID"],
        "android.injected.signing.store.file" => "./keystore.jks",
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASS"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASS"],
      })
    sh("cp", "../android/app/build/outputs/apk/#{build_type}/app-#{build_type}.apk", "../")
    sh("mkdir", "-p", "../bundle")
    sh("cp", "../android/app/build/generated/assets/react/#{build_type}/index.android.bundle", "../bundle")
    sh("cp", "../android/app/build/generated/sourcemaps/react/#{build_type}/index.android.bundle.map", "../bundle")
  end

  lane :appcenter_staging do
    ensure_env_vars(
      env_vars: ['APPCENTER_API_KEY']
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_KEY"],
      owner_name: "AtB-AS",
      app_name: "MittAtb",
      owner_type: "organization",
      destinations: "*",
      file: "app-staging.apk",
      notify_testers: true
    )
  end

  lane :appcenter_alpha do
    ensure_env_vars(
      env_vars: ['APPCENTER_API_KEY', 'RELEASE_NOTES', 'RELEASE_URL']
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_KEY"],
      owner_name: "AtB-AS",
      app_name: "MittAtb",
      owner_type: "organization",
      file: "app-store.apk",
      destination_type: "store",
      destinations: "Alpha",
      release_notes: ENV['RELEASE_NOTES'][0..499],
      release_notes_link: ENV['RELEASE_URL']
    )
  end
end




