diff --git a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
index 508494a..cc229b4 100644
--- a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
+++ b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
@@ -19,6 +19,7 @@
 static NSString *const RCTExpoStorageDirectory = @"RCTAsyncLocalStorage";
 static NSString *const RCTManifestFileName = @"manifest.json";
 static const NSUInteger RCTInlineValueThreshold = 1024;
+static NSString *AppGroupName;
 
 #pragma mark - Static helper functions
 
@@ -134,9 +135,14 @@ static void RCTAppendError(NSDictionary *error, NSMutableArray<NSDictionary *> *
     storageDirectoryPath =
         NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES).firstObject;
 #else
-    storageDirectoryPath =
+    if (!AppGroupName) {
+        storageDirectoryPath =
         NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, YES)
             .firstObject;
+    } else {
+        NSURL *pathUrl = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:AppGroupName];
+        storageDirectoryPath = pathUrl.path;
+    }
     // We should use the "Application Support/[bundleID]" folder for persistent data storage that's
     // hidden from users
     storageDirectoryPath = [storageDirectoryPath
@@ -155,7 +161,7 @@ static void RCTAppendError(NSDictionary *error, NSMutableArray<NSDictionary *> *
     static NSString *storageDirectory = nil;
     static dispatch_once_t onceToken;
     dispatch_once(&onceToken, ^{
-      storageDirectory = RCTCreateStorageDirectoryPath(RCTStorageDirectory);
+        storageDirectory = RCTCreateStorageDirectoryPath(RCTStorageDirectory);
     });
     return storageDirectory;
 }
@@ -170,7 +176,7 @@ static void RCTAppendError(NSDictionary *error, NSMutableArray<NSDictionary *> *
     static NSString *manifestFilePath = nil;
     static dispatch_once_t onceToken;
     dispatch_once(&onceToken, ^{
-      manifestFilePath = RCTCreateManifestFilePath(RCTStorageDirectory);
+        manifestFilePath = RCTCreateManifestFilePath(RCTStorageDirectory);
     });
     return manifestFilePath;
 }
@@ -663,8 +669,26 @@ - (BOOL)_passthroughDelegate
         [self.delegate respondsToSelector:@selector(isPassthrough)] && self.delegate.isPassthrough;
 }
 
+-(void)_setGroupName:(NSString *)groupName {
+    AppGroupName = groupName;
+}
+
 #pragma mark - Exported JS Functions
 
+// clang-format off
+RCT_EXPORT_METHOD(setAppGroupName:(NSString*)groupName
+                  callback:(RCTResponseSenderBlock)callback)
+// clang-format on
+{
+    [self _setGroupName: NULL];
+    NSString *oldDirectory = RCTCreateStorageDirectoryPath(RCTStorageDirectory);
+    [self _setGroupName: groupName];
+    NSString *newDirectory = RCTCreateStorageDirectoryPath(RCTStorageDirectory);
+    // Move files from previous location to a new one in the group
+    RCTStorageDirectoryMigrationCheck(oldDirectory, newDirectory, YES);
+    callback(@[RCTNullIfNil(nil)]);
+}
+
 // clang-format off
 RCT_EXPORT_METHOD(multiGet:(NSArray<NSString *> *)keys
                   callback:(RCTResponseSenderBlock)callback)
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js
index ebb9850..39bda5d 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js
@@ -54,6 +54,12 @@ function createPromiseAll(promises, callback, processResult) {
   });
 }
 const AsyncStorage = {
+  /**
+   * Sets `groupName` value.
+   */
+  setAppGroupName: (_groupName, callback) => {
+    return createPromise(() => undefined, callback);
+  },
   /**
    * Fetches `key` value.
    */
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js.map b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js.map
index 5274baa..fb5cc2f 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.js.map
@@ -1 +1 @@
-{"version":3,"names":["_mergeOptions","_interopRequireDefault","require","obj","__esModule","default","merge","mergeOptions","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","undefined","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge","_default","exports"],"sources":["AsyncStorage.ts"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"names":["_mergeOptions","_interopRequireDefault","require","obj","__esModule","default","merge","mergeOptions","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","setAppGroupName","_groupName","undefined","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge","_default","exports"],"sources":["AsyncStorage.ts"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Sets `groupName` value.\n   */\n  setAppGroupName: (_groupName, callback) => {\n    return createPromise(() => undefined, callback);\n  },\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js
index d8c9cda..7358d8b 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js
@@ -45,6 +45,19 @@ const AsyncStorage = (() => {
   let _getKeys = [];
   let _immediate = null;
   return {
+    setAppGroupName: (groupName, callback) => {
+      return new Promise((resolve, reject) => {
+        _RCTAsyncStorage.default.setAppGroupName(groupName, error => {
+          const err = (0, _helpers.convertError)(error);
+          callback === null || callback === void 0 ? void 0 : callback(err);
+          if (err) {
+            reject(err);
+          } else {
+            resolve(undefined);
+          }
+        });
+      });
+    },
     /**
      * Fetches an item for a `key` and invokes a callback upon completion.
      *
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js.map b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js.map
index 069ae25..5f815e2 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/AsyncStorage.native.js.map
@@ -1 +1 @@
-{"version":3,"names":["_helpers","require","_RCTAsyncStorage","_interopRequireDefault","obj","__esModule","default","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","checkValidInput","multiGet","errors","result","_result$","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","reqLength","length","errorList","i","_request$callback2","_request$resolve","request","_request$callback","_request$reject","call","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs","_ref2","_default","exports"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"names":["_helpers","require","_RCTAsyncStorage","_interopRequireDefault","obj","__esModule","default","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","setAppGroupName","groupName","callback","Promise","resolve","reject","error","err","convertError","undefined","getItem","key","checkValidInput","multiGet","errors","result","_result$","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","reqLength","length","errorList","i","_request$callback2","_request$resolve","request","_request$callback","_request$reject","call","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs","_ref2","_default","exports"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    setAppGroupName: (groupName, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.setAppGroupName(groupName, (error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve(undefined);\n          }\n        });\n      });\n    },\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/RCTAsyncStorage.js.map b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/RCTAsyncStorage.js.map
index eeb7031..a5e6c68 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/RCTAsyncStorage.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/RCTAsyncStorage.js.map
@@ -1 +1 @@
-{"version":3,"names":["_reactNative","require","_shouldFallbackToLegacyNativeModule","RCTAsyncStorage","TurboModuleRegistry","get","NativeModules","shouldFallbackToLegacyNativeModule","_default","exports","default"],"sources":["RCTAsyncStorage.ts"],"sourcesContent":["// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get('PlatformLocalStorage') || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get('RNC_AsyncSQLiteDBStorage') ||\n    TurboModuleRegistry.get('RNCAsyncStorage')\n  : NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n    NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n    NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"],"mappings":";;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,mCAAA,GAAAD,OAAA;AAFA;;AAIA;AACA;AACA;AACA,IAAIE,eAAe,GAAGC,gCAAmB,GACrCA,gCAAmB,CAACC,GAAG,CAAC,sBAAsB,CAAC;AAAI;AACnDD,gCAAmB,CAACC,GAAG,CAAC,0BAA0B,CAAC,IACnDD,gCAAmB,CAACC,GAAG,CAAC,iBAAiB,CAAC,GAC1CC,0BAAa,CAAC,sBAAsB,CAAC;AAAI;AACzCA,0BAAa,CAAC,0BAA0B,CAAC,IACzCA,0BAAa,CAAC,iBAAiB,CAAC;AAEpC,IAAI,CAACH,eAAe,IAAI,IAAAI,sEAAkC,GAAE,EAAE;EAC5D,IAAIH,gCAAmB,EAAE;IACvBD,eAAe,GACbC,gCAAmB,CAACC,GAAG,CAAC,sBAAsB,CAAC,IAC/CD,gCAAmB,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAChD,CAAC,MAAM;IACLF,eAAe,GACbG,0BAAa,CAAC,sBAAsB,CAAC,IACrCA,0BAAa,CAAC,mBAAmB,CAAC;EACtC;AACF;AAAC,IAAAE,QAAA,GAEcL,eAAe;AAAAM,OAAA,CAAAC,OAAA,GAAAF,QAAA"}
\ No newline at end of file
+{"version":3,"names":["_reactNative","require","_shouldFallbackToLegacyNativeModule","RCTAsyncStorage","TurboModuleRegistry","get","NativeModules","shouldFallbackToLegacyNativeModule","_default","exports","default"],"sources":["RCTAsyncStorage.ts"],"sourcesContent":["// @ts-ignore Module ''react-native'' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get('PlatformLocalStorage') || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get('RNC_AsyncSQLiteDBStorage') ||\n    TurboModuleRegistry.get('RNCAsyncStorage')\n  : NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n    NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n    NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"],"mappings":";;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,mCAAA,GAAAD,OAAA;AAFA;;AAIA;AACA;AACA;AACA,IAAIE,eAAe,GAAGC,gCAAmB,GACrCA,gCAAmB,CAACC,GAAG,CAAC,sBAAsB,CAAC;AAAI;AACnDD,gCAAmB,CAACC,GAAG,CAAC,0BAA0B,CAAC,IACnDD,gCAAmB,CAACC,GAAG,CAAC,iBAAiB,CAAC,GAC1CC,0BAAa,CAAC,sBAAsB,CAAC;AAAI;AACzCA,0BAAa,CAAC,0BAA0B,CAAC,IACzCA,0BAAa,CAAC,iBAAiB,CAAC;AAEpC,IAAI,CAACH,eAAe,IAAI,IAAAI,sEAAkC,GAAE,EAAE;EAC5D,IAAIH,gCAAmB,EAAE;IACvBD,eAAe,GACbC,gCAAmB,CAACC,GAAG,CAAC,sBAAsB,CAAC,IAC/CD,gCAAmB,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAChD,CAAC,MAAM;IACLF,eAAe,GACbG,0BAAa,CAAC,sBAAsB,CAAC,IACrCA,0BAAa,CAAC,mBAAmB,CAAC;EACtC;AACF;AAAC,IAAAE,QAAA,GAEcL,eAAe;AAAAM,OAAA,CAAAC,OAAA,GAAAF,QAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/helpers.js.map b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/helpers.js.map
index 35bef25..a9ad486 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/helpers.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/helpers.js.map
@@ -1 +1 @@
-{"version":3,"names":["checkValidArgs","keyValuePairs","callback","Array","isArray","length","Error","checkValidInput","_len","arguments","input","_key","key","value","console","warn","convertError","error","out","message","convertErrors","errs","errors","ensureArray","map","e"],"sources":["helpers.ts"],"sourcesContent":["import type { ErrorLike } from './types';\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\n    );\n  }\n\n  if (callback && typeof callback !== 'function') {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\n      );\n    }\n\n    throw new Error(\n      '[AsyncStorage] Expected function as second argument to multiSet'\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== 'string') {\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      console.warn(\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message);\n  (out as any).key = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n"],"mappings":";;;;;;;;;AAEO,SAASA,cAAcA,CAACC,aAAwB,EAAEC,QAAiB,EAAE;EAC1E,IACE,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,IAC7BA,aAAa,CAACI,MAAM,KAAK,CAAC,IAC1B,CAACF,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC,EAChC;IACA,MAAM,IAAIK,KAAK,CACb,gFAAgF,CACjF;EACH;EAEA,IAAIJ,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAC9C,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAII,KAAK,CACb,6IAA6I,CAC9I;IACH;IAEA,MAAM,IAAIA,KAAK,CACb,iEAAiE,CAClE;EACH;AACF;AAEO,SAASC,eAAeA,CAAA,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAJ,MAAA,EAAlBK,KAAK,OAAAP,KAAA,CAAAK,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAALD,KAAK,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EACtC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,KAAK;EAE1B,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;IAC3BE,OAAO,CAACC,IAAI,CACT,wBAAuB,OAAOH,GAAI,iHAAgHA,GAAI,IAAG,CAC3J;EACH;EAEA,IAAIF,KAAK,CAACL,MAAM,GAAG,CAAC,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;IACjD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIP,KAAK,CACZ,gJAA+IO,KAAM,iBAAgBD,GAAI,IAAG,CAC9K;IACH,CAAC,MAAM;MACLE,OAAO,CAACC,IAAI,CACT,qCAAoCH,GAAI,4GAA2GC,KAAM,iBAAgBD,GAAI,IAAG,CAClL;IACH;EACF;AACF;AAEO,SAASI,YAAYA,CAACC,KAAiB,EAAgB;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,GAAG,GAAG,IAAIZ,KAAK,CAACW,KAAK,CAACE,OAAO,CAAC;EACnCD,GAAG,CAASN,GAAG,GAAGK,KAAK,CAACL,GAAG;EAC5B,OAAOM,GAAG;AACZ;AAEO,SAASE,aAAaA,CAC3BC,IAAkB,EACkB;EACpC,MAAMC,MAAM,GAAGC,WAAW,CAACF,IAAI,CAAC;EAChC,OAAOC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAEC,CAAC,IAAKT,YAAY,CAACS,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D;AAEA,SAASF,WAAWA,CAACE,CAA2B,EAAsB;EACpE,IAAItB,KAAK,CAACC,OAAO,CAACqB,CAAC,CAAC,EAAE;IACpB,OAAOA,CAAC,CAACpB,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGoB,CAAC;EAClC,CAAC,MAAM,IAAIA,CAAC,EAAE;IACZ,OAAO,CAACA,CAAC,CAAC;EACZ,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
+{"version":3,"names":["checkValidArgs","keyValuePairs","callback","Array","isArray","length","Error","checkValidInput","_len","arguments","input","_key","key","value","console","warn","convertError","error","out","message","convertErrors","errs","errors","ensureArray","map","e"],"sources":["helpers.ts"],"sourcesContent":["import type { ErrorLike } from './types';\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\n    );\n  }\n\n  if (callback && typeof callback !== 'function') {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\n      );\n    }\n\n    throw new Error(\n      '[AsyncStorage] Expected function as second argument to multiSet'\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== 'string') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[AsyncStorage] The value for key '${key}' is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message);\n  (out as any).key = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n"],"mappings":";;;;;;;;;AAEO,SAASA,cAAcA,CAACC,aAAwB,EAAEC,QAAiB,EAAE;EAC1E,IACE,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,IAC7BA,aAAa,CAACI,MAAM,KAAK,CAAC,IAC1B,CAACF,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC,EAChC;IACA,MAAM,IAAIK,KAAK,CACb,gFAAgF,CACjF;EACH;EAEA,IAAIJ,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAC9C,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAII,KAAK,CACb,6IAA6I,CAC9I;IACH;IAEA,MAAM,IAAIA,KAAK,CACb,iEAAiE,CAClE;EACH;AACF;AAEO,SAASC,eAAeA,CAAA,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAJ,MAAA,EAAlBK,KAAK,OAAAP,KAAA,CAAAK,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAALD,KAAK,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EACtC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,KAAK;EAE1B,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;IAC3B;IACAE,OAAO,CAACC,IAAI,CACT,wBAAuB,OAAOH,GAAI,iHAAgHA,GAAI,IAAG,CAC3J;EACH;EAEA,IAAIF,KAAK,CAACL,MAAM,GAAG,CAAC,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;IACjD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIP,KAAK,CACZ,gJAA+IO,KAAM,iBAAgBD,GAAI,IAAG,CAC9K;IACH,CAAC,MAAM;MACL;MACAE,OAAO,CAACC,IAAI,CACT,qCAAoCH,GAAI,4GAA2GC,KAAM,iBAAgBD,GAAI,IAAG,CAClL;IACH;EACF;AACF;AAEO,SAASI,YAAYA,CAACC,KAAiB,EAAgB;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,GAAG,GAAG,IAAIZ,KAAK,CAACW,KAAK,CAACE,OAAO,CAAC;EACnCD,GAAG,CAASN,GAAG,GAAGK,KAAK,CAACL,GAAG;EAC5B,OAAOM,GAAG;AACZ;AAEO,SAASE,aAAaA,CAC3BC,IAAkB,EACkB;EACpC,MAAMC,MAAM,GAAGC,WAAW,CAACF,IAAI,CAAC;EAChC,OAAOC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAEC,CAAC,IAAKT,YAAY,CAACS,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D;AAEA,SAASF,WAAWA,CAACE,CAA2B,EAAsB;EACpE,IAAItB,KAAK,CAACC,OAAO,CAACqB,CAAC,CAAC,EAAE;IACpB,OAAOA,CAAC,CAACpB,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGoB,CAAC;EAClC,CAAC,MAAM,IAAIA,CAAC,EAAE;IACZ,OAAO,CAACA,CAAC,CAAC;EACZ,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/types.js.map b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/types.js.map
index f5d8ef9..f54afd3 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/commonjs/types.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/commonjs/types.js.map
@@ -1 +1 @@
-{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type ErrorLike = {\n  message: string;\n  key: string;\n};\n\nexport type Callback = (error?: Error | null) => void;\n\nexport type CallbackWithResult<T> = (\n  error?: Error | null,\n  result?: T | null\n) => void;\n\nexport type KeyValuePair = [string, string | null];\n\nexport type MultiCallback = (errors?: readonly (Error | null)[] | null) => void;\n\nexport type MultiGetCallback = (\n  errors?: readonly (Error | null)[] | null,\n  result?: readonly KeyValuePair[]\n) => void;\n\nexport type MultiRequest = {\n  keys: readonly string[];\n  callback?: MultiGetCallback;\n  keyIndex: number;\n  resolve?: (result: readonly KeyValuePair[]) => void;\n  reject?: (error?: any) => void;\n};\n\nexport type AsyncStorageHook = {\n  getItem: (callback?: CallbackWithResult<string>) => Promise<string | null>;\n  setItem: (value: string, callback?: Callback) => Promise<void>;\n  mergeItem: (value: string, callback?: Callback) => Promise<void>;\n  removeItem: (callback?: Callback) => Promise<void>;\n};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nexport type AsyncStorageStatic = {\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n   */\n  getItem: (\n    key: string,\n    callback?: CallbackWithResult<string>\n  ) => Promise<string | null>;\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n   */\n  setItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n   */\n  removeItem: (key: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n   */\n  mergeItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n   */\n  clear: (callback?: Callback) => Promise<void>;\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n   */\n  getAllKeys: (\n    callback?: CallbackWithResult<readonly string[]>\n  ) => Promise<readonly string[]>;\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n   * */\n  flushGetRequests: () => void;\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n   */\n  multiGet: (\n    keys: readonly string[],\n    callback?: MultiGetCallback\n  ) => Promise<readonly KeyValuePair[]>;\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n   */\n  multiSet: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n   */\n  multiRemove: (\n    keys: readonly string[],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n   */\n  multiMerge: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n};\n"],"mappings":""}
\ No newline at end of file
+{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type ErrorLike = {\n  message: string;\n  key: string;\n};\n\nexport type Callback = (error?: Error | null) => void;\n\nexport type CallbackWithResult<T> = (\n  error?: Error | null,\n  result?: T | null\n) => void;\n\nexport type KeyValuePair = [string, string | null];\n\nexport type MultiCallback = (errors?: readonly (Error | null)[] | null) => void;\n\nexport type MultiGetCallback = (\n  errors?: readonly (Error | null)[] | null,\n  result?: readonly KeyValuePair[]\n) => void;\n\nexport type MultiRequest = {\n  keys: readonly string[];\n  callback?: MultiGetCallback;\n  keyIndex: number;\n  resolve?: (result: readonly KeyValuePair[]) => void;\n  reject?: (error?: any) => void;\n};\n\nexport type AsyncStorageHook = {\n  getItem: (callback?: CallbackWithResult<string>) => Promise<string | null>;\n  setItem: (value: string, callback?: Callback) => Promise<void>;\n  mergeItem: (value: string, callback?: Callback) => Promise<void>;\n  removeItem: (callback?: Callback) => Promise<void>;\n};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nexport type AsyncStorageStatic = {\n  setAppGroupName: (groupName?: string, callback?: Callback) => Promise<void>;\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n   */\n  getItem: (\n    key: string,\n    callback?: CallbackWithResult<string>\n  ) => Promise<string | null>;\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n   */\n  setItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n   */\n  removeItem: (key: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n   */\n  mergeItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n   */\n  clear: (callback?: Callback) => Promise<void>;\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n   */\n  getAllKeys: (\n    callback?: CallbackWithResult<readonly string[]>\n  ) => Promise<readonly string[]>;\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n   * */\n  flushGetRequests: () => void;\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n   */\n  multiGet: (\n    keys: readonly string[],\n    callback?: MultiGetCallback\n  ) => Promise<readonly KeyValuePair[]>;\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n   */\n  multiSet: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n   */\n  multiRemove: (\n    keys: readonly string[],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n   */\n  multiMerge: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n};\n"],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js
index 469edc0..434cbe5 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js
@@ -46,6 +46,12 @@ function createPromiseAll(promises, callback, processResult) {
   });
 }
 const AsyncStorage = {
+  /**
+   * Sets `groupName` value.
+   */
+  setAppGroupName: (_groupName, callback) => {
+    return createPromise(() => undefined, callback);
+  },
   /**
    * Fetches `key` value.
    */
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js.map b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js.map
index 06d968a..db3c7ca 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js.map
@@ -1 +1 @@
-{"version":3,"names":["mergeOptions","merge","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","undefined","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"sources":["AsyncStorage.ts"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"names":["mergeOptions","merge","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","setAppGroupName","_groupName","undefined","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"sources":["AsyncStorage.ts"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Sets `groupName` value.\n   */\n  setAppGroupName: (_groupName, callback) => {\n    return createPromise(() => undefined, callback);\n  },\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,YAAY,MAAM,eAAe;AAOxC,MAAMC,KAAK,GAAGD,YAAY,CAACE,IAAI,CAAC;EAC9BC,YAAY,EAAE,IAAI;EAClBC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,SAASC,qBAAqBA,CAACC,GAAW,EAAEC,KAAa,EAAE;EACzD,MAAMC,QAAQ,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC;EACjD,IAAIE,QAAQ,EAAE;IACZ,MAAMI,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;IACtC,MAAMO,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC;IACnC,MAAMS,SAAS,GAAGH,IAAI,CAACI,SAAS,CAAChB,KAAK,CAACW,SAAS,EAAEG,SAAS,CAAC,CAAC;IAC7DN,MAAM,CAACC,YAAY,CAACQ,OAAO,CAACZ,GAAG,EAAEU,SAAS,CAAC;EAC7C,CAAC,MAAM;IACLP,MAAM,CAACC,YAAY,CAACQ,OAAO,CAACZ,GAAG,EAAEC,KAAK,CAAC;EACzC;AACF;AAEA,SAASY,aAAaA,CACpBC,QAAsB,EACtBC,QAAmB,EACF;EACjB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMjB,KAAK,GAAGa,QAAQ,EAAE;MACxBC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,IAAI,EAAEd,KAAK,CAAC;MACvBgB,OAAO,CAAChB,KAAK,CAAC;IAChB,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGI,GAAG,CAAC;MACfD,MAAM,CAACC,GAAG,CAAC;IACb;EACF,CAAC,CAAC;AACJ;AAEA,SAASC,gBAAgBA,CACvBC,QAA2B,EAC3BN,QAA2C,EAC3CO,aAA+B,EACV;EACrB,OAAON,OAAO,CAACO,GAAG,CAACF,QAAQ,CAAC,CAACG,IAAI,CAC9BC,MAAM,IAAK;IACV,MAAMxB,KAAK,GAAG,CAAAqB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGG,MAAM,CAAC,KAAI,IAAI;IAC7CV,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,IAAI,EAAEd,KAAK,CAAC;IACvB,OAAOe,OAAO,CAACC,OAAO,CAAChB,KAAK,CAAC;EAC/B,CAAC,EACAyB,MAAM,IAAK;IACVX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGW,MAAM,CAAC;IAClB,OAAOV,OAAO,CAACE,MAAM,CAACQ,MAAM,CAAC;EAC/B,CAAC,CACF;AACH;AAEA,MAAMC,YAAgC,GAAG;EACvC;AACF;AACA;EACEC,eAAe,EAAEA,CAACC,UAAU,EAAEd,QAAQ,KAAK;IACzC,OAAOF,aAAa,CAAC,MAAMiB,SAAS,EAAEf,QAAQ,CAAC;EACjD,CAAC;EACD;AACF;AACA;EACEV,OAAO,EAAEA,CAACL,GAAG,EAAEe,QAAQ,KAAK;IAC1B,OAAOF,aAAa,CAAC,MAAMV,MAAM,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,EAAEe,QAAQ,CAAC;EACxE,CAAC;EAED;AACF;AACA;EACEH,OAAO,EAAEA,CAACZ,GAAG,EAAEC,KAAK,EAAEc,QAAQ,KAAK;IACjC,OAAOF,aAAa,CAClB,MAAMV,MAAM,CAACC,YAAY,CAACQ,OAAO,CAACZ,GAAG,EAAEC,KAAK,CAAC,EAC7Cc,QAAQ,CACT;EACH,CAAC;EAED;AACF;AACA;EACEgB,UAAU,EAAEA,CAAC/B,GAAG,EAAEe,QAAQ,KAAK;IAC7B,OAAOF,aAAa,CAAC,MAAMV,MAAM,CAACC,YAAY,CAAC2B,UAAU,CAAC/B,GAAG,CAAC,EAAEe,QAAQ,CAAC;EAC3E,CAAC;EAED;AACF;AACA;EACEiB,SAAS,EAAEA,CAAChC,GAAG,EAAEC,KAAK,EAAEc,QAAQ,KAAK;IACnC,OAAOF,aAAa,CAAC,MAAMd,qBAAqB,CAACC,GAAG,EAAEC,KAAK,CAAC,EAAEc,QAAQ,CAAC;EACzE,CAAC;EAED;AACF;AACA;EACEkB,KAAK,EAAGlB,QAAQ,IAAK;IACnB,OAAOF,aAAa,CAAC,MAAMV,MAAM,CAACC,YAAY,CAAC6B,KAAK,EAAE,EAAElB,QAAQ,CAAC;EACnE,CAAC;EAED;AACF;AACA;EACEmB,UAAU,EAAGnB,QAAQ,IAAK;IACxB,OAAOF,aAAa,CAAC,MAAM;MACzB,MAAMsB,YAAY,GAAGhC,MAAM,CAACC,YAAY,CAACgC,MAAM;MAC/C,MAAMC,IAAc,GAAG,EAAE;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,EAAEG,CAAC,IAAI,CAAC,EAAE;QACxC,MAAMtC,GAAG,GAAGG,MAAM,CAACC,YAAY,CAACJ,GAAG,CAACsC,CAAC,CAAC,IAAI,EAAE;QAC5CD,IAAI,CAACE,IAAI,CAACvC,GAAG,CAAC;MAChB;MACA,OAAOqC,IAAI;IACb,CAAC,EAAEtB,QAAQ,CAAC;EACd,CAAC;EAED;AACF;AACA;EACEyB,gBAAgB,EAAEA,CAAA,KAAMV,SAAS;EAEjC;AACF;AACA;AACA;AACA;AACA;EACEW,QAAQ,EAAEA,CAACJ,IAAI,EAAEtB,QAAQ,KAAK;IAC5B,MAAMM,QAAQ,GAAGgB,IAAI,CAACK,GAAG,CAAE1C,GAAG,IAAK2B,YAAY,CAACtB,OAAO,CAACL,GAAG,CAAC,CAAC;IAC7D,MAAMsB,aAAa,GAAIG,MAAgB,IACrCA,MAAM,CAACiB,GAAG,CAAC,CAACzC,KAAK,EAAEqC,CAAC,KAAK,CAACD,IAAI,CAACC,CAAC,CAAC,EAAErC,KAAK,CAAC,CAAC;IAC5C,OAAOmB,gBAAgB,CAACC,QAAQ,EAAEN,QAAQ,EAAEO,aAAa,CAAC;EAC5D,CAAC;EAED;AACF;AACA;AACA;EACEqB,QAAQ,EAAEA,CAACC,aAAa,EAAE7B,QAAQ,KAAK;IACrC,MAAMM,QAAQ,GAAGuB,aAAa,CAACF,GAAG,CAAEG,IAAI,IACtClB,YAAY,CAACf,OAAO,CAACiC,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CACvC;IACD,OAAOzB,gBAAgB,CAACC,QAAQ,EAAEN,QAAQ,CAAC;EAC7C,CAAC;EAED;AACF;AACA;EACE+B,WAAW,EAAEA,CAACT,IAAI,EAAEtB,QAAQ,KAAK;IAC/B,MAAMM,QAAQ,GAAGgB,IAAI,CAACK,GAAG,CAAE1C,GAAG,IAAK2B,YAAY,CAACI,UAAU,CAAC/B,GAAG,CAAC,CAAC;IAChE,OAAOoB,gBAAgB,CAACC,QAAQ,EAAEN,QAAQ,CAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEgC,UAAU,EAAEA,CAACH,aAAa,EAAE7B,QAAQ,KAAK;IACvC,MAAMM,QAAQ,GAAGuB,aAAa,CAACF,GAAG,CAAEG,IAAI,IACtClB,YAAY,CAACK,SAAS,CAACa,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CACzC;IACD,OAAOzB,gBAAgB,CAACC,QAAQ,EAAEN,QAAQ,CAAC;EAC7C;AACF,CAAC;AAED,eAAeY,YAAY"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js
index ccb8df1..8b2dd70 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js
@@ -38,6 +38,19 @@ const AsyncStorage = (() => {
   let _getKeys = [];
   let _immediate = null;
   return {
+    setAppGroupName: (groupName, callback) => {
+      return new Promise((resolve, reject) => {
+        RCTAsyncStorage.setAppGroupName(groupName, error => {
+          const err = convertError(error);
+          callback === null || callback === void 0 ? void 0 : callback(err);
+          if (err) {
+            reject(err);
+          } else {
+            resolve(undefined);
+          }
+        });
+      });
+    },
     /**
      * Fetches an item for a `key` and invokes a callback upon completion.
      *
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js.map b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js.map
index 9df1ab1..69b18da 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.native.js.map
@@ -1 +1 @@
-{"version":3,"names":["checkValidArgs","checkValidInput","convertError","convertErrors","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","_result$","value","errs","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","reqLength","length","errorList","i","_request$callback2","_request$resolve","request","_request$callback","_request$reject","call","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","_ref2"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"names":["checkValidArgs","checkValidInput","convertError","convertErrors","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","setAppGroupName","groupName","callback","Promise","resolve","reject","error","err","undefined","getItem","key","multiGet","errors","result","_result$","value","errs","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","reqLength","length","errorList","i","_request$callback2","_request$resolve","request","_request$callback","_request$reject","call","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","_ref2"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    setAppGroupName: (groupName, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.setAppGroupName(groupName, (error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve(undefined);\n          }\n        });\n      });\n    },\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/RCTAsyncStorage.js.map b/node_modules/@react-native-async-storage/async-storage/lib/module/RCTAsyncStorage.js.map
index f28be87..2debe4b 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/RCTAsyncStorage.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/RCTAsyncStorage.js.map
@@ -1 +1 @@
-{"version":3,"names":["NativeModules","TurboModuleRegistry","shouldFallbackToLegacyNativeModule","RCTAsyncStorage","get"],"sources":["RCTAsyncStorage.ts"],"sourcesContent":["// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get('PlatformLocalStorage') || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get('RNC_AsyncSQLiteDBStorage') ||\n    TurboModuleRegistry.get('RNCAsyncStorage')\n  : NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n    NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n    NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"],"mappings":"AAAA;AACA,SAASA,aAAa,EAAEC,mBAAmB,QAAQ,cAAc;AACjE,SAASC,kCAAkC,QAAQ,sCAAsC;;AAEzF;AACA;AACA;AACA,IAAIC,eAAe,GAAGF,mBAAmB,GACrCA,mBAAmB,CAACG,GAAG,CAAC,sBAAsB,CAAC;AAAI;AACnDH,mBAAmB,CAACG,GAAG,CAAC,0BAA0B,CAAC,IACnDH,mBAAmB,CAACG,GAAG,CAAC,iBAAiB,CAAC,GAC1CJ,aAAa,CAAC,sBAAsB,CAAC;AAAI;AACzCA,aAAa,CAAC,0BAA0B,CAAC,IACzCA,aAAa,CAAC,iBAAiB,CAAC;AAEpC,IAAI,CAACG,eAAe,IAAID,kCAAkC,EAAE,EAAE;EAC5D,IAAID,mBAAmB,EAAE;IACvBE,eAAe,GACbF,mBAAmB,CAACG,GAAG,CAAC,sBAAsB,CAAC,IAC/CH,mBAAmB,CAACG,GAAG,CAAC,mBAAmB,CAAC;EAChD,CAAC,MAAM;IACLD,eAAe,GACbH,aAAa,CAAC,sBAAsB,CAAC,IACrCA,aAAa,CAAC,mBAAmB,CAAC;EACtC;AACF;AAEA,eAAeG,eAAe"}
\ No newline at end of file
+{"version":3,"names":["NativeModules","TurboModuleRegistry","shouldFallbackToLegacyNativeModule","RCTAsyncStorage","get"],"sources":["RCTAsyncStorage.ts"],"sourcesContent":["// @ts-ignore Module ''react-native'' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get('PlatformLocalStorage') || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get('RNC_AsyncSQLiteDBStorage') ||\n    TurboModuleRegistry.get('RNCAsyncStorage')\n  : NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n    NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n    NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"],"mappings":"AAAA;AACA,SAASA,aAAa,EAAEC,mBAAmB,QAAQ,cAAc;AACjE,SAASC,kCAAkC,QAAQ,sCAAsC;;AAEzF;AACA;AACA;AACA,IAAIC,eAAe,GAAGF,mBAAmB,GACrCA,mBAAmB,CAACG,GAAG,CAAC,sBAAsB,CAAC;AAAI;AACnDH,mBAAmB,CAACG,GAAG,CAAC,0BAA0B,CAAC,IACnDH,mBAAmB,CAACG,GAAG,CAAC,iBAAiB,CAAC,GAC1CJ,aAAa,CAAC,sBAAsB,CAAC;AAAI;AACzCA,aAAa,CAAC,0BAA0B,CAAC,IACzCA,aAAa,CAAC,iBAAiB,CAAC;AAEpC,IAAI,CAACG,eAAe,IAAID,kCAAkC,EAAE,EAAE;EAC5D,IAAID,mBAAmB,EAAE;IACvBE,eAAe,GACbF,mBAAmB,CAACG,GAAG,CAAC,sBAAsB,CAAC,IAC/CH,mBAAmB,CAACG,GAAG,CAAC,mBAAmB,CAAC;EAChD,CAAC,MAAM;IACLD,eAAe,GACbH,aAAa,CAAC,sBAAsB,CAAC,IACrCA,aAAa,CAAC,mBAAmB,CAAC;EACtC;AACF;AAEA,eAAeG,eAAe"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/helpers.js.map b/node_modules/@react-native-async-storage/async-storage/lib/module/helpers.js.map
index 8133a15..305c8ac 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/helpers.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/helpers.js.map
@@ -1 +1 @@
-{"version":3,"names":["checkValidArgs","keyValuePairs","callback","Array","isArray","length","Error","checkValidInput","_len","arguments","input","_key","key","value","console","warn","convertError","error","out","message","convertErrors","errs","errors","ensureArray","map","e"],"sources":["helpers.ts"],"sourcesContent":["import type { ErrorLike } from './types';\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\n    );\n  }\n\n  if (callback && typeof callback !== 'function') {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\n      );\n    }\n\n    throw new Error(\n      '[AsyncStorage] Expected function as second argument to multiSet'\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== 'string') {\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      console.warn(\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message);\n  (out as any).key = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n"],"mappings":"AAEA,OAAO,SAASA,cAAcA,CAACC,aAAwB,EAAEC,QAAiB,EAAE;EAC1E,IACE,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,IAC7BA,aAAa,CAACI,MAAM,KAAK,CAAC,IAC1B,CAACF,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC,EAChC;IACA,MAAM,IAAIK,KAAK,CACb,gFAAgF,CACjF;EACH;EAEA,IAAIJ,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAC9C,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAII,KAAK,CACb,6IAA6I,CAC9I;IACH;IAEA,MAAM,IAAIA,KAAK,CACb,iEAAiE,CAClE;EACH;AACF;AAEA,OAAO,SAASC,eAAeA,CAAA,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAJ,MAAA,EAAlBK,KAAK,OAAAP,KAAA,CAAAK,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAALD,KAAK,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EACtC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,KAAK;EAE1B,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;IAC3BE,OAAO,CAACC,IAAI,CACT,wBAAuB,OAAOH,GAAI,iHAAgHA,GAAI,IAAG,CAC3J;EACH;EAEA,IAAIF,KAAK,CAACL,MAAM,GAAG,CAAC,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;IACjD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIP,KAAK,CACZ,gJAA+IO,KAAM,iBAAgBD,GAAI,IAAG,CAC9K;IACH,CAAC,MAAM;MACLE,OAAO,CAACC,IAAI,CACT,qCAAoCH,GAAI,4GAA2GC,KAAM,iBAAgBD,GAAI,IAAG,CAClL;IACH;EACF;AACF;AAEA,OAAO,SAASI,YAAYA,CAACC,KAAiB,EAAgB;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,GAAG,GAAG,IAAIZ,KAAK,CAACW,KAAK,CAACE,OAAO,CAAC;EACnCD,GAAG,CAASN,GAAG,GAAGK,KAAK,CAACL,GAAG;EAC5B,OAAOM,GAAG;AACZ;AAEA,OAAO,SAASE,aAAaA,CAC3BC,IAAkB,EACkB;EACpC,MAAMC,MAAM,GAAGC,WAAW,CAACF,IAAI,CAAC;EAChC,OAAOC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAEC,CAAC,IAAKT,YAAY,CAACS,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D;AAEA,SAASF,WAAWA,CAACE,CAA2B,EAAsB;EACpE,IAAItB,KAAK,CAACC,OAAO,CAACqB,CAAC,CAAC,EAAE;IACpB,OAAOA,CAAC,CAACpB,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGoB,CAAC;EAClC,CAAC,MAAM,IAAIA,CAAC,EAAE;IACZ,OAAO,CAACA,CAAC,CAAC;EACZ,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
+{"version":3,"names":["checkValidArgs","keyValuePairs","callback","Array","isArray","length","Error","checkValidInput","_len","arguments","input","_key","key","value","console","warn","convertError","error","out","message","convertErrors","errs","errors","ensureArray","map","e"],"sources":["helpers.ts"],"sourcesContent":["import type { ErrorLike } from './types';\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\n    );\n  }\n\n  if (callback && typeof callback !== 'function') {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\n      );\n    }\n\n    throw new Error(\n      '[AsyncStorage] Expected function as second argument to multiSet'\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== 'string') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[AsyncStorage] The value for key '${key}' is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message);\n  (out as any).key = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n"],"mappings":"AAEA,OAAO,SAASA,cAAcA,CAACC,aAAwB,EAAEC,QAAiB,EAAE;EAC1E,IACE,CAACC,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,IAC7BA,aAAa,CAACI,MAAM,KAAK,CAAC,IAC1B,CAACF,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC,EAChC;IACA,MAAM,IAAIK,KAAK,CACb,gFAAgF,CACjF;EACH;EAEA,IAAIJ,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAC9C,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAII,KAAK,CACb,6IAA6I,CAC9I;IACH;IAEA,MAAM,IAAIA,KAAK,CACb,iEAAiE,CAClE;EACH;AACF;AAEA,OAAO,SAASC,eAAeA,CAAA,EAAsB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAJ,MAAA,EAAlBK,KAAK,OAAAP,KAAA,CAAAK,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAALD,KAAK,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EACtC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,KAAK;EAE1B,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;IAC3B;IACAE,OAAO,CAACC,IAAI,CACT,wBAAuB,OAAOH,GAAI,iHAAgHA,GAAI,IAAG,CAC3J;EACH;EAEA,IAAIF,KAAK,CAACL,MAAM,GAAG,CAAC,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;IACjD,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIP,KAAK,CACZ,gJAA+IO,KAAM,iBAAgBD,GAAI,IAAG,CAC9K;IACH,CAAC,MAAM;MACL;MACAE,OAAO,CAACC,IAAI,CACT,qCAAoCH,GAAI,4GAA2GC,KAAM,iBAAgBD,GAAI,IAAG,CAClL;IACH;EACF;AACF;AAEA,OAAO,SAASI,YAAYA,CAACC,KAAiB,EAAgB;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,GAAG,GAAG,IAAIZ,KAAK,CAACW,KAAK,CAACE,OAAO,CAAC;EACnCD,GAAG,CAASN,GAAG,GAAGK,KAAK,CAACL,GAAG;EAC5B,OAAOM,GAAG;AACZ;AAEA,OAAO,SAASE,aAAaA,CAC3BC,IAAkB,EACkB;EACpC,MAAMC,MAAM,GAAGC,WAAW,CAACF,IAAI,CAAC;EAChC,OAAOC,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAEC,CAAC,IAAKT,YAAY,CAACS,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D;AAEA,SAASF,WAAWA,CAACE,CAA2B,EAAsB;EACpE,IAAItB,KAAK,CAACC,OAAO,CAACqB,CAAC,CAAC,EAAE;IACpB,OAAOA,CAAC,CAACpB,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGoB,CAAC;EAClC,CAAC,MAAM,IAAIA,CAAC,EAAE;IACZ,OAAO,CAACA,CAAC,CAAC;EACZ,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/module/types.js.map b/node_modules/@react-native-async-storage/async-storage/lib/module/types.js.map
index f5d8ef9..f54afd3 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/module/types.js.map
+++ b/node_modules/@react-native-async-storage/async-storage/lib/module/types.js.map
@@ -1 +1 @@
-{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type ErrorLike = {\n  message: string;\n  key: string;\n};\n\nexport type Callback = (error?: Error | null) => void;\n\nexport type CallbackWithResult<T> = (\n  error?: Error | null,\n  result?: T | null\n) => void;\n\nexport type KeyValuePair = [string, string | null];\n\nexport type MultiCallback = (errors?: readonly (Error | null)[] | null) => void;\n\nexport type MultiGetCallback = (\n  errors?: readonly (Error | null)[] | null,\n  result?: readonly KeyValuePair[]\n) => void;\n\nexport type MultiRequest = {\n  keys: readonly string[];\n  callback?: MultiGetCallback;\n  keyIndex: number;\n  resolve?: (result: readonly KeyValuePair[]) => void;\n  reject?: (error?: any) => void;\n};\n\nexport type AsyncStorageHook = {\n  getItem: (callback?: CallbackWithResult<string>) => Promise<string | null>;\n  setItem: (value: string, callback?: Callback) => Promise<void>;\n  mergeItem: (value: string, callback?: Callback) => Promise<void>;\n  removeItem: (callback?: Callback) => Promise<void>;\n};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nexport type AsyncStorageStatic = {\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n   */\n  getItem: (\n    key: string,\n    callback?: CallbackWithResult<string>\n  ) => Promise<string | null>;\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n   */\n  setItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n   */\n  removeItem: (key: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n   */\n  mergeItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n   */\n  clear: (callback?: Callback) => Promise<void>;\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n   */\n  getAllKeys: (\n    callback?: CallbackWithResult<readonly string[]>\n  ) => Promise<readonly string[]>;\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n   * */\n  flushGetRequests: () => void;\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n   */\n  multiGet: (\n    keys: readonly string[],\n    callback?: MultiGetCallback\n  ) => Promise<readonly KeyValuePair[]>;\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n   */\n  multiSet: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n   */\n  multiRemove: (\n    keys: readonly string[],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n   */\n  multiMerge: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n};\n"],"mappings":""}
\ No newline at end of file
+{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type ErrorLike = {\n  message: string;\n  key: string;\n};\n\nexport type Callback = (error?: Error | null) => void;\n\nexport type CallbackWithResult<T> = (\n  error?: Error | null,\n  result?: T | null\n) => void;\n\nexport type KeyValuePair = [string, string | null];\n\nexport type MultiCallback = (errors?: readonly (Error | null)[] | null) => void;\n\nexport type MultiGetCallback = (\n  errors?: readonly (Error | null)[] | null,\n  result?: readonly KeyValuePair[]\n) => void;\n\nexport type MultiRequest = {\n  keys: readonly string[];\n  callback?: MultiGetCallback;\n  keyIndex: number;\n  resolve?: (result: readonly KeyValuePair[]) => void;\n  reject?: (error?: any) => void;\n};\n\nexport type AsyncStorageHook = {\n  getItem: (callback?: CallbackWithResult<string>) => Promise<string | null>;\n  setItem: (value: string, callback?: Callback) => Promise<void>;\n  mergeItem: (value: string, callback?: Callback) => Promise<void>;\n  removeItem: (callback?: Callback) => Promise<void>;\n};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nexport type AsyncStorageStatic = {\n  setAppGroupName: (groupName?: string, callback?: Callback) => Promise<void>;\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n   */\n  getItem: (\n    key: string,\n    callback?: CallbackWithResult<string>\n  ) => Promise<string | null>;\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n   */\n  setItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n   */\n  removeItem: (key: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n   */\n  mergeItem: (key: string, value: string, callback?: Callback) => Promise<void>;\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n   */\n  clear: (callback?: Callback) => Promise<void>;\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n   */\n  getAllKeys: (\n    callback?: CallbackWithResult<readonly string[]>\n  ) => Promise<readonly string[]>;\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n   * */\n  flushGetRequests: () => void;\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n   */\n  multiGet: (\n    keys: readonly string[],\n    callback?: MultiGetCallback\n  ) => Promise<readonly KeyValuePair[]>;\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n   */\n  multiSet: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n   */\n  multiRemove: (\n    keys: readonly string[],\n    callback?: MultiCallback\n  ) => Promise<void>;\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n   */\n  multiMerge: (\n    keyValuePairs: [string, string][],\n    callback?: MultiCallback\n  ) => Promise<void>;\n};\n"],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/@react-native-async-storage/async-storage/lib/typescript/types.d.ts b/node_modules/@react-native-async-storage/async-storage/lib/typescript/types.d.ts
index 03bef6b..6b73491 100644
--- a/node_modules/@react-native-async-storage/async-storage/lib/typescript/types.d.ts
+++ b/node_modules/@react-native-async-storage/async-storage/lib/typescript/types.d.ts
@@ -28,6 +28,7 @@ export type AsyncStorageHook = {
  * See https://react-native-async-storage.github.io/async-storage/docs/api
  */
 export type AsyncStorageStatic = {
+    setAppGroupName: (groupName?: string, callback?: Callback) => Promise<void>;
     /**
      * Fetches an item for a `key` and invokes a callback upon completion.
      *
diff --git a/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts b/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts
index 2b4175f..c521dd2 100644
--- a/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts
+++ b/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts
@@ -51,6 +51,19 @@ const AsyncStorage = ((): AsyncStorageStatic => {
   let _immediate: ReturnType<typeof setImmediate> | null = null;
 
   return {
+    setAppGroupName: (groupName, callback) => {
+      return new Promise((resolve, reject) => {
+        RCTAsyncStorage.setAppGroupName(groupName, (error?: ErrorLike) => {
+          const err = convertError(error);
+          callback?.(err);
+          if (err) {
+            reject(err);
+          } else {
+            resolve(undefined);
+          }
+        });
+      });
+    },
     /**
      * Fetches an item for a `key` and invokes a callback upon completion.
      *
diff --git a/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.ts b/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.ts
index a14a75c..3afe7ac 100644
--- a/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.ts
+++ b/node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.ts
@@ -66,6 +66,12 @@ function createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(
 }
 
 const AsyncStorage: AsyncStorageStatic = {
+  /**
+   * Sets `groupName` value.
+   */
+  setAppGroupName: (_groupName, callback) => {
+    return createPromise(() => undefined, callback);
+  },
   /**
    * Fetches `key` value.
    */
diff --git a/node_modules/@react-native-async-storage/async-storage/src/types.ts b/node_modules/@react-native-async-storage/async-storage/src/types.ts
index 94cc27f..9ac737d 100644
--- a/node_modules/@react-native-async-storage/async-storage/src/types.ts
+++ b/node_modules/@react-native-async-storage/async-storage/src/types.ts
@@ -42,6 +42,7 @@ export type AsyncStorageHook = {
  * See https://react-native-async-storage.github.io/async-storage/docs/api
  */
 export type AsyncStorageStatic = {
+  setAppGroupName: (groupName?: string, callback?: Callback) => Promise<void>;
   /**
    * Fetches an item for a `key` and invokes a callback upon completion.
    *
