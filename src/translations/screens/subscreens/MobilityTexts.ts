import {translation as _, Language} from '../../commons';
import {Platform} from 'react-native';
import {
  FormFactor,
  PropulsionType,
} from '@atb/api/types/generated/mobility-types_v2';
import {
  GeofencingZoneExplanationsType,
  ParkingVehicleTypes,
} from '@atb/components/map';
import {formatNumberToString} from '@atb/utils/numbers';

export const MobilityTexts = {
  formFactor: (formFactor: FormFactor) => {
    switch (formFactor) {
      case FormFactor.Scooter:
        return _('Sparkesykkel', 'Electric scooter', 'Elektrisk sparkesykkel');
      case FormFactor.Bicycle:
        return _('Sykkel', 'Bicycle', 'Sykkel');
      case FormFactor.Car:
        return _('Bildeling', 'Car sharing', 'Bildeling');
      default:
        return _('Annet', 'Other', 'Annet');
    }
  },
  loginBlocker: _(
    'Logg inn for 친 starte turen',
    'Log in to start the trip',
    'Logg inn for 친 starte turen',
  ),
  loginBlockerInfoMessage: _(
    'Du m친 logge inn og ordne noen sm친ting for 친 starte turen',
    'You need to log in and fix some things to start the trip',
    'Du m친 logge inn og ordne nokre sm친ting for 친 starte turen',
  ),
  shmoBlockers: _(
    'Ordne sm친ting for 친 starte turen',
    'Fix some things to start the trip',
    'Ordne nokre sm친ting for 친 starte turen',
  ),
  shmoBlockersInfoMessage: _(
    'Du m친 ordne noen sm친ting for 친 starte turen',
    'You need to fix some things to start the trip',
    'Du m친 ordne nokre sm친ting for 친 starte turen',
  ),
  helpText: _('Trenger du hjelp?', 'Need help?', 'Treng du hjelp?'),
  unknownOperator: _('Ukjent operat칮r', 'Unknown operator', 'Ukjent operat칮r'),
  operatorAppSwitchButton: (operator: string) =>
    _(`칀pne ${operator}`, `Open ${operator}`, `칀pne ${operator}`),
  appMissingAlert: {
    title: (operator: string) =>
      _(`Last ned ${operator}`, `Download ${operator}`, `Last ned ${operator}`),
    text: (operator: string) =>
      _(
        `Det ser ut som du mangler ${operator}-appen`,
        `It seems you don't have the ${operator} app installed`,
        `Det ser ut som du manglar ${operator}-appen`,
      ),
    buttons: {
      cancel: _('Avbryt', 'Cancel', 'Avbryt'),
      openAppStore: (appStore: string) =>
        _(`칀pne ${appStore}`, `Open ${appStore}`, `칀pne ${appStore}`),
    },
  },
  appStore: () =>
    Platform.OS === 'ios'
      ? _('App Store', 'App Store', 'App Store')
      : _('Play Butikk', 'Play Store', 'Play Butikk'),
  appStoreOpenError: {
    text: (appStore: string, operator: string) =>
      _(
        `Vi fikk dessverre ikke til 친 친pne ${appStore} automatisk. G친 til ${appStore} og s칮k etter ${operator}-appen`,
        `We could not open ${appStore}. Please go to ${appStore} and search for ${operator}`,
        `Vi fikk dessverre ikkje opna ${appStore} automatisk. G친 til ${appStore} og s칮k etter ${operator}-appen`,
      ),
    button: _('OK', 'OK', 'OK'),
  },
  onboarding: {
    title: _(
      'Elsparkesykler og bysykler i kartet 游꿀',
      'Electrical scooters and city bikes in map 游꿀',
      'Elsparkesyklar og bysyklar i kartet 游꿀',
    ),
    body: _(
      'Se elsparkesykler og bysykler i Trondheim p친 ett sted. Skru p친 tjenesten i kartet.',
      'See electric scooters and city bikes in Trondheim in one app. Enable this feature through the map.',
      'Sj친 elsparkesyklar og bysyklar i Trondheim p친 ett sted. Skru p친 tenesta i kartet.',
    ),
    button: _('Den er grei!', 'Sounds good!', 'H칮res bra ut!'),
    a11yLabel: _(
      'Se elsparkesykler og bysykler i Trondheim p친 ett sted. Skru p친 tjenesten i kartet.',
      'See electric scooters and city bikes in Trondheim in one app. Enable this feature through the map.',
      'Sj친 elsparkesyklar og bysyklar i Trondheim p친 ett sted. Skru p친 tenesta i kartet.',
    ),
  },
  filter: {
    selectAll: _('Alle', 'All', 'Alle'),
  },
  reportParkingViolation: _(
    'Rapporter som feilparkert',
    'Report as wrongly parked',
    'Rapporter som feilparkert',
  ),
  range: (range: string) =>
    _(
      `omtrent ${range} rekkevidde`,
      `approximately ${range} range`,
      `omlag ${range} rekkjevidde`,
    ),
  includedWithTheTicket: _(
    'Inkludert i billetten',
    'Included with the ticket',
    'Inkludert i billetten',
  ),
  showInMap: _('Se i kart', 'Show in map', 'Sj친 i kart'),
  showInMapA11yLabel: _(
    'Aktiver for 친 se i kart',
    'Activate to show in map',
    'Aktiver for 친 sj친 i kart',
  ),
  errorLoadingValueCode: {
    title: _(
      'Henting av verdikode feilet',
      'Fetching value code failed',
      'Henting av verdikode feila',
    ),
    text: _(
      'Et problem oppstod ved henting av verdikode. Denne er n칮dvendig for 친 f친 med fordelen over til den andre appen.',
      'A problem occured while fetching the value code. This is required to get the benefit in the other app.',
      'Et problem oppstod ved henting av verdikode. Denne er n칮dvendig for 친 f친 med fordelen over til den andre appen.',
    ),
    retry: _('Pr칮v p친 nytt', 'Try again', `Pr칮v p친 nytt`),
  },
  totalCost: _('Totalkostnad', 'Total cost', 'Totalkostnad'),
  time: _('Tid', 'Time', 'Tid'),
};

export const ScooterTexts = {
  seeAppForPrices: (operator: string) =>
    _(
      `Se ${operator}-appen for priser`,
      `See ${operator} app for prices`,
      `Sj친 ${operator}-appen for prisar`,
    ),
  pricingPlan: {
    price: (price: number, language: Language) =>
      price > 0
        ? _(
            `+ ${formatNumberToString(price, language)} kr for oppstart`,
            `+ ${formatNumberToString(price, language)} kr to unlock`,
            `+ ${formatNumberToString(price, language)} kr for 친 l친se opp`,
          )
        : _('Gratis oppstart', 'Free to unlock', 'Gratis oppstart'),
  },
  loadingFailed: _(
    'Ops! Vi fant ikke denne sparkesykkelen',
    "Ops! We couldn't find this scooter",
    'Ops! Vi fann ikkje denne sparkesykkelen',
  ),
  range: _('rekkevidde', 'range', 'rekkjevidde'),
  unlock: _('oppl친sning', 'unlock', 'oppl친sing'),
  per: {
    unit(unit: string) {
      switch (unit) {
        case 'min':
          return _('per minutt', 'per minute', 'per minutt');
        case 'km':
          return _('per kilometer', 'per kilometer', 'per kilometer');
        default:
          return _('per', 'per', 'per');
      }
    },
  },
};

export const BicycleTexts = {
  stations: {
    numBikesAvailable: (amount: number) =>
      amount === 1
        ? _('ledig sykkel', 'available bike', 'ledig sykkel')
        : _('ledige sykler', 'available bikes', 'ledige syklar'),
    numDocksAvailable: (amount: number | undefined) => {
      if (amount === undefined) return _('', '', '');
      return amount === 1
        ? _('ledig sykkelplass', 'available dock', 'ledig sykkelplass')
        : _('ledige sykkelplasser', 'available docks', 'ledige sykkelplassar');
    },
    unknownDocksAvailable: _('Ukjent antall', 'Unknown', 'Ukjent antal'),
  },
  humanPoweredBike: _('Sykkel', 'Bicycle', 'Sykkel'),
  loadingFailed: _(
    'Ops! Vi fant ikke denne sykkelstasjonen',
    "Ops! We couldn't find this bike station",
    'Ops! Vi fann ikkje denne sykkelstasjonen',
  ),
};

export const CarSharingTexts = {
  stations: {
    carsAvailable: (amount: number, capacity: number) =>
      _(
        `${amount} av ${capacity}`,
        `${amount} of ${capacity}`,
        `${amount} av ${capacity}`,
      ),
    carsAvailableLabel: _('biler ledig', 'cars available', 'bilar ledige'),
    noCarsAvailable: _(
      'Ingen ledige biler',
      'No available cars',
      'Ingen ledige bilar',
    ),
  },
  loadingFailed: _(
    'Ops! Vi fant ikke denne parkeringen',
    "Ops! We couldn't find this car sharing station",
    'Ops! Vi fann ikkje denne parkeringa',
  ),
  propultionType: (type: PropulsionType) => {
    switch (type) {
      case PropulsionType.Electric:
        return _('Elektrisk', 'Electric', 'Elektrisk');
      case PropulsionType.CombustionDiesel:
        return _('Diesel', 'Diesel', 'Diesel');
      case PropulsionType.Combustion:
        return _('Bensin', 'Petrol', 'Bensin');
      case PropulsionType.PlugInHybrid:
        return _('Plug-in hybrid', 'Plug-in hybrid', 'Plug-in hybrid');
      case PropulsionType.HydrogenFuelCell:
        return _('Hydrogen', 'Hydrogen', 'Hydrogen');
      case PropulsionType.Hybrid:
        return _('Hybrid', 'Hybrid', 'Hybrid');
      default:
        return _(
          'Ukjent drivstofftype',
          'Unknown propultion type',
          'Ukjent drivstofftype',
        );
    }
  },
};

export const ParkAndRideTexts = {
  title: _('Innfartsparkering', "Park'n Ride", 'Innfartsparkering'),
  parkingFor: (type: ParkingVehicleTypes) => {
    switch (type) {
      case 'pedalCycle':
        return _('Sykkelparkering', 'Bike parking', 'Sykkelparkering');
      case 'car':
      default:
        return _('Bilparkering', 'Car parking', 'Bilparkering');
    }
  },
  disclaimer: _(
    'Betaling eller andre vilk친r kan gjelde p친 denne innfartsparkeringen',
    'Payment or other terms and conditions may apply to this parking',
    '',
  ),
  capacity: _('Plasser totalt', 'Parking spaces', 'Plassar totalt'),
  unknownCapacity: _(
    'Ukjent antall plasser',
    'Unknown number of spaces',
    'Ukjend antal plassar',
  ),
};

export const GeofencingZoneExplanations: GeofencingZoneExplanationsType = {
  allowed: {
    title: _('Tillatt omr친de', 'Allowed Area', 'Tillatt omr친de'),
    description: _(
      'Her kan du b친de kj칮re og parkere',
      'Here you can both drive and park',
      'Her kan du b친de k칮yre og parkere',
    ),
  },
  slow: {
    title: _('Saktesone', 'Slow Zone', 'Saktesone'),
    description: _(
      'Farten blir redusert i dette omr친det',
      'The speed will be reduced in this area',
      'Farta vert redusert i dette omr친det',
    ),
  },

  /*** future features, pending support from Entur's Mobility API: ***/
  // https://github.com/entur/lamassu/issues/448
  // Parking: {
  //   title: _('Parkeringssone', 'Parking Zone', 'Parkeringssone'),
  //   description: _(
  //     'Dette er et passende sted 친 parkere',
  //     'This is a suitable place to park',
  //     'Dette er ein passande stad 친 parkere',
  //   ),
  // },
  // BonusParking: {
  //   title: _(
  //     'Bonusparkeringssone',
  //     'Bonus Parking Zone',
  //     'Bonusparkeringssone',
  //   ),
  //   description: _(
  //     'Her f친r du rabatt for 친 parkere',
  //     'By parking here you get a discount',
  //     'Her f친r du rabatt for 친 parkere',
  //   ),
  // },

  noParking: {
    title: _(
      'Parkering forbudt-sone',
      'No Parking Zone',
      'Parkering forboden-sone',
    ),
    description: _(
      'Du kan ikke parkere i dette omr친det',
      'You cannot park in this area',
      'Du kan ikkje parkere i dette omr친det',
    ),
  },
  noEntry: {
    title: _('Kj칮ring forbudt-sone', 'No Riding Zone', 'Kj칮ring forboden-sone'),
    description: _(
      'Du kan ikke kj칮re inn i dette omr친det',
      'You cannot ride in this area',
      'Du kan ikkje k칮yre inn i dette omr친det',
    ),
  },
  unspecified: {
    title: _('Uspesifisert', 'Unspecified', 'Uspesifisert'),
    description: _(
      'Ingen regler angitt for dette omr친det',
      'No rules defined for this area',
      'Ingen reglar angitt for dette omr친det',
    ),
  },
};

export const GeofencingZoneExtraExplanations = {
  isStationParking: _(
    'Se etter parkeringssoner i kartet.',
    'Look for parking zones on the map.',
    'Se etter parkeringssoner i kartet.',
  ),
};
